{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Injector, NgZone, ChangeDetectorRef, ElementRef, Renderer2, Input, NgModule } from '@angular/core';\nimport { NzDropDownModule } from 'ng-zorro-antd/dropdown';\nimport { __decorate, __metadata } from 'tslib';\nimport { Router, ActivatedRoute, NavigationEnd, PRIMARY_OUTLET } from '@angular/router';\nimport { PREFIX } from 'ng-zorro-antd/core/logger';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil, startWith } from 'rxjs/operators';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzOverlayModule } from 'ng-zorro-antd/core/overlay';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'ng-zorro-antd/dropdown';\nimport * as ɵngcc3 from 'ng-zorro-antd/icon';\nimport * as ɵngcc4 from 'ng-zorro-antd/core/outlet';\n\nfunction NzBreadCrumbComponent_ng_container_1_nz_breadcrumb_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"nz-breadcrumb-item\");\n    ɵngcc0.ɵɵelementStart(1, \"a\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function NzBreadCrumbComponent_ng_container_1_nz_breadcrumb_item_1_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var breadcrumb_r2 = ctx.$implicit;\n      var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r3.navigate(breadcrumb_r2.url, $event);\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var breadcrumb_r2 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"href\", breadcrumb_r2.url, ɵngcc0.ɵɵsanitizeUrl);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(breadcrumb_r2.label);\n  }\n}\n\nfunction NzBreadCrumbComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzBreadCrumbComponent_ng_container_1_nz_breadcrumb_item_1_Template, 3, 2, \"nz-breadcrumb-item\", 1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.breadcrumbs);\n  }\n}\n\nvar _c0 = [\"*\"];\n\nfunction NzBreadCrumbItemComponent_ng_container_0_ng_template_2_Template(rf, ctx) {}\n\nfunction NzBreadCrumbItemComponent_ng_container_0_i_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 6);\n  }\n}\n\nfunction NzBreadCrumbItemComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"span\", 3);\n    ɵngcc0.ɵɵtemplate(2, NzBreadCrumbItemComponent_ng_container_0_ng_template_2_Template, 0, 0, \"ng-template\", 4);\n    ɵngcc0.ɵɵtemplate(3, NzBreadCrumbItemComponent_ng_container_0_i_3_Template, 1, 0, \"i\", 5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n\n    var _r1 = ɵngcc0.ɵɵreference(2);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzDropdownMenu\", ctx_r0.nzOverlay);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !!ctx_r0.nzOverlay);\n  }\n}\n\nfunction NzBreadCrumbItemComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 7);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction NzBreadCrumbItemComponent_span_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r6.nzBreadCrumbComponent.nzSeparator, \" \");\n  }\n}\n\nfunction NzBreadCrumbItemComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtemplate(1, NzBreadCrumbItemComponent_span_3_ng_container_1_Template, 2, 1, \"ng-container\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r3.nzBreadCrumbComponent.nzSeparator);\n  }\n}\n\nvar NzBreadCrumbComponent = /*#__PURE__*/function () {\n  function NzBreadCrumbComponent(injector, ngZone, cdr, elementRef, renderer) {\n    _classCallCheck(this, NzBreadCrumbComponent);\n\n    this.injector = injector;\n    this.ngZone = ngZone;\n    this.cdr = cdr;\n    this.nzAutoGenerate = false;\n    this.nzSeparator = '/';\n    this.nzRouteLabel = 'breadcrumb';\n\n    this.nzRouteLabelFn = function (label) {\n      return label;\n    };\n\n    this.breadcrumbs = [];\n    this.destroy$ = new Subject();\n    renderer.addClass(elementRef.nativeElement, 'ant-breadcrumb');\n  }\n\n  _createClass(NzBreadCrumbComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.nzAutoGenerate) {\n        this.registerRouterChange();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }, {\n    key: \"navigate\",\n    value: function navigate(url, e) {\n      var _this = this;\n\n      e.preventDefault();\n      this.ngZone.run(function () {\n        return _this.injector.get(Router).navigateByUrl(url).then();\n      }).then();\n    }\n  }, {\n    key: \"registerRouterChange\",\n    value: function registerRouterChange() {\n      var _this2 = this;\n\n      try {\n        var router = this.injector.get(Router);\n        var activatedRoute = this.injector.get(ActivatedRoute);\n        router.events.pipe(filter(function (e) {\n          return e instanceof NavigationEnd;\n        }), takeUntil(this.destroy$), startWith(true) // trigger initial render\n        ).subscribe(function () {\n          _this2.breadcrumbs = _this2.getBreadcrumbs(activatedRoute.root);\n\n          _this2.cdr.markForCheck();\n        });\n      } catch (e) {\n        throw new Error(\"\".concat(PREFIX, \" You should import RouterModule if you want to use 'NzAutoGenerate'.\"));\n      }\n    }\n  }, {\n    key: \"getBreadcrumbs\",\n    value: function getBreadcrumbs(route) {\n      var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var breadcrumbs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var children = route.children; // If there's no sub root, then stop the recurse and returns the generated breadcrumbs.\n\n      if (children.length === 0) {\n        return breadcrumbs;\n      }\n\n      var _iterator = _createForOfIteratorHelper(children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n\n          if (child.outlet === PRIMARY_OUTLET) {\n            // Only parse components in primary router-outlet (in another word, router-outlet without a specific name).\n            // Parse this layer and generate a breadcrumb item.\n            var routeUrl = child.snapshot.url.map(function (segment) {\n              return segment.path;\n            }).filter(function (path) {\n              return path;\n            }).join('/'); // Do not change nextUrl if routeUrl is falsy. This happens when it's a route lazy loading other modules.\n\n            var nextUrl = !!routeUrl ? url + \"/\".concat(routeUrl) : url;\n            var breadcrumbLabel = this.nzRouteLabelFn(child.snapshot.data[this.nzRouteLabel]); // If have data, go to generate a breadcrumb for it.\n\n            if (routeUrl && breadcrumbLabel) {\n              var breadcrumb = {\n                label: breadcrumbLabel,\n                params: child.snapshot.params,\n                url: nextUrl\n              };\n              breadcrumbs.push(breadcrumb);\n            }\n\n            return this.getBreadcrumbs(child, nextUrl, breadcrumbs);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return breadcrumbs;\n    }\n  }]);\n\n  return NzBreadCrumbComponent;\n}();\n\nNzBreadCrumbComponent.ɵfac = function NzBreadCrumbComponent_Factory(t) {\n  return new (t || NzBreadCrumbComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nNzBreadCrumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzBreadCrumbComponent,\n  selectors: [[\"nz-breadcrumb\"]],\n  inputs: {\n    nzAutoGenerate: \"nzAutoGenerate\",\n    nzSeparator: \"nzSeparator\",\n    nzRouteLabel: \"nzRouteLabel\",\n    nzRouteLabelFn: \"nzRouteLabelFn\"\n  },\n  exportAs: [\"nzBreadcrumb\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n  template: function NzBreadCrumbComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵtemplate(1, NzBreadCrumbComponent_ng_container_1_Template, 2, 1, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzAutoGenerate && ctx.breadcrumbs.length);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgIf, ɵngcc1.NgForOf, NzBreadCrumbItemComponent];\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nNzBreadCrumbComponent.ctorParameters = function () {\n  return [{\n    type: Injector\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }];\n};\n\nNzBreadCrumbComponent.propDecorators = {\n  nzAutoGenerate: [{\n    type: Input\n  }],\n  nzSeparator: [{\n    type: Input\n  }],\n  nzRouteLabel: [{\n    type: Input\n  }],\n  nzRouteLabelFn: [{\n    type: Input\n  }]\n};\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzBreadCrumbComponent.prototype, \"nzAutoGenerate\", void 0);\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzBreadCrumbComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      selector: 'nz-breadcrumb',\n      exportAs: 'nzBreadcrumb',\n      preserveWhitespaces: false,\n      template: \"\\n    <ng-content></ng-content>\\n    <ng-container *ngIf=\\\"nzAutoGenerate && breadcrumbs.length\\\">\\n      <nz-breadcrumb-item *ngFor=\\\"let breadcrumb of breadcrumbs\\\">\\n        <a [attr.href]=\\\"breadcrumb.url\\\" (click)=\\\"navigate(breadcrumb.url, $event)\\\">{{ breadcrumb.label }}</a>\\n      </nz-breadcrumb-item>\\n    </ng-container>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    nzAutoGenerate: [{\n      type: Input\n    }],\n    nzSeparator: [{\n      type: Input\n    }],\n    nzRouteLabel: [{\n      type: Input\n    }],\n    nzRouteLabelFn: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzBreadCrumbItemComponent = function NzBreadCrumbItemComponent(nzBreadCrumbComponent) {\n  _classCallCheck(this, NzBreadCrumbItemComponent);\n\n  this.nzBreadCrumbComponent = nzBreadCrumbComponent;\n};\n\nNzBreadCrumbItemComponent.ɵfac = function NzBreadCrumbItemComponent_Factory(t) {\n  return new (t || NzBreadCrumbItemComponent)(ɵngcc0.ɵɵdirectiveInject(NzBreadCrumbComponent));\n};\n\nNzBreadCrumbItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzBreadCrumbItemComponent,\n  selectors: [[\"nz-breadcrumb-item\"]],\n  inputs: {\n    nzOverlay: \"nzOverlay\"\n  },\n  exportAs: [\"nzBreadcrumbItem\"],\n  ngContentSelectors: _c0,\n  decls: 4,\n  vars: 3,\n  consts: [[4, \"ngIf\", \"ngIfElse\"], [\"noMenuTpl\", \"\"], [\"class\", \"ant-breadcrumb-separator\", 4, \"ngIf\"], [\"nz-dropdown\", \"\", 1, \"ant-breadcrumb-overlay-link\", 3, \"nzDropdownMenu\"], [3, \"ngTemplateOutlet\"], [\"nz-icon\", \"\", \"nzType\", \"down\", 4, \"ngIf\"], [\"nz-icon\", \"\", \"nzType\", \"down\"], [1, \"ant-breadcrumb-link\"], [1, \"ant-breadcrumb-separator\"], [4, \"nzStringTemplateOutlet\"]],\n  template: function NzBreadCrumbItemComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, NzBreadCrumbItemComponent_ng_container_0_Template, 4, 3, \"ng-container\", 0);\n      ɵngcc0.ɵɵtemplate(1, NzBreadCrumbItemComponent_ng_template_1_Template, 2, 0, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵtemplate(3, NzBreadCrumbItemComponent_span_3_Template, 2, 1, \"span\", 2);\n    }\n\n    if (rf & 2) {\n      var _r1 = ɵngcc0.ɵɵreference(2);\n\n      ɵngcc0.ɵɵproperty(\"ngIf\", !!ctx.nzOverlay)(\"ngIfElse\", _r1);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzBreadCrumbComponent.nzSeparator);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc2.NzDropDownDirective, ɵngcc1.NgTemplateOutlet, ɵngcc3.NzIconDirective, ɵngcc4.NzStringTemplateOutletDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nNzBreadCrumbItemComponent.ctorParameters = function () {\n  return [{\n    type: NzBreadCrumbComponent\n  }];\n};\n\nNzBreadCrumbItemComponent.propDecorators = {\n  nzOverlay: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzBreadCrumbItemComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      selector: 'nz-breadcrumb-item',\n      exportAs: 'nzBreadcrumbItem',\n      preserveWhitespaces: false,\n      template: \"\\n    <ng-container *ngIf=\\\"!!nzOverlay; else noMenuTpl\\\">\\n      <span class=\\\"ant-breadcrumb-overlay-link\\\" nz-dropdown [nzDropdownMenu]=\\\"nzOverlay\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"noMenuTpl\\\"></ng-template>\\n        <i *ngIf=\\\"!!nzOverlay\\\" nz-icon nzType=\\\"down\\\"></i>\\n      </span>\\n    </ng-container>\\n\\n    <ng-template #noMenuTpl>\\n      <span class=\\\"ant-breadcrumb-link\\\">\\n        <ng-content></ng-content>\\n      </span>\\n    </ng-template>\\n\\n    <span class=\\\"ant-breadcrumb-separator\\\" *ngIf=\\\"nzBreadCrumbComponent.nzSeparator\\\">\\n      <ng-container *nzStringTemplateOutlet=\\\"nzBreadCrumbComponent.nzSeparator\\\">\\n        {{ nzBreadCrumbComponent.nzSeparator }}\\n      </ng-container>\\n    </span>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: NzBreadCrumbComponent\n    }];\n  }, {\n    nzOverlay: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzBreadCrumbSeparatorComponent = function NzBreadCrumbSeparatorComponent() {\n  _classCallCheck(this, NzBreadCrumbSeparatorComponent);\n};\n\nNzBreadCrumbSeparatorComponent.ɵfac = function NzBreadCrumbSeparatorComponent_Factory(t) {\n  return new (t || NzBreadCrumbSeparatorComponent)();\n};\n\nNzBreadCrumbSeparatorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzBreadCrumbSeparatorComponent,\n  selectors: [[\"nz-breadcrumb-separator\"]],\n  exportAs: [\"nzBreadcrumbSeparator\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"ant-breadcrumb-separator\"]],\n  template: function NzBreadCrumbSeparatorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzBreadCrumbSeparatorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-breadcrumb-separator',\n      exportAs: 'nzBreadcrumbSeparator',\n      template: \"\\n    <span class=\\\"ant-breadcrumb-separator\\\">\\n      <ng-content></ng-content>\\n    </span>\\n  \"\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzBreadCrumbModule = function NzBreadCrumbModule() {\n  _classCallCheck(this, NzBreadCrumbModule);\n};\n\nNzBreadCrumbModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzBreadCrumbModule\n});\nNzBreadCrumbModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzBreadCrumbModule_Factory(t) {\n    return new (t || NzBreadCrumbModule)();\n  },\n  imports: [[CommonModule, NzOutletModule, OverlayModule, NzOverlayModule, NzDropDownModule, NzIconModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzBreadCrumbModule, {\n    declarations: function declarations() {\n      return [NzBreadCrumbComponent, NzBreadCrumbItemComponent, NzBreadCrumbSeparatorComponent];\n    },\n    imports: function imports() {\n      return [CommonModule, NzOutletModule, OverlayModule, NzOverlayModule, NzDropDownModule, NzIconModule];\n    },\n    exports: function exports() {\n      return [NzBreadCrumbComponent, NzBreadCrumbItemComponent, NzBreadCrumbSeparatorComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzBreadCrumbModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, NzOutletModule, OverlayModule, NzOverlayModule, NzDropDownModule, NzIconModule],\n      declarations: [NzBreadCrumbComponent, NzBreadCrumbItemComponent, NzBreadCrumbSeparatorComponent],\n      exports: [NzBreadCrumbComponent, NzBreadCrumbItemComponent, NzBreadCrumbSeparatorComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzBreadCrumbComponent, NzBreadCrumbItemComponent, NzBreadCrumbModule, NzBreadCrumbSeparatorComponent };","map":{"version":3,"sources":["../../components/breadcrumb/breadcrumb.component.ts","../../components/breadcrumb/breadcrumb-item.component.ts","../../components/breadcrumb/breadcrumb-separator.component.ts","../../components/breadcrumb/breadcrumb.module.ts","../../components/breadcrumb/public-api.ts","../../components/breadcrumb/ng-zorro-antd-breadcrumb.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgDa,qB;AAYX,iCACU,QADV,EAEU,MAFV,EAGU,GAHV,EAIE,UAJF,EAKE,QALF,EAKqB;AAAA;;AAJX,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,GAAA,GAAA,GAAA;AAZe,SAAA,cAAA,GAAiB,KAAjB;AAChB,SAAA,WAAA,GAAiD,GAAjD;AACA,SAAA,YAAA,GAAuB,YAAvB;;AACA,SAAA,cAAA,GAA4C,UAAA,KAAK;AAAA,aAAI,KAAJ;AAAA,KAAjD;;AAET,SAAA,WAAA,GAAkC,EAAlC;AAEQ,SAAA,QAAA,GAAW,IAAI,OAAJ,EAAX;AASN,IAAA,QAAQ,CAAC,QAAT,CAAkB,UAAU,CAAC,aAA7B,EAA4C,gBAA5C;AACD;;;;+BAEO;AACN,UAAI,KAAK,cAAT,EAAyB;AACvB,aAAK,oBAAL;AACD;AACF;;;kCAEU;AACT,WAAK,QAAL,CAAc,IAAd;AACA,WAAK,QAAL,CAAc,QAAd;AACD;;;6BAEQ,G,EAAa,C,EAAa;AAAA;;AACjC,MAAA,CAAC,CAAC,cAAF;AAEA,WAAK,MAAL,CAAY,GAAZ,CAAgB;AAAA,eAAM,KAAI,CAAC,QAAL,CAAc,GAAd,CAAkB,MAAlB,EAA0B,aAA1B,CAAwC,GAAxC,EAA6C,IAA7C,EAAN;AAAA,OAAhB,EAA2E,IAA3E;AACD;;;2CAE2B;AAAA;;AAC1B,UAAI;AACF,YAAM,MAAM,GAAG,KAAK,QAAL,CAAc,GAAd,CAAkB,MAAlB,CAAf;AACA,YAAM,cAAc,GAAG,KAAK,QAAL,CAAc,GAAd,CAAkB,cAAlB,CAAvB;AACA,QAAA,MAAM,CAAC,MAAP,CACG,IADH,CAEI,MAAM,CAAC,UAAA,CAAC;AAAA,iBAAI,CAAC,YAAY,aAAjB;AAAA,SAAF,CAFV,EAGI,SAAS,CAAC,KAAK,QAAN,CAHb,EAII,SAAS,CAAC,IAAD,CAJb,CAImB;AAJnB,UAMG,SANH,CAMa,YAAA;AACT,UAAA,MAAI,CAAC,WAAL,GAAmB,MAAI,CAAC,cAAL,CAAoB,cAAc,CAAC,IAAnC,CAAnB;;AACA,UAAA,MAAI,CAAC,GAAL,CAAS,YAAT;AACD,SATH;AAUD,OAbD,CAaE,OAAO,CAAP,EAAU;AACV,cAAM,IAAI,KAAJ,WAAa,MAAb,0EAAN;AACD;AACF;;;mCAEsB,K,EAA6E;AAAA,UAAtD,GAAsD,uEAAxC,EAAwC;AAAA,UAApC,WAAoC,uEAAF,EAAE;AAClG,UAAM,QAAQ,GAAqB,KAAK,CAAC,QAAzC,CADkG,CAEtG;;AAEI,UAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,eAAO,WAAP;AACD;;AANiG,iDAQ9E,QAR8E;AAAA;;AAAA;AAQlG,4DAA8B;AAAA,cAAnB,KAAmB;;AAC5B,cAAI,KAAK,CAAC,MAAN,KAAiB,cAArB,EAAqC;AAC3C;AACQ;AACA,gBAAM,QAAQ,GAAW,KAAK,CAAC,QAAN,CAAe,GAAf,CACtB,GADsB,CAClB,UAAA,OAAO;AAAA,qBAAI,OAAO,CAAC,IAAZ;AAAA,aADW,EAEtB,MAFsB,CAEf,UAAA,IAAI;AAAA,qBAAI,IAAJ;AAAA,aAFW,EAGtB,IAHsB,CAGjB,GAHiB,CAAzB,CAHmC,CAO3C;;AAEQ,gBAAM,OAAO,GAAG,CAAC,CAAC,QAAF,GAAa,GAAG,cAAO,QAAP,CAAhB,GAAoC,GAApD;AACA,gBAAM,eAAe,GAAG,KAAK,cAAL,CAAoB,KAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,KAAK,YAAzB,CAApB,CAAxB,CAVmC,CAW3C;;AAEQ,gBAAI,QAAQ,IAAI,eAAhB,EAAiC;AAC/B,kBAAM,UAAU,GAAqB;AACnC,gBAAA,KAAK,EAAE,eAD4B;AAEnC,gBAAA,MAAM,EAAE,KAAK,CAAC,QAAN,CAAe,MAFY;AAGnC,gBAAA,GAAG,EAAE;AAH8B,eAArC;AAKA,cAAA,WAAW,CAAC,IAAZ,CAAiB,UAAjB;AACD;;AAED,mBAAO,KAAK,cAAL,CAAoB,KAApB,EAA2B,OAA3B,EAAoC,WAApC,CAAP;AACD;AACF;AAjCiG;AAAA;AAAA;AAAA;AAAA;;AAmClG,aAAO,WAAP;AACD;;;;;;sCA7GF,6B,CAAU,C,EAAA;AAAA,SAAA,KACT,CAAA,IAAA,qBADS,EACQ,MAAA,CAAA,iBAAA,CAA8B,MAAA,CAAA,QAA9B,CADR,EAET,MAAA,CAAa,iBAAb,CAAe,MAAsB,CAAA,MAArC,CAFS,EAE4B,MAAA,CAAA,iBAAA,CAC3B,MAAA,CAAA,iBAD2B,CAF5B,EAIT,MAAA,CAAQ,iBAAR,CAAwB,MAAA,CAAA,UAAxB,CAJS,EAKT,MAAA,CAAA,iBAAA,CAA0B,MAAA,CAAA,SAA1B,CALS,CAAA;AAMT,C;;AAAQ,qBAAE,CAAA,IAAF,GAAE,MAAA,CAAA,iBAAA,CAAA;AAAA,EAAA,IAAA,EAAA,qBAAA;AAAA,EAAA,SAAA,EAAA,CAAA,CAAA,eAAA,CAAA,CAAA;AAAA,EAAA,MAAA,EAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,cAAA,EAAA;AAAA,GAAA;AAAA,EAAA,QAAA,EAAA,CAAA,cAAA,CAAA;AAAA,EAAA,kBAAA,EAAA,GAAA;AAAA,EAAA,KAAA,EAAA,CAAA;AAAA,EAAA,IAAA,EAAA,CAAA;AAOT,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EACF,MADE,CAAA,EACF,CAAA,CAAA,EAAA,OAAA,EAAA,SAAA,CADE,EACF,CAAA,CAAA,EAAA,OAAA,CADE,CAPS;AAQX,EAAA,QAAA,EAAA,SAAA,8BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;;;;GARW;;;GAAA;kBAAA;mBASP;AATO,CAAA,CAAF;;AASJ,qBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAA+C;AAAA,IAAA,IAAA,EAtCnD;AAsCmD,GAA/C,EArCJ;AAAA,IAAA,IAAA,EACA;AADA,GAqCI,EAnCJ;AAAA,IAAA,IAAA,EANA;AAMA,GAmCI,EAxCJ;AAAA,IAAA,IAAA,EACA;AADA,GAwCI,EAtCJ;AAAA,IAAA,IAAA,EAKA;AALA,GAsCI,CAAA;AAAA,CAAA;;AAhCF,qBAAA,CAAA,cAAA,GAAA;AAEM,EAAA,cAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAiCP;AAjCO,GAAA,CAFN;AAmCS,EAAA,WAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAnCT;AAoCS,EAAA,YAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CApCT;AAqCS,EAAA,cAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA;AArCT,CAAA;;AAmCuB,UAAA,CAAA,CAAf,YAAY,EAAG,EAAC,UAAA,CAAA,aAAA,EAAA,MAAA,CAAD,CAAA,EACZ,qBAAA,CAAA,SADY,EACZ,gBADY,EACZ,KADmC,CAAvB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAC3B,C;ACpDA;;;;;;IAsCa,yB,GAMX,mCAAmB,qBAAnB,EAA+D;AAAA;;AAA5C,OAAA,qBAAA,GAAA,qBAAA;AAAgD,C;;0CAjCpE,iC,CAAU,C,EAAA;AAAA,SAAA,KACT,CAAA,IAAA,yBADS,EACQ,MAAwB,CAAA,iBAAxB,CAA8B,qBAA9B,CADR,CAAA;AAEM,C;;AAAiB,yBAAK,CAAA,IAAL,GAChC,MAAQ,CAAA,iBAAR,CAAU;AAAA,EAAA,IAAoB,EAAA,yBAApB;AACA,EAAA,SAAA,EAAA,CAAA,CAAA,oBAAA,CAAA,CADA;AAEV,EAAA,MAAA,EAAA;AAAA,IAAA,SAAqB,EAAK;AAA1B,GAFU;AAEgB,EAAA,QAC1B,EAAA,CAAQ,kBAAR,CAHU;AAGA,EAAA,kBAAA,EAAA,GAHA;AAGA,EAAA,KAAA,EAAA,CAHA;AAGA,EAAA,IAAA,EAAA,CAHA;AAGA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,EAAA,UAAA,CAAA,EAAA,CAAA,WAAA,EAAA,EAAA,CAAA,EAAA,CAAA,OAAA,EAAA,0BAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,EAAA,EAAA,CAAA,EAAA,6BAAA,EAAA,CAAA,EAAA,gBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,kBAAA,CAAA,EAAA,CAAA,SAAA,EAAA,EAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,SAAA,EAAA,EAAA,EAAA,QAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,qBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,0BAAA,CAAA,EAAA,CAAA,CAAA,EAAA,wBAAA,CAAA,CAHA;AAGA,EAAA,QAAA,EAAA,SAAA,kCAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;2BAmBT,gD,EACF,C,EAAA,C,EAAA,a,EAAA,I,EAAA,C,EAAA,MAAA,CAAA,sB;;;;;;;;;;;GAvBW;gJAAA;kBAAA;mBAwBP;AAxBO,CAAV,CADgC;;AAyB5B,yBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAEI;AAAA,IAAA,IAAA,EA/BD;AA+BC,GAFJ,CAAA;AAAA,CAAA;;AA7B8B,yBAAA,CAAA,cAAA,GAAA;AAGjC,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EA8BA;AA9BA,GAAA;AAHiC,CAAA;;;;;;;;;;;;;;;;;;;;;;;AAiCtB,C;AC1Cd;;;;;;IAgBa,8B;;;;+CATZ,sC,CAAU,C,EAAA;AAAA,SACT,KAAQ,CAAE,IAAA,8BAAV,GADS;AAC0B,C;;AACnC,8BAAU,CAAA,IAAV,GAAiC,MAAA,CAAA,iBAAA,CACvB;AAAA,EAAA,IAAA,EAAA,8BAAA;AAAA,EAAA,SAAA,EAAA,CAAA,CAAA,yBAAA,CAAA,CAAA;AAAA,EAAA,QAAA,EAIT,CAAA,uBAAA,CAJS;AAKX,EAAA,kBAAA,EAAA,GALW;AAKX,EAAA,KAAA,EAAA,CALW;AAKX,EAAA,IAAA,EAAA,CALW;AAKX,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,0BAAA,CAAA,CALW;AAKX,EAAA,QAAA,EAAA,SAAA,uCAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;;GALW;;AAAA,CADuB,CAAjC;;;;;;;;;;;;AAOG,C;AChBL;;;;;;IAsBa,kB;;;;iCALZ,gB,CAAA;AAAA,EAAA,IAAQ,EAAA;AAAR,C;AACC,kBAAU,CAAA,IAAV,GAAwB,MAAA,CAAA,gBAAA,CAAgB;AAAA,EAAA,OAAe,EAAA,SAAe,0BAAf,CAAmC,CAAnC,EAAmC;AAAY,WAAC,KAAA,CAAA,IAAA,kBAAA,GAAD;AACvF,GADyB;AACzB,EAAA,OAAA,EAAA,CAAA,CAAA,YAAA,EAAuB,cAAvB,EAAkD,aAAlD,EAAkD,eAAlD,EAAiF,gBAAjF,EACf,YADe,CAAA;AADyB,CAAhB,CAAxB;;CAE+B,YAAE;AAAA,GAAA,OAAA,SAAA,KAAA,WAAA,IAA2B,SAA3B,KAA2B,MAA+B,CAAA,kBAA/B,CAC7D,kBAD6D,EAC7D;AAAA,IAAA,YAAA,EAAA,wBAAA;AAAA,aAAA,CAAA,qBAAA,EAAA,yBAAA,EAAA,8BAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA,EAAA,mBAAA;AAAA,aAAA,CAAA,YAAA,EAAA,cAAA,EAAA,aAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,YAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA,EAAA,mBAAA;AAAA,aAAA,CAAA,qBAAA,EAAA,yBAAA,EAAA,8BAAA,CAAA;AAAA;AAAA,GAD6D,CAA3B;AAClC,C;;;;;;;;;;;;;AACI,C;ACtBL;;;;;ACAA;;;;;AAIA,SAAA,qBAAA,EAAA,yBAAA,EAAA,kBAAA,EAAA,8BAAA","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Injector,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Params, PRIMARY_OUTLET, Router } from '@angular/router';\nimport { PREFIX } from 'ng-zorro-antd/core/logger';\nimport { BooleanInput } from 'ng-zorro-antd/core/types';\n\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { filter, startWith, takeUntil } from 'rxjs/operators';\n\nexport interface BreadcrumbOption {\n  label: string;\n  params: Params;\n  url: string;\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-breadcrumb',\n  exportAs: 'nzBreadcrumb',\n  preserveWhitespaces: false,\n  template: `\n    <ng-content></ng-content>\n    <ng-container *ngIf=\"nzAutoGenerate && breadcrumbs.length\">\n      <nz-breadcrumb-item *ngFor=\"let breadcrumb of breadcrumbs\">\n        <a [attr.href]=\"breadcrumb.url\" (click)=\"navigate(breadcrumb.url, $event)\">{{ breadcrumb.label }}</a>\n      </nz-breadcrumb-item>\n    </ng-container>\n  `\n})\nexport class NzBreadCrumbComponent implements OnInit, OnDestroy {\n  static ngAcceptInputType_nzAutoGenerate: BooleanInput;\n\n  @Input() @InputBoolean() nzAutoGenerate = false;\n  @Input() nzSeparator: string | TemplateRef<void> | null = '/';\n  @Input() nzRouteLabel: string = 'breadcrumb';\n  @Input() nzRouteLabelFn: (label: string) => string = label => label;\n\n  breadcrumbs: BreadcrumbOption[] = [];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private injector: Injector,\n    private ngZone: NgZone,\n    private cdr: ChangeDetectorRef,\n    elementRef: ElementRef,\n    renderer: Renderer2\n  ) {\n    renderer.addClass(elementRef.nativeElement, 'ant-breadcrumb');\n  }\n\n  ngOnInit(): void {\n    if (this.nzAutoGenerate) {\n      this.registerRouterChange();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  navigate(url: string, e: MouseEvent): void {\n    e.preventDefault();\n\n    this.ngZone.run(() => this.injector.get(Router).navigateByUrl(url).then()).then();\n  }\n\n  private registerRouterChange(): void {\n    try {\n      const router = this.injector.get(Router);\n      const activatedRoute = this.injector.get(ActivatedRoute);\n      router.events\n        .pipe(\n          filter(e => e instanceof NavigationEnd),\n          takeUntil(this.destroy$),\n          startWith(true) // trigger initial render\n        )\n        .subscribe(() => {\n          this.breadcrumbs = this.getBreadcrumbs(activatedRoute.root);\n          this.cdr.markForCheck();\n        });\n    } catch (e) {\n      throw new Error(`${PREFIX} You should import RouterModule if you want to use 'NzAutoGenerate'.`);\n    }\n  }\n\n  private getBreadcrumbs(route: ActivatedRoute, url: string = '', breadcrumbs: BreadcrumbOption[] = []): BreadcrumbOption[] {\n    const children: ActivatedRoute[] = route.children;\n\n    // If there's no sub root, then stop the recurse and returns the generated breadcrumbs.\n    if (children.length === 0) {\n      return breadcrumbs;\n    }\n\n    for (const child of children) {\n      if (child.outlet === PRIMARY_OUTLET) {\n        // Only parse components in primary router-outlet (in another word, router-outlet without a specific name).\n        // Parse this layer and generate a breadcrumb item.\n        const routeUrl: string = child.snapshot.url\n          .map(segment => segment.path)\n          .filter(path => path)\n          .join('/');\n\n        // Do not change nextUrl if routeUrl is falsy. This happens when it's a route lazy loading other modules.\n        const nextUrl = !!routeUrl ? url + `/${routeUrl}` : url;\n        const breadcrumbLabel = this.nzRouteLabelFn(child.snapshot.data[this.nzRouteLabel]);\n\n        // If have data, go to generate a breadcrumb for it.\n        if (routeUrl && breadcrumbLabel) {\n          const breadcrumb: BreadcrumbOption = {\n            label: breadcrumbLabel,\n            params: child.snapshot.params,\n            url: nextUrl\n          };\n          breadcrumbs.push(breadcrumb);\n        }\n\n        return this.getBreadcrumbs(child, nextUrl, breadcrumbs);\n      }\n    }\n\n    return breadcrumbs;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { NzDropdownMenuComponent } from 'ng-zorro-antd/dropdown';\n\nimport { NzBreadCrumbComponent } from './breadcrumb.component';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-breadcrumb-item',\n  exportAs: 'nzBreadcrumbItem',\n  preserveWhitespaces: false,\n  template: `\n    <ng-container *ngIf=\"!!nzOverlay; else noMenuTpl\">\n      <span class=\"ant-breadcrumb-overlay-link\" nz-dropdown [nzDropdownMenu]=\"nzOverlay\">\n        <ng-template [ngTemplateOutlet]=\"noMenuTpl\"></ng-template>\n        <i *ngIf=\"!!nzOverlay\" nz-icon nzType=\"down\"></i>\n      </span>\n    </ng-container>\n\n    <ng-template #noMenuTpl>\n      <span class=\"ant-breadcrumb-link\">\n        <ng-content></ng-content>\n      </span>\n    </ng-template>\n\n    <span class=\"ant-breadcrumb-separator\" *ngIf=\"nzBreadCrumbComponent.nzSeparator\">\n      <ng-container *nzStringTemplateOutlet=\"nzBreadCrumbComponent.nzSeparator\">\n        {{ nzBreadCrumbComponent.nzSeparator }}\n      </ng-container>\n    </span>\n  `\n})\nexport class NzBreadCrumbItemComponent {\n  /**\n   * Dropdown content of a breadcrumb item.\n   */\n  @Input() nzOverlay?: NzDropdownMenuComponent;\n\n  constructor(public nzBreadCrumbComponent: NzBreadCrumbComponent) {}\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'nz-breadcrumb-separator',\n  exportAs: 'nzBreadcrumbSeparator',\n  template: `\n    <span class=\"ant-breadcrumb-separator\">\n      <ng-content></ng-content>\n    </span>\n  `\n})\nexport class NzBreadCrumbSeparatorComponent {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzOverlayModule } from 'ng-zorro-antd/core/overlay';\nimport { NzDropDownModule } from 'ng-zorro-antd/dropdown';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\n\nimport { NzBreadCrumbItemComponent } from './breadcrumb-item.component';\nimport { NzBreadCrumbSeparatorComponent } from './breadcrumb-separator.component';\nimport { NzBreadCrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, NzOutletModule, OverlayModule, NzOverlayModule, NzDropDownModule, NzIconModule],\n  declarations: [NzBreadCrumbComponent, NzBreadCrumbItemComponent, NzBreadCrumbSeparatorComponent],\n  exports: [NzBreadCrumbComponent, NzBreadCrumbItemComponent, NzBreadCrumbSeparatorComponent]\n})\nexport class NzBreadCrumbModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport * from './breadcrumb-item.component';\nexport * from './breadcrumb.component';\nexport * from './breadcrumb.module';\nexport * from './breadcrumb-separator.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}