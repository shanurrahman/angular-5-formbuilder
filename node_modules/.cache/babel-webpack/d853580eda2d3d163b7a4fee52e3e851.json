{"ast":null,"code":"import _createClass from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport swal from 'sweetalert2';\nimport { InjectionToken, ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, ComponentFactoryResolver, Directive, HostListener, ViewContainerRef, TemplateRef, ApplicationRef, Host, Injector, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Represents an object of targets for <swal> partials (use with *swalPartial directive).\n * We must use thunks to access the swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction SwalPartialComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nvar SwalPartialTargets = function SwalPartialTargets() {\n  _classCallCheck(this, SwalPartialTargets);\n\n  this.title = function () {\n    return swal.getTitle();\n  };\n\n  this.content = function () {\n    return swal.getContent();\n  };\n  /**\n   * @deprecated Will be removed in the next major version, please use {\\@link SwalPartialTargets#actions} instead.\n   */\n\n\n  this.buttonsWrapper = function () {\n    return swal.getButtonsWrapper();\n  };\n\n  this.actions = function () {\n    return swal.getActions();\n  };\n\n  this.confirmButton = function () {\n    return swal.getConfirmButton();\n  };\n\n  this.cancelButton = function () {\n    return swal.getCancelButton();\n  };\n\n  this.footer = function () {\n    return swal.getFooter();\n  };\n};\n\nSwalPartialTargets.ɵfac = function SwalPartialTargets_Factory(t) {\n  return new (t || SwalPartialTargets)();\n};\n\nSwalPartialTargets.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: SwalPartialTargets,\n  factory: SwalPartialTargets.ɵfac\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nvar SwalDefaults = new InjectionToken('SwalDefaults');\n/**\n * @param {?=} options\n * @return {?}\n */\n\nfunction swalDefaultsProvider() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    provide: SwalDefaults,\n    useValue: options\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of \\@Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * /!\\ Some SweetAlert options aren't \\@Inputs but \\@Outputs: onBeforeOpen, onOpen, and onClose (without \"on*\" prefix).\n *     However, preConfirm and inputValidtor are still \\@Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the Promise they must return.\n *\n * /!\\ You can notice that the SweetAlert2 `useRejections` and `expectRejections` are the only one to not have\n *     an \\@Input(). That's because they are deprecated and not using the default value of these parameters leads to\n *     clunky control flow. They are supported (use [options]=\"{}\"), but please don't use them.\n */\n\n\nvar SwalComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} defaultSwalOptions\n   */\n  function SwalComponent(defaultSwalOptions) {\n    _classCallCheck(this, SwalComponent);\n\n    this.defaultSwalOptions = defaultSwalOptions;\n    /**\n     * Emits a BeforeOpenEvent when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     */\n\n    this.beforeOpen = new EventEmitter();\n    /**\n     * Emits an OpenEvent when the modal is shown.\n     */\n\n    this.open = new EventEmitter();\n    /**\n     * Emits a CloseEvent when modal get closed.\n     */\n\n    this.close = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n\n    this.confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n\n    this.cancel = new EventEmitter();\n    this.nativeSwal = swal;\n    this.isCurrentlyShown = false;\n    this.touchedProps = new Set();\n    this.markTouched = this.touchedProps.add.bind(this.touchedProps); //=> Force `this` scope of show() on this component\n    //   Useful for doing things like (click)=\"mySwal.show()\".\n\n    this.show = this.show.bind(this);\n  }\n  /**\n   * An object of SweetAlert2 native options, useful if:\n   *  - you don't want to use the \\@Inputs for practical/philosophical reasons ;\n   *  - there are missing \\@Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n   *\n   * /!\\ Be aware that the options defined in this object will override the \\@Inputs of the same name.\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  _createClass(SwalComponent, [{\n    key: \"ngOnChanges\",\n\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    value: function ngOnChanges(changes) {\n      Object.keys(changes).filter(function (prop) {\n        return prop !== 'options';\n      }).forEach(this.markTouched);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.isCurrentlyShown) {\n        swal.close();\n      }\n    }\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     * @return {?}\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this = this;\n\n      //=> Build the SweetAlert2 options\n      var\n      /** @type {?} */\n      options = Object.assign({}, this.defaultSwalOptions, this.options, {\n        onBeforeOpen: function onBeforeOpen(modalElement) {\n          _this.beforeOpen.emit({\n            modalElement: modalElement\n          });\n        },\n        onOpen: function onOpen(modalElement) {\n          _this.isCurrentlyShown = true;\n\n          _this.open.emit({\n            modalElement: modalElement\n          });\n        },\n        onClose: function onClose(modalElement) {\n          _this.isCurrentlyShown = false;\n\n          _this.close.emit({\n            modalElement: modalElement\n          });\n        }\n      }); //=> Show the Swal!\n\n      var\n      /** @type {?} */\n      promise = swal(options); //=> Handle (confirm) and (cancel) @Outputs\n      // tslint:disable-next-line:no-string-literal\n\n      var\n      /** @type {?} */\n      useRejections =\n      /** @type {?} */\n      options.useRejections;\n      promise.then(function (result) {\n        if (useRejections) {\n          _this.confirm.emit(result);\n        } else if ('value' in result) {\n          _this.confirm.emit(result.value);\n        } else {\n          _this.cancel.emit(result.dismiss);\n        }\n      }, function (err) {\n        if (useRejections) {\n          _this.cancel.emit(err);\n        }\n      }); //=> Return the unaltered promise\n\n      return promise;\n    }\n  }, {\n    key: \"options\",\n    set: function set(options) {\n      Object.assign(this, options);\n      Object.keys(options).forEach(this.markTouched);\n    }\n    /**\n     * @return {?}\n     */\n    ,\n    get: function get() {\n      var _this2 = this;\n\n      var\n      /** @type {?} */\n      options = {}; //=> We will compute the options object based on the option keys that are known to have changed.\n      // That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially avoiding\n      // side effects.\n\n      this.touchedProps.forEach(function (prop) {\n        options[prop] =\n        /** @type {?} */\n        _this2[prop];\n      });\n      return options;\n    }\n  }]);\n\n  return SwalComponent;\n}();\n\nSwalComponent.ɵfac = function SwalComponent_Factory(t) {\n  return new (t || SwalComponent)(ɵngcc0.ɵɵdirectiveInject(SwalDefaults));\n};\n\nSwalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SwalComponent,\n  selectors: [[\"swal\"]],\n  inputs: {\n    options: \"options\",\n    title: \"title\",\n    titleText: \"titleText\",\n    text: \"text\",\n    html: \"html\",\n    footer: \"footer\",\n    type: \"type\",\n    backdrop: \"backdrop\",\n    toast: \"toast\",\n    target: \"target\",\n    input: \"input\",\n    width: \"width\",\n    padding: \"padding\",\n    background: \"background\",\n    position: \"position\",\n    grow: \"grow\",\n    customClass: \"customClass\",\n    timer: \"timer\",\n    animation: \"animation\",\n    allowOutsideClick: \"allowOutsideClick\",\n    allowEscapeKey: \"allowEscapeKey\",\n    allowEnterKey: \"allowEnterKey\",\n    showConfirmButton: \"showConfirmButton\",\n    showCancelButton: \"showCancelButton\",\n    confirmButtonText: \"confirmButtonText\",\n    cancelButtonText: \"cancelButtonText\",\n    confirmButtonColor: \"confirmButtonColor\",\n    cancelButtonColor: \"cancelButtonColor\",\n    confirmButtonClass: \"confirmButtonClass\",\n    cancelButtonClass: \"cancelButtonClass\",\n    confirmButtonAriaLabel: \"confirmButtonAriaLabel\",\n    cancelButtonAriaLabel: \"cancelButtonAriaLabel\",\n    buttonsStyling: \"buttonsStyling\",\n    reverseButtons: \"reverseButtons\",\n    focusConfirm: \"focusConfirm\",\n    focusCancel: \"focusCancel\",\n    showCloseButton: \"showCloseButton\",\n    closeButtonAriaLabel: \"closeButtonAriaLabel\",\n    showLoaderOnConfirm: \"showLoaderOnConfirm\",\n    preConfirm: \"preConfirm\",\n    imageUrl: \"imageUrl\",\n    imageWidth: \"imageWidth\",\n    imageHeight: \"imageHeight\",\n    imageAlt: \"imageAlt\",\n    imageClass: \"imageClass\",\n    inputPlaceholder: \"inputPlaceholder\",\n    inputValue: \"inputValue\",\n    inputOptions: \"inputOptions\",\n    inputAutoTrim: \"inputAutoTrim\",\n    inputAttributes: \"inputAttributes\",\n    inputValidator: \"inputValidator\",\n    inputClass: \"inputClass\",\n    progressSteps: \"progressSteps\",\n    currentProgressStep: \"currentProgressStep\",\n    progressStepsDistance: \"progressStepsDistance\"\n  },\n  outputs: {\n    beforeOpen: \"beforeOpen\",\n    open: \"open\",\n    close: \"close\",\n    confirm: \"confirm\",\n    cancel: \"cancel\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function SwalComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nSwalComponent.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [SwalDefaults]\n    }]\n  }];\n};\n\nSwalComponent.propDecorators = {\n  \"title\": [{\n    type: Input\n  }],\n  \"titleText\": [{\n    type: Input\n  }],\n  \"text\": [{\n    type: Input\n  }],\n  \"html\": [{\n    type: Input\n  }],\n  \"footer\": [{\n    type: Input\n  }],\n  \"type\": [{\n    type: Input\n  }],\n  \"backdrop\": [{\n    type: Input\n  }],\n  \"toast\": [{\n    type: Input\n  }],\n  \"target\": [{\n    type: Input\n  }],\n  \"input\": [{\n    type: Input\n  }],\n  \"width\": [{\n    type: Input\n  }],\n  \"padding\": [{\n    type: Input\n  }],\n  \"background\": [{\n    type: Input\n  }],\n  \"position\": [{\n    type: Input\n  }],\n  \"grow\": [{\n    type: Input\n  }],\n  \"customClass\": [{\n    type: Input\n  }],\n  \"timer\": [{\n    type: Input\n  }],\n  \"animation\": [{\n    type: Input\n  }],\n  \"allowOutsideClick\": [{\n    type: Input\n  }],\n  \"allowEscapeKey\": [{\n    type: Input\n  }],\n  \"allowEnterKey\": [{\n    type: Input\n  }],\n  \"showConfirmButton\": [{\n    type: Input\n  }],\n  \"showCancelButton\": [{\n    type: Input\n  }],\n  \"confirmButtonText\": [{\n    type: Input\n  }],\n  \"cancelButtonText\": [{\n    type: Input\n  }],\n  \"confirmButtonColor\": [{\n    type: Input\n  }],\n  \"cancelButtonColor\": [{\n    type: Input\n  }],\n  \"confirmButtonClass\": [{\n    type: Input\n  }],\n  \"cancelButtonClass\": [{\n    type: Input\n  }],\n  \"confirmButtonAriaLabel\": [{\n    type: Input\n  }],\n  \"cancelButtonAriaLabel\": [{\n    type: Input\n  }],\n  \"buttonsStyling\": [{\n    type: Input\n  }],\n  \"reverseButtons\": [{\n    type: Input\n  }],\n  \"focusConfirm\": [{\n    type: Input\n  }],\n  \"focusCancel\": [{\n    type: Input\n  }],\n  \"showCloseButton\": [{\n    type: Input\n  }],\n  \"closeButtonAriaLabel\": [{\n    type: Input\n  }],\n  \"showLoaderOnConfirm\": [{\n    type: Input\n  }],\n  \"preConfirm\": [{\n    type: Input\n  }],\n  \"imageUrl\": [{\n    type: Input\n  }],\n  \"imageWidth\": [{\n    type: Input\n  }],\n  \"imageHeight\": [{\n    type: Input\n  }],\n  \"imageAlt\": [{\n    type: Input\n  }],\n  \"imageClass\": [{\n    type: Input\n  }],\n  \"inputPlaceholder\": [{\n    type: Input\n  }],\n  \"inputValue\": [{\n    type: Input\n  }],\n  \"inputOptions\": [{\n    type: Input\n  }],\n  \"inputAutoTrim\": [{\n    type: Input\n  }],\n  \"inputAttributes\": [{\n    type: Input\n  }],\n  \"inputValidator\": [{\n    type: Input\n  }],\n  \"inputClass\": [{\n    type: Input\n  }],\n  \"progressSteps\": [{\n    type: Input\n  }],\n  \"currentProgressStep\": [{\n    type: Input\n  }],\n  \"progressStepsDistance\": [{\n    type: Input\n  }],\n  \"beforeOpen\": [{\n    type: Output\n  }],\n  \"open\": [{\n    type: Output\n  }],\n  \"close\": [{\n    type: Output\n  }],\n  \"confirm\": [{\n    type: Output\n  }],\n  \"cancel\": [{\n    type: Output\n  }],\n  \"options\": [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SwalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'swal',\n      template: '',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SwalDefaults]\n      }]\n    }];\n  }, {\n    beforeOpen: [{\n      type: Output\n    }],\n    open: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }],\n    confirm: [{\n      type: Output\n    }],\n    cancel: [{\n      type: Output\n    }],\n    options: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    titleText: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    html: [{\n      type: Input\n    }],\n    footer: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    backdrop: [{\n      type: Input\n    }],\n    toast: [{\n      type: Input\n    }],\n    target: [{\n      type: Input\n    }],\n    input: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    padding: [{\n      type: Input\n    }],\n    background: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    grow: [{\n      type: Input\n    }],\n    customClass: [{\n      type: Input\n    }],\n    timer: [{\n      type: Input\n    }],\n    animation: [{\n      type: Input\n    }],\n    allowOutsideClick: [{\n      type: Input\n    }],\n    allowEscapeKey: [{\n      type: Input\n    }],\n    allowEnterKey: [{\n      type: Input\n    }],\n    showConfirmButton: [{\n      type: Input\n    }],\n    showCancelButton: [{\n      type: Input\n    }],\n    confirmButtonText: [{\n      type: Input\n    }],\n    cancelButtonText: [{\n      type: Input\n    }],\n    confirmButtonColor: [{\n      type: Input\n    }],\n    cancelButtonColor: [{\n      type: Input\n    }],\n    confirmButtonClass: [{\n      type: Input\n    }],\n    cancelButtonClass: [{\n      type: Input\n    }],\n    confirmButtonAriaLabel: [{\n      type: Input\n    }],\n    cancelButtonAriaLabel: [{\n      type: Input\n    }],\n    buttonsStyling: [{\n      type: Input\n    }],\n    reverseButtons: [{\n      type: Input\n    }],\n    focusConfirm: [{\n      type: Input\n    }],\n    focusCancel: [{\n      type: Input\n    }],\n    showCloseButton: [{\n      type: Input\n    }],\n    closeButtonAriaLabel: [{\n      type: Input\n    }],\n    showLoaderOnConfirm: [{\n      type: Input\n    }],\n    preConfirm: [{\n      type: Input\n    }],\n    imageUrl: [{\n      type: Input\n    }],\n    imageWidth: [{\n      type: Input\n    }],\n    imageHeight: [{\n      type: Input\n    }],\n    imageAlt: [{\n      type: Input\n    }],\n    imageClass: [{\n      type: Input\n    }],\n    inputPlaceholder: [{\n      type: Input\n    }],\n    inputValue: [{\n      type: Input\n    }],\n    inputOptions: [{\n      type: Input\n    }],\n    inputAutoTrim: [{\n      type: Input\n    }],\n    inputAttributes: [{\n      type: Input\n    }],\n    inputValidator: [{\n      type: Input\n    }],\n    inputClass: [{\n      type: Input\n    }],\n    progressSteps: [{\n      type: Input\n    }],\n    currentProgressStep: [{\n      type: Input\n    }],\n    progressStepsDistance: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * [swal] directive. It takes a value that defines the Sweet Alert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n\n\nvar SwalDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} viewContainerRef\n   * @param {?} resolver\n   */\n  function SwalDirective(viewContainerRef, resolver) {\n    _classCallCheck(this, SwalDirective);\n\n    this.viewContainerRef = viewContainerRef;\n    this.resolver = resolver;\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n\n    this.confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n\n    this.cancel = new EventEmitter();\n  }\n  /**\n   * SweetAlert2 options or a SwalComponent instance.\n   * See the class doc block for more informations.\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  _createClass(SwalDirective, [{\n    key: \"ngOnInit\",\n\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      if (!this.swalInstance) {\n        var\n        /** @type {?} */\n        factory = this.resolver.resolveComponentFactory(SwalComponent);\n        this.swalRef = this.viewContainerRef.createComponent(factory);\n        this.swalInstance = this.swalRef.instance;\n      }\n    }\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.swalRef) {\n        this.swalRef.destroy();\n      }\n    }\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"onHostClicked\",\n    value: function onHostClicked(event) {\n      var _this3 = this;\n\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n\n      if (this.swalOptions) {\n        this.swalInstance.options = this.swalOptions;\n      }\n\n      var\n      /** @type {?} */\n      confirmSub = this.swalInstance.confirm.asObservable().subscribe(function (v) {\n        return _this3.confirm.emit(v);\n      });\n      var\n      /** @type {?} */\n      cancelSub = this.swalInstance.cancel.asObservable().subscribe(function (v) {\n        return _this3.cancel.emit(v);\n      });\n      this.swalInstance.show().then(unsubscribe);\n      /**\n       * @return {?}\n       */\n\n      function unsubscribe() {\n        confirmSub.unsubscribe();\n        cancelSub.unsubscribe();\n      }\n    }\n  }, {\n    key: \"swal\",\n    set: function set(options) {\n      if (options instanceof SwalComponent) {\n        this.swalInstance = options;\n      } else if (Array.isArray(options)) {\n        this.swalOptions = swal.argsToParams(options);\n      } else {\n        this.swalOptions = options;\n      }\n    }\n  }]);\n\n  return SwalDirective;\n}();\n\nSwalDirective.ɵfac = function SwalDirective_Factory(t) {\n  return new (t || SwalDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver));\n};\n\nSwalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: SwalDirective,\n  selectors: [[\"\", \"swal\", \"\"]],\n  hostBindings: function SwalDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function SwalDirective_click_HostBindingHandler($event) {\n        return ctx.onHostClicked($event);\n      });\n    }\n  },\n  inputs: {\n    swal: \"swal\"\n  },\n  outputs: {\n    confirm: \"confirm\",\n    cancel: \"cancel\"\n  }\n});\n/** @nocollapse */\n\nSwalDirective.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ComponentFactoryResolver\n  }];\n};\n\nSwalDirective.propDecorators = {\n  \"swal\": [{\n    type: Input\n  }],\n  \"confirm\": [{\n    type: Output\n  }],\n  \"cancel\": [{\n    type: Output\n  }],\n  \"onHostClicked\": [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SwalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[swal]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }];\n  }, {\n    confirm: [{\n      type: Output\n    }],\n    cancel: [{\n      type: Output\n    }],\n    swal: [{\n      type: Input\n    }],\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     * @param {?} event\n     * @return {?}\n     */\n    onHostClicked: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * \\@internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPartialDirective for info about the covered feature.\n */\n\n\nvar SwalPartialComponent = function SwalPartialComponent() {\n  _classCallCheck(this, SwalPartialComponent);\n};\n\nSwalPartialComponent.ɵfac = function SwalPartialComponent_Factory(t) {\n  return new (t || SwalPartialComponent)();\n};\n\nSwalPartialComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SwalPartialComponent,\n  selectors: [[\"ng-component\"]],\n  inputs: {\n    template: \"template\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngTemplateOutlet\"]],\n  template: function SwalPartialComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, SwalPartialComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template);\n    }\n  },\n  directives: [ɵngcc1.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nSwalPartialComponent.ctorParameters = function () {\n  return [];\n};\n\nSwalPartialComponent.propDecorators = {\n  \"template\": [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SwalPartialComponent, [{\n    type: Component,\n    args: [{\n      template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    template: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * A structural directive that lets you use Angular templates inside of Sweet Alerts.\n * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.\n * The default target is the content zone.\n *\n * Usage in your component's TypeScript code-behind (if you use another target than \"content\"):\n *\n *     \\@Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPartialTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPartial [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPartial=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n\n\nvar SwalPartialDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} resolver\n   * @param {?} injector\n   * @param {?} app\n   * @param {?} templateRef\n   * @param {?} swalTargets\n   * @param {?} swalComponent\n   */\n  function SwalPartialDirective(resolver, injector, app, templateRef, swalTargets, swalComponent) {\n    _classCallCheck(this, SwalPartialDirective);\n\n    this.resolver = resolver;\n    this.injector = injector;\n    this.app = app;\n    this.templateRef = templateRef;\n    this.swalTargets = swalTargets;\n    this.swalComponent = swalComponent;\n  }\n  /**\n   * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will\n   * receive the consumer's template.\n   * @return {?}\n   */\n\n\n  _createClass(SwalPartialDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this4 = this;\n\n      this.beforeOpenSubscription = this.swalComponent.beforeOpen.asObservable().subscribe(function () {\n        //=> Create the SwalPartialComponent on the target DOM node in the Sweet Alert\n        var\n        /** @type {?} */\n        targetEl = _this4.swalPartial ? _this4.swalPartial() : _this4.swalTargets.content();\n\n        var\n        /** @type {?} */\n        factory = _this4.resolver.resolveComponentFactory(SwalPartialComponent);\n\n        _this4.partialRef = factory.create(_this4.injector, [], targetEl); //=> Apply the consumer's template on the component\n\n        _this4.partialRef.instance.template = _this4.templateRef; //=> Make the Angular app aware of that detached view so change detection works\n\n        _this4.app.attachView(_this4.partialRef.hostView);\n      });\n      this.closeSubscription = this.swalComponent.close.asObservable().subscribe(function () {\n        //=> Detach the partial component from the app and destroy it\n        _this4.app.detachView(_this4.partialRef.hostView);\n\n        _this4.partialRef.destroy();\n      });\n    }\n    /**\n     * Unsubscribes from the Sweet Alert appearance/disappearance.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.beforeOpenSubscription.unsubscribe();\n      this.closeSubscription.unsubscribe();\n    }\n  }]);\n\n  return SwalPartialDirective;\n}();\n\nSwalPartialDirective.ɵfac = function SwalPartialDirective_Factory(t) {\n  return new (t || SwalPartialDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(SwalPartialTargets), ɵngcc0.ɵɵdirectiveInject(SwalComponent, 1));\n};\n\nSwalPartialDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: SwalPartialDirective,\n  selectors: [[\"\", \"swalPartial\", \"\"]],\n  inputs: {\n    swalPartial: \"swalPartial\"\n  }\n});\n/** @nocollapse */\n\nSwalPartialDirective.ctorParameters = function () {\n  return [{\n    type: ComponentFactoryResolver\n  }, {\n    type: Injector\n  }, {\n    type: ApplicationRef\n  }, {\n    type: TemplateRef\n  }, {\n    type: SwalPartialTargets\n  }, {\n    type: SwalComponent,\n    decorators: [{\n      type: Host\n    }]\n  }];\n};\n\nSwalPartialDirective.propDecorators = {\n  \"swalPartial\": [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SwalPartialDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[swalPartial]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.ApplicationRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: SwalPartialTargets\n    }, {\n      type: SwalComponent,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    swalPartial: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar SweetAlert2Module = /*#__PURE__*/function () {\n  function SweetAlert2Module() {\n    _classCallCheck(this, SweetAlert2Module);\n  }\n\n  _createClass(SweetAlert2Module, null, [{\n    key: \"forRoot\",\n\n    /**\n     * @param {?=} defaultSwalOptions\n     * @return {?}\n     */\n    value: function forRoot(defaultSwalOptions) {\n      return {\n        ngModule: SweetAlert2Module,\n        providers: [swalDefaultsProvider(defaultSwalOptions)]\n      };\n    }\n  }]);\n\n  return SweetAlert2Module;\n}();\n\nSweetAlert2Module.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: SweetAlert2Module\n});\nSweetAlert2Module.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function SweetAlert2Module_Factory(t) {\n    return new (t || SweetAlert2Module)();\n  },\n  providers: [SwalPartialTargets],\n  imports: [[CommonModule]]\n});\n/** @nocollapse */\n\nSweetAlert2Module.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SweetAlert2Module, {\n    declarations: function declarations() {\n      return [SwalComponent, SwalPartialDirective, SwalPartialComponent, SwalDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [SwalComponent, SwalPartialDirective, SwalDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SweetAlert2Module, [{\n    type: NgModule,\n    args: [{\n      declarations: [SwalComponent, SwalPartialDirective, SwalPartialComponent, SwalDirective],\n      providers: [SwalPartialTargets],\n      imports: [CommonModule],\n      exports: [SwalComponent, SwalPartialDirective, SwalDirective],\n      entryComponents: [SwalComponent, SwalPartialComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SwalPartialTargets, SwalComponent, SwalDirective, SwalPartialDirective, SweetAlert2Module, SwalDefaults as ɵa, swalDefaultsProvider as ɵb, SwalPartialComponent as ɵc };","map":{"version":3,"sources":["@toverux/ngx-sweetalert2/out/swal-partial-targets.ts","@toverux/ngx-sweetalert2/out/di.ts","@toverux/ngx-sweetalert2/out/swal.component.ts","@toverux/ngx-sweetalert2/out/swal.directive.ts","@toverux/ngx-sweetalert2/out/swal-partial.component.ts","@toverux/ngx-sweetalert2/out/swal-partial.directive.ts","@toverux/ngx-sweetalert2/out/sweetalert2.module.ts"],"names":[],"mappings":"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","sourcesContent":["import swal from 'sweetalert2';\n\n/**\n * Represents an object of targets for <swal> partials (use with *swalPartial directive).\n * We must use thunks to access the swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nexport class SwalPartialTargets {\n    public readonly title = () => swal.getTitle();\n\n    public readonly content = () => swal.getContent();\n\n    /**\n     * @deprecated Will be removed in the next major version, please use {@link SwalPartialTargets#actions} instead.\n     */\n    public readonly buttonsWrapper = () => swal.getButtonsWrapper();\n\n    public readonly actions = () => swal.getActions();\n\n    public readonly confirmButton = () => swal.getConfirmButton();\n\n    public readonly cancelButton = () => swal.getCancelButton();\n\n    public readonly footer = () => swal.getFooter();\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\n\nexport const SwalDefaults = new InjectionToken<SweetAlertOptions>('SwalDefaults');\n\nexport function swalDefaultsProvider(options: SweetAlertOptions = {}): Provider {\n    return {\n        provide: SwalDefaults,\n        useValue: options\n    };\n}\n","import {\n    ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnChanges, OnDestroy, Output, SimpleChanges\n} from '@angular/core';\nimport swal, { SweetAlertOptions } from 'sweetalert2';\nimport { SwalDefaults } from './di';\nimport * as events from './swal-events';\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, and onClose (without \"on*\" prefix).\n *     However, preConfirm and inputValidtor are still @Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the Promise they must return.\n *\n * /!\\ You can notice that the SweetAlert2 `useRejections` and `expectRejections` are the only one to not have\n *     an @Input(). That's because they are deprecated and not using the default value of these parameters leads to\n *     clunky control flow. They are supported (use [options]=\"{}\"), but please don't use them.\n */\n@Component({\n    selector: 'swal',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalComponent implements OnChanges, OnDestroy {\n    // If Swal gets more than a hundred props, I'll write a code generator, I promise.\n    // And I always resolve() my promises.\n    @Input() public title: SweetAlertOptions['title'];\n    @Input() public titleText: SweetAlertOptions['titleText'];\n    @Input() public text: SweetAlertOptions['text'];\n    @Input() public html: SweetAlertOptions['html'];\n    @Input() public footer: SweetAlertOptions['footer'];\n    @Input() public type: SweetAlertOptions['type'];\n    @Input() public backdrop: SweetAlertOptions['backdrop'];\n    @Input() public toast: SweetAlertOptions['toast'];\n    @Input() public target: SweetAlertOptions['target'];\n    @Input() public input: SweetAlertOptions['input'];\n    @Input() public width: SweetAlertOptions['width'];\n    @Input() public padding: SweetAlertOptions['padding'];\n    @Input() public background: SweetAlertOptions['background'];\n    @Input() public position: SweetAlertOptions['position'];\n    @Input() public grow: SweetAlertOptions['grow'];\n    @Input() public customClass: SweetAlertOptions['customClass'];\n    @Input() public timer: SweetAlertOptions['timer'];\n    @Input() public animation: SweetAlertOptions['animation'];\n    @Input() public allowOutsideClick: SweetAlertOptions['allowOutsideClick'];\n    @Input() public allowEscapeKey: SweetAlertOptions['allowEscapeKey'];\n    @Input() public allowEnterKey: SweetAlertOptions['allowEnterKey'];\n    @Input() public showConfirmButton: SweetAlertOptions['showConfirmButton'];\n    @Input() public showCancelButton: SweetAlertOptions['showCancelButton'];\n    @Input() public confirmButtonText: SweetAlertOptions['confirmButtonText'];\n    @Input() public cancelButtonText: SweetAlertOptions['cancelButtonText'];\n    @Input() public confirmButtonColor: SweetAlertOptions['confirmButtonColor'];\n    @Input() public cancelButtonColor: SweetAlertOptions['cancelButtonColor'];\n    @Input() public confirmButtonClass: SweetAlertOptions['confirmButtonClass'];\n    @Input() public cancelButtonClass: SweetAlertOptions['cancelButtonClass'];\n    @Input() public confirmButtonAriaLabel: SweetAlertOptions['confirmButtonAriaLabel'];\n    @Input() public cancelButtonAriaLabel: SweetAlertOptions['cancelButtonAriaLabel'];\n    @Input() public buttonsStyling: SweetAlertOptions['buttonsStyling'];\n    @Input() public reverseButtons: SweetAlertOptions['reverseButtons'];\n    @Input() public focusConfirm: SweetAlertOptions['focusConfirm'];\n    @Input() public focusCancel: SweetAlertOptions['focusCancel'];\n    @Input() public showCloseButton: SweetAlertOptions['showCloseButton'];\n    @Input() public closeButtonAriaLabel: SweetAlertOptions['closeButtonAriaLabel'];\n    @Input() public showLoaderOnConfirm: SweetAlertOptions['showLoaderOnConfirm'];\n    @Input() public preConfirm: SweetAlertOptions['preConfirm'];\n    @Input() public imageUrl: SweetAlertOptions['imageUrl'];\n    @Input() public imageWidth: SweetAlertOptions['imageWidth'];\n    @Input() public imageHeight: SweetAlertOptions['imageHeight'];\n    @Input() public imageAlt: SweetAlertOptions['imageAlt'];\n    @Input() public imageClass: SweetAlertOptions['imageClass'];\n    @Input() public inputPlaceholder: SweetAlertOptions['inputPlaceholder'];\n    @Input() public inputValue: SweetAlertOptions['inputValue'];\n    @Input() public inputOptions: SweetAlertOptions['inputOptions'];\n    @Input() public inputAutoTrim: SweetAlertOptions['inputAutoTrim'];\n    @Input() public inputAttributes: SweetAlertOptions['inputAttributes'];\n    @Input() public inputValidator: SweetAlertOptions['inputValidator'];\n    @Input() public inputClass: SweetAlertOptions['inputClass'];\n    @Input() public progressSteps: SweetAlertOptions['progressSteps'];\n    @Input() public currentProgressStep: SweetAlertOptions['currentProgressStep'];\n    @Input() public progressStepsDistance: SweetAlertOptions['progressStepsDistance'];\n\n    /**\n     * Emits a BeforeOpenEvent when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     */\n    @Output() public readonly beforeOpen = new EventEmitter<events.BeforeOpenEvent>();\n\n    /**\n     * Emits an OpenEvent when the modal is shown.\n     */\n    @Output() public readonly open = new EventEmitter<events.OpenEvent>();\n\n    /**\n     * Emits a CloseEvent when modal get closed.\n     */\n    @Output() public readonly close = new EventEmitter<events.CloseEvent>();\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<any>();\n\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    @Input() public set options(options: SweetAlertOptions) {\n        Object.assign(this, options);\n        Object.keys(options).forEach(this.markTouched);\n    }\n\n    public get options(): SweetAlertOptions {\n        const options: SweetAlertOptions = {};\n\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        // That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially avoiding\n        // side effects.\n        this.touchedProps.forEach(prop => {\n            options[prop] = (this as { [prop: string]: any })[prop];\n        });\n\n        return options;\n    }\n\n    public nativeSwal = swal;\n\n    private isCurrentlyShown = false;\n\n    private readonly touchedProps = new Set<keyof SweetAlertOptions>();\n\n    private readonly markTouched = this.touchedProps.add.bind(this.touchedProps);\n\n    public constructor(@Inject(SwalDefaults) private readonly defaultSwalOptions: SweetAlertOptions) {\n        //=> Force `this` scope of show() on this component\n        //   Useful for doing things like (click)=\"mySwal.show()\".\n        this.show = this.show.bind(this);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        Object.keys(changes)\n            .filter(prop => prop !== 'options')\n            .forEach(this.markTouched);\n    }\n\n    public ngOnDestroy(): void {\n        if (this.isCurrentlyShown) {\n            swal.close();\n        }\n    }\n\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     */\n    public show(): Promise<any> {\n        //=> Build the SweetAlert2 options\n        const options: SweetAlertOptions = {\n            //=> Merge with the default module-level options\n            ...this.defaultSwalOptions,\n\n            //=> Merge with calculated options set for that specific swal\n            ...this.options,\n\n            //=> Handle modal lifecycle events\n            onBeforeOpen: (modalElement) => {\n                this.beforeOpen.emit({ modalElement });\n            },\n\n            onOpen: (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.open.emit({ modalElement });\n            },\n\n            onClose: (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.close.emit({ modalElement });\n            }\n        };\n\n        //=> Show the Swal!\n        const promise = swal(options);\n\n        //=> Handle (confirm) and (cancel) @Outputs\n        // tslint:disable-next-line:no-string-literal\n        const useRejections = (options as { useRejections?: boolean }).useRejections;\n\n        promise.then(\n            result => {\n                if (useRejections) {\n                    this.confirm.emit(result);\n                } else if ('value' in result) {\n                    this.confirm.emit(result.value);\n                } else {\n                    this.cancel.emit(result.dismiss);\n                }\n            },\n            err => {\n                if (useRejections) {\n                    this.cancel.emit(err);\n                }\n            }\n        );\n\n        //=> Return the unaltered promise\n        return promise;\n    }\n}\n","import {\n    ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output,\n    ViewContainerRef\n} from '@angular/core';\nimport swal, { SweetAlertOptions, SweetAlertArrayOptions } from 'sweetalert2';\nimport { SwalComponent } from './swal.component';\n\n/**\n * [swal] directive. It takes a value that defines the Sweet Alert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n@Directive({\n    selector: '[swal]'\n})\nexport class SwalDirective implements OnInit, OnDestroy {\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    @Input() public set swal(options: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        } else if (Array.isArray(options)) {\n            this.swalOptions = swal.argsToParams(options);\n        } else {\n            this.swalOptions = options;\n        }\n    }\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<any>();\n\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    private swalRef: ComponentRef<SwalComponent>;\n\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    private swalInstance: SwalComponent;\n\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    private swalOptions: SweetAlertOptions;\n\n    public constructor(\n        private readonly viewContainerRef: ViewContainerRef,\n        private readonly resolver: ComponentFactoryResolver) {\n    }\n\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     */\n    public ngOnInit(): void {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).\n     */\n    public ngOnDestroy(): void {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    @HostListener('click', ['$event'])\n    public onHostClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n\n        if (this.swalOptions) {\n            this.swalInstance.options = this.swalOptions;\n        }\n\n        const confirmSub = this.swalInstance.confirm.asObservable().subscribe(v => this.confirm.emit(v));\n        const cancelSub = this.swalInstance.cancel.asObservable().subscribe(v => this.cancel.emit(v));\n\n        this.swalInstance.show().then(unsubscribe);\n\n        function unsubscribe() {\n            confirmSub.unsubscribe();\n            cancelSub.unsubscribe();\n        }\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPartialDirective for info about the covered feature.\n */\n@Component({\n    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalPartialComponent {\n    @Input() public template: TemplateRef<any>;\n}\n","import {\n    ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, Host, Injector, Input, OnDestroy, OnInit,\n    TemplateRef\n} from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalComponent } from './swal.component';\n\n/**\n * A structural directive that lets you use Angular templates inside of Sweet Alerts.\n * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.\n * The default target is the content zone.\n *\n * Usage in your component's TypeScript code-behind (if you use another target than \"content\"):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPartialTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPartial [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPartial=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n@Directive({\n    selector: '[swalPartial]'\n})\nexport class SwalPartialDirective implements OnInit, OnDestroy {\n    /**\n     * Takes a \"partial target\" or nothing (will target main content zone by default).\n     *\n     * See the {@link SwalPartialTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    @Input() public swalPartial: () => HTMLElement;\n\n    /**\n     * Holds the component reference of the controlled SwalPartialComponent to destroy it when no longer needed.\n     */\n    private partialRef: ComponentRef<SwalPartialComponent>;\n\n    private beforeOpenSubscription: Subscription;\n    private closeSubscription: Subscription;\n\n    constructor(\n        private readonly resolver: ComponentFactoryResolver,\n        private readonly injector: Injector,\n        private readonly app: ApplicationRef,\n        private readonly templateRef: TemplateRef<any>,\n        private readonly swalTargets: SwalPartialTargets,\n        @Host() private readonly swalComponent: SwalComponent) {\n    }\n\n    /**\n     * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will\n     * receive the consumer's template.\n     */\n    public ngOnInit(): void {\n        this.beforeOpenSubscription = this.swalComponent.beforeOpen.asObservable().subscribe(() => {\n            //=> Create the SwalPartialComponent on the target DOM node in the Sweet Alert\n            const targetEl = this.swalPartial ? this.swalPartial() : this.swalTargets.content();\n            const factory = this.resolver.resolveComponentFactory(SwalPartialComponent);\n\n            this.partialRef = factory.create(this.injector, [], targetEl);\n\n            //=> Apply the consumer's template on the component\n            this.partialRef.instance.template = this.templateRef;\n\n            //=> Make the Angular app aware of that detached view so change detection works\n            this.app.attachView(this.partialRef.hostView);\n        });\n\n        this.closeSubscription = this.swalComponent.close.asObservable().subscribe(() => {\n            //=> Detach the partial component from the app and destroy it\n            this.app.detachView(this.partialRef.hostView);\n            this.partialRef.destroy();\n        });\n    }\n\n    /**\n     * Unsubscribes from the Sweet Alert appearance/disappearance.\n     */\n    public ngOnDestroy(): void {\n        this.beforeOpenSubscription.unsubscribe();\n        this.closeSubscription.unsubscribe();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\nimport { swalDefaultsProvider } from './di';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalPartialDirective } from './swal-partial.directive';\nimport { SwalComponent } from './swal.component';\nimport { SwalDirective } from './swal.directive';\n\n@NgModule({\n    declarations: [\n        SwalComponent, SwalPartialDirective, SwalPartialComponent,\n        SwalDirective\n    ],\n    providers: [\n        SwalPartialTargets\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        SwalComponent, SwalPartialDirective,\n        SwalDirective\n    ],\n    entryComponents: [\n        SwalComponent, SwalPartialComponent\n    ]\n})\nexport class SweetAlert2Module {\n    public static forRoot(defaultSwalOptions?: SweetAlertOptions): ModuleWithProviders {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [swalDefaultsProvider(defaultSwalOptions)]\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}