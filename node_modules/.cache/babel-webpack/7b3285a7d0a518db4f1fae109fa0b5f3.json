{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CommonModule } from '@angular/common';\nimport { TemplateRef, Directive, ViewContainerRef, Input, NgModule } from '@angular/core';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar NzStringTemplateOutletDirective = /*#__PURE__*/function () {\n  function NzStringTemplateOutletDirective(viewContainer, templateRef) {\n    _classCallCheck(this, NzStringTemplateOutletDirective);\n\n    this.viewContainer = viewContainer;\n    this.templateRef = templateRef;\n    this.embeddedViewRef = null;\n    this.context = new NzStringTemplateOutletContext();\n    this.nzStringTemplateOutletContext = null;\n    this.nzStringTemplateOutlet = null;\n  }\n\n  _createClass(NzStringTemplateOutletDirective, [{\n    key: \"recreateView\",\n    value: function recreateView() {\n      this.viewContainer.clear();\n      var isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n      var templateRef = isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef;\n      this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, isTemplateRef ? this.nzStringTemplateOutletContext : this.context);\n    }\n  }, {\n    key: \"updateContext\",\n    value: function updateContext() {\n      var isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n      var newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;\n      var oldCtx = this.embeddedViewRef.context;\n\n      if (newCtx) {\n        for (var _i = 0, _Object$keys = Object.keys(newCtx); _i < _Object$keys.length; _i++) {\n          var propName = _Object$keys[_i];\n          oldCtx[propName] = newCtx[propName];\n        }\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzStringTemplateOutletContext = changes.nzStringTemplateOutletContext,\n          nzStringTemplateOutlet = changes.nzStringTemplateOutlet;\n\n      var shouldRecreateView = function shouldRecreateView() {\n        var shouldOutletRecreate = false;\n\n        if (nzStringTemplateOutlet) {\n          if (nzStringTemplateOutlet.firstChange) {\n            shouldOutletRecreate = true;\n          } else {\n            var isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n            var isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n            shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n          }\n        }\n\n        var hasContextShapeChanged = function hasContextShapeChanged(ctxChange) {\n          var prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n          var currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n          if (prevCtxKeys.length === currCtxKeys.length) {\n            var _iterator = _createForOfIteratorHelper(currCtxKeys),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var propName = _step.value;\n\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                  return true;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            return false;\n          } else {\n            return true;\n          }\n        };\n\n        var shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n        return shouldContextRecreate || shouldOutletRecreate;\n      };\n\n      if (nzStringTemplateOutlet) {\n        this.context.$implicit = nzStringTemplateOutlet.currentValue;\n      }\n\n      var recreateView = shouldRecreateView();\n\n      if (recreateView) {\n        /** recreate view when context shape or outlet change **/\n        this.recreateView();\n      } else {\n        /** update context **/\n        this.updateContext();\n      }\n    }\n  }], [{\n    key: \"ngTemplateContextGuard\",\n    value: function ngTemplateContextGuard(_dir, _ctx) {\n      return true;\n    }\n  }]);\n\n  return NzStringTemplateOutletDirective;\n}();\n\nNzStringTemplateOutletDirective.ɵfac = function NzStringTemplateOutletDirective_Factory(t) {\n  return new (t || NzStringTemplateOutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nNzStringTemplateOutletDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NzStringTemplateOutletDirective,\n  selectors: [[\"\", \"nzStringTemplateOutlet\", \"\"]],\n  inputs: {\n    nzStringTemplateOutletContext: \"nzStringTemplateOutletContext\",\n    nzStringTemplateOutlet: \"nzStringTemplateOutlet\"\n  },\n  exportAs: [\"nzStringTemplateOutlet\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nNzStringTemplateOutletDirective.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: TemplateRef\n  }];\n};\n\nNzStringTemplateOutletDirective.propDecorators = {\n  nzStringTemplateOutletContext: [{\n    type: Input\n  }],\n  nzStringTemplateOutlet: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzStringTemplateOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzStringTemplateOutlet]',\n      exportAs: 'nzStringTemplateOutlet'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }];\n  }, {\n    nzStringTemplateOutletContext: [{\n      type: Input\n    }],\n    nzStringTemplateOutlet: [{\n      type: Input\n    }]\n  });\n})();\n\nvar NzStringTemplateOutletContext = function NzStringTemplateOutletContext() {\n  _classCallCheck(this, NzStringTemplateOutletContext);\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzOutletModule = function NzOutletModule() {\n  _classCallCheck(this, NzOutletModule);\n};\n\nNzOutletModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzOutletModule\n});\nNzOutletModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzOutletModule_Factory(t) {\n    return new (t || NzOutletModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzOutletModule, {\n    declarations: function declarations() {\n      return [NzStringTemplateOutletDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NzStringTemplateOutletDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzOutletModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [NzStringTemplateOutletDirective],\n      declarations: [NzStringTemplateOutletDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzOutletModule, NzStringTemplateOutletDirective };","map":{"version":3,"sources":["../../components/core/outlet/string_template_outlet.directive.ts","../../components/core/outlet/outlet.module.ts","../../components/core/outlet/public-api.ts","../../components/core/outlet/ng-zorro-antd-core-outlet.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Directive, EmbeddedViewRef, Input, OnChanges, SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\n@Directive({\n  selector: '[nzStringTemplateOutlet]',\n  exportAs: 'nzStringTemplateOutlet'\n})\nexport class NzStringTemplateOutletDirective<_T = unknown> implements OnChanges {\n  private embeddedViewRef: EmbeddedViewRef<NzSafeAny> | null = null;\n  private context = new NzStringTemplateOutletContext();\n  @Input() nzStringTemplateOutletContext: NzSafeAny | null = null;\n  @Input() nzStringTemplateOutlet: NzSafeAny | TemplateRef<NzSafeAny> = null;\n\n  static ngTemplateContextGuard<T>(_dir: NzStringTemplateOutletDirective<T>, _ctx: NzSafeAny): _ctx is NzStringTemplateOutletContext {\n    return true;\n  }\n\n  private recreateView(): void {\n    this.viewContainer.clear();\n    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n    const templateRef = (isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef) as NzSafeAny;\n    this.embeddedViewRef = this.viewContainer.createEmbeddedView(\n      templateRef,\n      isTemplateRef ? this.nzStringTemplateOutletContext : this.context\n    );\n  }\n\n  private updateContext(): void {\n    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n    const newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;\n    const oldCtx = this.embeddedViewRef!.context as NzSafeAny;\n    if (newCtx) {\n      for (const propName of Object.keys(newCtx)) {\n        oldCtx[propName] = newCtx[propName];\n      }\n    }\n  }\n\n  constructor(private viewContainer: ViewContainerRef, private templateRef: TemplateRef<NzSafeAny>) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzStringTemplateOutletContext, nzStringTemplateOutlet } = changes;\n    const shouldRecreateView = (): boolean => {\n      let shouldOutletRecreate = false;\n      if (nzStringTemplateOutlet) {\n        if (nzStringTemplateOutlet.firstChange) {\n          shouldOutletRecreate = true;\n        } else {\n          const isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n          const isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n          shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n        }\n      }\n      const hasContextShapeChanged = (ctxChange: SimpleChange): boolean => {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n        if (prevCtxKeys.length === currCtxKeys.length) {\n          for (const propName of currCtxKeys) {\n            if (prevCtxKeys.indexOf(propName) === -1) {\n              return true;\n            }\n          }\n          return false;\n        } else {\n          return true;\n        }\n      };\n      const shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n      return shouldContextRecreate || shouldOutletRecreate;\n    };\n\n    if (nzStringTemplateOutlet) {\n      this.context.$implicit = nzStringTemplateOutlet.currentValue;\n    }\n\n    const recreateView = shouldRecreateView();\n    if (recreateView) {\n      /** recreate view when context shape or outlet change **/\n      this.recreateView();\n    } else {\n      /** update context **/\n      this.updateContext();\n    }\n  }\n}\n\nexport class NzStringTemplateOutletContext {\n  public $implicit: NzSafeAny;\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzStringTemplateOutletDirective } from './string_template_outlet.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [NzStringTemplateOutletDirective],\n  declarations: [NzStringTemplateOutletDirective]\n})\nexport class NzOutletModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport { NzOutletModule } from './outlet.module';\nexport { NzStringTemplateOutletDirective } from './string_template_outlet.directive';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}