{"ast":null,"code":"import _classCallCheck from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, NgModule } from '@angular/core';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Subject } from 'rxjs';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar NzResizeObserverFactory = /*#__PURE__*/function () {\n  function NzResizeObserverFactory() {\n    _classCallCheck(this, NzResizeObserverFactory);\n  }\n\n  _createClass(NzResizeObserverFactory, [{\n    key: \"create\",\n    value: function create(callback) {\n      return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n    }\n  }]);\n\n  return NzResizeObserverFactory;\n}();\n\nNzResizeObserverFactory.ɵfac = function NzResizeObserverFactory_Factory(t) {\n  return new (t || NzResizeObserverFactory)();\n};\n\nNzResizeObserverFactory.ɵprov = ɵɵdefineInjectable({\n  factory: function NzResizeObserverFactory_Factory() {\n    return new NzResizeObserverFactory();\n  },\n  token: NzResizeObserverFactory,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzResizeObserverFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/** An injectable service that allows watching elements for changes to their content. */\n\n\nvar NzResizeObserver = /*#__PURE__*/function () {\n  function NzResizeObserver(nzResizeObserverFactory) {\n    _classCallCheck(this, NzResizeObserver);\n\n    this.nzResizeObserverFactory = nzResizeObserverFactory;\n    /** Keeps track of the existing ResizeObservers so they can be reused. */\n\n    this.observedElements = new Map();\n  }\n\n  _createClass(NzResizeObserver, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this = this;\n\n      this.observedElements.forEach(function (_, element) {\n        return _this.cleanupObserver(element);\n      });\n    }\n  }, {\n    key: \"observe\",\n    value: function observe(elementOrRef) {\n      var _this2 = this;\n\n      var element = coerceElement(elementOrRef);\n      return new Observable(function (observer) {\n        var stream = _this2.observeElement(element);\n\n        var subscription = stream.subscribe(observer);\n        return function () {\n          subscription.unsubscribe();\n\n          _this2.unobserveElement(element);\n        };\n      });\n    }\n    /**\n     * Observes the given element by using the existing ResizeObserver if available, or creating a\n     * new one if not.\n     */\n\n  }, {\n    key: \"observeElement\",\n    value: function observeElement(element) {\n      if (!this.observedElements.has(element)) {\n        var stream = new Subject();\n        var observer = this.nzResizeObserverFactory.create(function (mutations) {\n          return stream.next(mutations);\n        });\n\n        if (observer) {\n          observer.observe(element);\n        }\n\n        this.observedElements.set(element, {\n          observer: observer,\n          stream: stream,\n          count: 1\n        });\n      } else {\n        this.observedElements.get(element).count++;\n      }\n\n      return this.observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n     * observing this element.\n     */\n\n  }, {\n    key: \"unobserveElement\",\n    value: function unobserveElement(element) {\n      if (this.observedElements.has(element)) {\n        this.observedElements.get(element).count--;\n\n        if (!this.observedElements.get(element).count) {\n          this.cleanupObserver(element);\n        }\n      }\n    }\n    /** Clean up the underlying ResizeObserver for the specified element. */\n\n  }, {\n    key: \"cleanupObserver\",\n    value: function cleanupObserver(element) {\n      if (this.observedElements.has(element)) {\n        var _this$observedElement = this.observedElements.get(element),\n            observer = _this$observedElement.observer,\n            stream = _this$observedElement.stream;\n\n        if (observer) {\n          observer.disconnect();\n        }\n\n        stream.complete();\n        this.observedElements.delete(element);\n      }\n    }\n  }]);\n\n  return NzResizeObserver;\n}();\n\nNzResizeObserver.ɵfac = function NzResizeObserver_Factory(t) {\n  return new (t || NzResizeObserver)(ɵngcc0.ɵɵinject(NzResizeObserverFactory));\n};\n\nNzResizeObserver.ɵprov = ɵɵdefineInjectable({\n  factory: function NzResizeObserver_Factory() {\n    return new NzResizeObserver(ɵɵinject(NzResizeObserverFactory));\n  },\n  token: NzResizeObserver,\n  providedIn: \"root\"\n});\n\nNzResizeObserver.ctorParameters = function () {\n  return [{\n    type: NzResizeObserverFactory\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzResizeObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NzResizeObserverFactory\n    }];\n  }, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzResizeObserversModule = function NzResizeObserversModule() {\n  _classCallCheck(this, NzResizeObserversModule);\n};\n\nNzResizeObserversModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzResizeObserversModule\n});\nNzResizeObserversModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzResizeObserversModule_Factory(t) {\n    return new (t || NzResizeObserversModule)();\n  },\n  providers: [NzResizeObserverFactory]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzResizeObserversModule, [{\n    type: NgModule,\n    args: [{\n      providers: [NzResizeObserverFactory]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzResizeObserver, NzResizeObserversModule, NzResizeObserverFactory as ɵNzResizeObserverFactory };","map":{"version":3,"sources":["../../components/core/resize-observers/resize-observers.service.ts","../../components/core/resize-observers/resize-observers.module.ts","../../components/core/resize-observers/public-api.ts","../../components/core/resize-observers/ng-zorro-antd-core-resize-observers.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { ElementRef, Injectable, OnDestroy } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Observer, Subject } from 'rxjs';\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserverFactory {\n  create(callback: ResizeObserverCallback): ResizeObserver | null {\n    return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n  }\n}\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserver implements OnDestroy {\n  /** Keeps track of the existing ResizeObservers so they can be reused. */\n  private observedElements = new Map<\n    Element,\n    {\n      observer: ResizeObserver | null;\n      stream: Subject<ResizeObserverEntry[]>;\n      count: number;\n    }\n  >();\n\n  constructor(private nzResizeObserverFactory: NzResizeObserverFactory) {}\n\n  ngOnDestroy(): void {\n    this.observedElements.forEach((_, element) => this.cleanupObserver(element));\n  }\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<ResizeObserverEntry[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<ResizeObserverEntry[]>) => {\n      const stream = this.observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this.unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing ResizeObserver if available, or creating a\n   * new one if not.\n   */\n  private observeElement(element: Element): Subject<ResizeObserverEntry[]> {\n    if (!this.observedElements.has(element)) {\n      const stream = new Subject<ResizeObserverEntry[]>();\n      const observer = this.nzResizeObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element);\n      }\n      this.observedElements.set(element, { observer, stream, count: 1 });\n    } else {\n      this.observedElements.get(element)!.count++;\n    }\n    return this.observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n   * observing this element.\n   */\n  private unobserveElement(element: Element): void {\n    if (this.observedElements.has(element)) {\n      this.observedElements.get(element)!.count--;\n      if (!this.observedElements.get(element)!.count) {\n        this.cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying ResizeObserver for the specified element. */\n  private cleanupObserver(element: Element): void {\n    if (this.observedElements.has(element)) {\n      const { observer, stream } = this.observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this.observedElements.delete(element);\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\nimport { NzResizeObserverFactory } from './resize-observers.service';\n\n@NgModule({\n  providers: [NzResizeObserverFactory]\n})\nexport class NzResizeObserversModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport { NzResizeObserversModule } from './resize-observers.module';\nexport { NzResizeObserver, NzResizeObserverFactory as ɵNzResizeObserverFactory } from './resize-observers.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}