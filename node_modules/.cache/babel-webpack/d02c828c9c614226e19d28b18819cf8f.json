{"ast":null,"code":"import _classCallCheck from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CommonModule } from '@angular/common';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Input, NgModule } from '@angular/core';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { __rest, __decorate, __metadata } from 'tslib';\nimport { NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { isNotNil, InputNumber } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ng-zorro-antd/core/config';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from 'ng-zorro-antd/icon';\nimport * as ɵngcc4 from 'ng-zorro-antd/core/outlet';\n\nfunction NzProgressComponent_ng_template_0_span_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"i\", 8);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzType\", ctx_r5.icon);\n  }\n}\n\nfunction NzProgressComponent_ng_template_0_span_0_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var formatter_r9 = ctx.$implicit;\n    var ctx_r8 = ɵngcc0.ɵɵnextContext(4);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", formatter_r9(ctx_r8.nzPercent), \" \");\n  }\n}\n\nvar _c0 = function _c0(a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction NzProgressComponent_ng_template_0_span_0_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, NzProgressComponent_ng_template_0_span_0_ng_template_2_ng_container_0_Template, 2, 1, \"ng-container\", 9);\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r7.formatter)(\"nzStringTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r7.nzPercent));\n  }\n}\n\nfunction NzProgressComponent_ng_template_0_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 5);\n    ɵngcc0.ɵɵtemplate(1, NzProgressComponent_ng_template_0_span_0_ng_container_1_Template, 2, 1, \"ng-container\", 6);\n    ɵngcc0.ɵɵtemplate(2, NzProgressComponent_ng_template_0_span_0_ng_template_2_Template, 1, 4, \"ng-template\", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var _r6 = ɵngcc0.ɵɵreference(3);\n\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", (ctx_r4.status === \"exception\" || ctx_r4.status === \"success\") && !ctx_r4.nzFormat)(\"ngIfElse\", _r6);\n  }\n}\n\nfunction NzProgressComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, NzProgressComponent_ng_template_0_span_0_Template, 4, 2, \"span\", 4);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.nzShowInfo);\n  }\n}\n\nfunction NzProgressComponent_div_3_ng_container_1_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 17);\n  }\n\n  if (rf & 2) {\n    var ctx_r14 = ɵngcc0.ɵɵnextContext(4);\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r14.nzSuccessPercent, \"%\")(\"border-radius\", ctx_r14.nzStrokeLinecap === \"round\" ? \"100px\" : \"0\")(\"height\", ctx_r14.strokeWidth, \"px\");\n  }\n}\n\nfunction NzProgressComponent_div_3_ng_container_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14);\n    ɵngcc0.ɵɵelement(2, \"div\", 15);\n    ɵngcc0.ɵɵtemplate(3, NzProgressComponent_div_3_ng_container_1_div_1_div_3_Template, 1, 6, \"div\", 16);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r12 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r12.nzPercent, \"%\")(\"border-radius\", ctx_r12.nzStrokeLinecap === \"round\" ? \"100px\" : \"0\")(\"background\", !ctx_r12.isGradient ? ctx_r12.nzStrokeColor : null)(\"background-image\", ctx_r12.isGradient ? ctx_r12.lineGradient : null)(\"height\", ctx_r12.strokeWidth, \"px\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r12.nzSuccessPercent || ctx_r12.nzSuccessPercent === 0);\n  }\n}\n\nfunction NzProgressComponent_div_3_ng_container_1_ng_template_2_Template(rf, ctx) {}\n\nfunction NzProgressComponent_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzProgressComponent_div_3_ng_container_1_div_1_Template, 4, 11, \"div\", 11);\n    ɵngcc0.ɵɵtemplate(2, NzProgressComponent_div_3_ng_container_1_ng_template_2_Template, 0, 0, \"ng-template\", 12);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n\n    var _r0 = ɵngcc0.ɵɵreference(1);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r10.isSteps);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r0);\n  }\n}\n\nfunction NzProgressComponent_div_3_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 20);\n  }\n\n  if (rf & 2) {\n    var step_r17 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"ngStyle\", step_r17);\n  }\n}\n\nfunction NzProgressComponent_div_3_div_2_ng_template_2_Template(rf, ctx) {}\n\nfunction NzProgressComponent_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 18);\n    ɵngcc0.ɵɵtemplate(1, NzProgressComponent_div_3_div_2_div_1_Template, 1, 1, \"div\", 19);\n    ɵngcc0.ɵɵtemplate(2, NzProgressComponent_div_3_div_2_ng_template_2_Template, 0, 0, \"ng-template\", 12);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r11 = ɵngcc0.ɵɵnextContext(2);\n\n    var _r0 = ɵngcc0.ɵɵreference(1);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r11.steps);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r0);\n  }\n}\n\nfunction NzProgressComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, NzProgressComponent_div_3_ng_container_1_Template, 3, 2, \"ng-container\", 2);\n    ɵngcc0.ɵɵtemplate(2, NzProgressComponent_div_3_div_2_Template, 3, 2, \"div\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r2.isSteps);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.isSteps);\n  }\n}\n\nfunction NzProgressComponent_div_4__svg_defs_2__svg_stop_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    var i_r23 = ctx.$implicit;\n    ɵngcc0.ɵɵattribute(\"offset\", i_r23.offset)(\"stop-color\", i_r23.color);\n  }\n}\n\nfunction NzProgressComponent_div_4__svg_defs_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelementStart(1, \"linearGradient\", 24);\n    ɵngcc0.ɵɵtemplate(2, NzProgressComponent_div_4__svg_defs_2__svg_stop_2_Template, 1, 2, \"stop\", 25);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r19 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"id\", \"gradient-\" + ctx_r19.gradientId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r19.circleGradient);\n  }\n}\n\nfunction NzProgressComponent_div_4__svg_path_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"path\", 26);\n  }\n\n  if (rf & 2) {\n    var p_r24 = ctx.$implicit;\n    var ctx_r20 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", p_r24.strokePathStyle);\n    ɵngcc0.ɵɵattribute(\"d\", ctx_r20.pathString)(\"stroke-linecap\", ctx_r20.nzStrokeLinecap)(\"stroke\", p_r24.stroke)(\"stroke-width\", ctx_r20.nzPercent ? ctx_r20.strokeWidth : 0);\n  }\n}\n\nfunction NzProgressComponent_div_4_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n  }\n}\n\nfunction NzProgressComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 14);\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 21);\n    ɵngcc0.ɵɵtemplate(2, NzProgressComponent_div_4__svg_defs_2_Template, 3, 2, \"defs\", 2);\n    ɵngcc0.ɵɵelement(3, \"path\", 22);\n    ɵngcc0.ɵɵtemplate(4, NzProgressComponent_div_4__svg_path_4_Template, 1, 5, \"path\", 23);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(5, NzProgressComponent_div_4_ng_template_5_Template, 0, 0, \"ng-template\", 12);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n\n    var _r0 = ɵngcc0.ɵɵreference(1);\n\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r3.nzWidth, \"px\")(\"height\", ctx_r3.nzWidth, \"px\")(\"font-size\", ctx_r3.nzWidth * 0.15 + 6, \"px\");\n    ɵngcc0.ɵɵclassProp(\"ant-progress-circle-gradient\", ctx_r3.isGradient);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.isGradient);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r3.trailPathStyle);\n    ɵngcc0.ɵɵattribute(\"stroke-width\", ctx_r3.strokeWidth)(\"d\", ctx_r3.pathString);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3.progressCirclePath)(\"ngForTrackBy\", ctx_r3.trackByFn);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r0);\n  }\n}\n\nfunction stripPercentToNumber(percent) {\n  return +percent.replace('%', '');\n}\n\nvar sortGradient = function sortGradient(gradients) {\n  var tempArr = [];\n  Object.keys(gradients).forEach(function (key) {\n    var value = gradients[key];\n    var formatKey = stripPercentToNumber(key);\n\n    if (!isNaN(formatKey)) {\n      tempArr.push({\n        key: formatKey,\n        value: value\n      });\n    }\n  });\n  tempArr = tempArr.sort(function (a, b) {\n    return a.key - b.key;\n  });\n  return tempArr;\n};\n\nvar handleCircleGradient = function handleCircleGradient(strokeColor) {\n  return sortGradient(strokeColor).map(function (_ref) {\n    var key = _ref.key,\n        value = _ref.value;\n    return {\n      offset: \"\".concat(key, \"%\"),\n      color: value\n    };\n  });\n};\n\nvar handleLinearGradient = function handleLinearGradient(strokeColor) {\n  var _strokeColor$from = strokeColor.from,\n      from = _strokeColor$from === void 0 ? '#1890ff' : _strokeColor$from,\n      _strokeColor$to = strokeColor.to,\n      to = _strokeColor$to === void 0 ? '#1890ff' : _strokeColor$to,\n      _strokeColor$directio = strokeColor.direction,\n      direction = _strokeColor$directio === void 0 ? 'to right' : _strokeColor$directio,\n      rest = __rest(strokeColor, [\"from\", \"to\", \"direction\"]);\n\n  if (Object.keys(rest).length !== 0) {\n    var sortedGradients = sortGradient(rest).map(function (_ref2) {\n      var key = _ref2.key,\n          value = _ref2.value;\n      return \"\".concat(value, \" \").concat(key, \"%\");\n    }).join(', ');\n    return \"linear-gradient(\".concat(direction, \", \").concat(sortedGradients, \")\");\n  }\n\n  return \"linear-gradient(\".concat(direction, \", \").concat(from, \", \").concat(to, \")\");\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar gradientIdSeed = 0;\nvar NZ_CONFIG_MODULE_NAME = 'progress';\nvar statusIconNameMap = new Map([['success', 'check'], ['exception', 'close']]);\nvar statusColorMap = new Map([['normal', '#108ee9'], ['exception', '#ff5500'], ['success', '#87d068']]);\n\nvar defaultFormatter = function defaultFormatter(p) {\n  return \"\".concat(p, \"%\");\n};\n\nvar ɵ0 = defaultFormatter;\n\nvar NzProgressComponent = /*#__PURE__*/function () {\n  function NzProgressComponent(nzConfigService) {\n    _classCallCheck(this, NzProgressComponent);\n\n    this.nzConfigService = nzConfigService;\n    this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n    this.nzShowInfo = true;\n    this.nzWidth = 132;\n    this.nzStrokeColor = undefined;\n    this.nzSize = 'default';\n    this.nzPercent = 0;\n    this.nzStrokeWidth = undefined;\n    this.nzGapDegree = undefined;\n    this.nzType = 'line';\n    this.nzGapPosition = 'top';\n    this.nzStrokeLinecap = 'round';\n    this.nzSteps = 0;\n    this.steps = [];\n    /** Gradient style when `nzType` is `line`. */\n\n    this.lineGradient = null;\n    /** If user uses gradient color. */\n\n    this.isGradient = false;\n    /** If the linear progress is a step progress. */\n\n    this.isSteps = false;\n    /**\n     * Each progress whose `nzType` is circle or dashboard should have unique id to\n     * define `<linearGradient>`.\n     */\n\n    this.gradientId = gradientIdSeed++;\n    /** Paths to rendered in the template. */\n\n    this.progressCirclePath = [];\n    this.trailPathStyle = null;\n\n    this.trackByFn = function (index) {\n      return \"\".concat(index);\n    };\n\n    this.cachedStatus = 'normal';\n    this.inferredStatus = 'normal';\n    this.destroy$ = new Subject();\n  }\n\n  _createClass(NzProgressComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzSteps = changes.nzSteps,\n          nzGapPosition = changes.nzGapPosition,\n          nzStrokeLinecap = changes.nzStrokeLinecap,\n          nzStrokeColor = changes.nzStrokeColor,\n          nzGapDegree = changes.nzGapDegree,\n          nzType = changes.nzType,\n          nzStatus = changes.nzStatus,\n          nzPercent = changes.nzPercent,\n          nzSuccessPercent = changes.nzSuccessPercent,\n          nzStrokeWidth = changes.nzStrokeWidth;\n\n      if (nzStatus) {\n        this.cachedStatus = this.nzStatus || this.cachedStatus;\n      }\n\n      if (nzPercent || nzSuccessPercent) {\n        var fillAll = parseInt(this.nzPercent.toString(), 10) >= 100;\n\n        if (fillAll) {\n          if (isNotNil(this.nzSuccessPercent) && this.nzSuccessPercent >= 100 || this.nzSuccessPercent === undefined) {\n            this.inferredStatus = 'success';\n          }\n        } else {\n          this.inferredStatus = this.cachedStatus;\n        }\n      }\n\n      if (nzStatus || nzPercent || nzSuccessPercent || nzStrokeColor) {\n        this.updateIcon();\n      }\n\n      if (nzStrokeColor) {\n        this.setStrokeColor();\n      }\n\n      if (nzGapPosition || nzStrokeLinecap || nzGapDegree || nzType || nzPercent || nzStrokeColor || nzStrokeColor) {\n        this.getCirclePaths();\n      }\n\n      if (nzPercent || nzSteps || nzStrokeWidth) {\n        this.isSteps = this.nzSteps > 0;\n\n        if (this.isSteps) {\n          this.getSteps();\n        }\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      this.nzConfigService.getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME).pipe(takeUntil(this.destroy$)).subscribe(function () {\n        _this.updateIcon();\n\n        _this.setStrokeColor();\n\n        _this.getCirclePaths();\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }, {\n    key: \"updateIcon\",\n    value: function updateIcon() {\n      var ret = statusIconNameMap.get(this.status);\n      this.icon = ret ? ret + (this.isCircleStyle ? '-o' : '-circle-fill') : '';\n    }\n    /**\n     * Calculate step render configs.\n     */\n\n  }, {\n    key: \"getSteps\",\n    value: function getSteps() {\n      var current = Math.floor(this.nzSteps * (this.nzPercent / 100));\n      var stepWidth = this.nzSize === 'small' ? 2 : 14;\n      var steps = [];\n\n      for (var i = 0; i < this.nzSteps; i++) {\n        var color = void 0;\n\n        if (i <= current - 1) {\n          color = this.nzStrokeColor;\n        }\n\n        var stepStyle = {\n          backgroundColor: \"\".concat(color),\n          width: \"\".concat(stepWidth, \"px\"),\n          height: \"\".concat(this.strokeWidth, \"px\")\n        };\n        steps.push(stepStyle);\n      }\n\n      this.steps = steps;\n    }\n    /**\n     * Calculate paths when the type is circle or dashboard.\n     */\n\n  }, {\n    key: \"getCirclePaths\",\n    value: function getCirclePaths() {\n      var _this2 = this;\n\n      if (!this.isCircleStyle) {\n        return;\n      }\n\n      var values = isNotNil(this.nzSuccessPercent) ? [this.nzSuccessPercent, this.nzPercent] : [this.nzPercent]; // Calculate shared styles.\n\n      var radius = 50 - this.strokeWidth / 2;\n      var gapPosition = this.nzGapPosition || (this.nzType === 'circle' ? 'top' : 'bottom');\n      var len = Math.PI * 2 * radius;\n      var gapDegree = this.nzGapDegree || (this.nzType === 'circle' ? 0 : 75);\n      var beginPositionX = 0;\n      var beginPositionY = -radius;\n      var endPositionX = 0;\n      var endPositionY = radius * -2;\n\n      switch (gapPosition) {\n        case 'left':\n          beginPositionX = -radius;\n          beginPositionY = 0;\n          endPositionX = radius * 2;\n          endPositionY = 0;\n          break;\n\n        case 'right':\n          beginPositionX = radius;\n          beginPositionY = 0;\n          endPositionX = radius * -2;\n          endPositionY = 0;\n          break;\n\n        case 'bottom':\n          beginPositionY = radius;\n          endPositionY = radius * 2;\n          break;\n\n        default:\n      }\n\n      this.pathString = \"M 50,50 m \".concat(beginPositionX, \",\").concat(beginPositionY, \"\\n       a \").concat(radius, \",\").concat(radius, \" 0 1 1 \").concat(endPositionX, \",\").concat(-endPositionY, \"\\n       a \").concat(radius, \",\").concat(radius, \" 0 1 1 \").concat(-endPositionX, \",\").concat(endPositionY);\n      this.trailPathStyle = {\n        strokeDasharray: \"\".concat(len - gapDegree, \"px \").concat(len, \"px\"),\n        strokeDashoffset: \"-\".concat(gapDegree / 2, \"px\"),\n        transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n      }; // Calculate styles for each path.\n\n      this.progressCirclePath = values.map(function (value, index) {\n        var isSuccessPercent = values.length === 2 && index === 0;\n        return {\n          stroke: _this2.isGradient && !isSuccessPercent ? \"url(#gradient-\".concat(_this2.gradientId, \")\") : null,\n          strokePathStyle: {\n            stroke: !_this2.isGradient ? isSuccessPercent ? statusColorMap.get('success') : _this2.nzStrokeColor : null,\n            transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\n            strokeDasharray: \"\".concat((value || 0) / 100 * (len - gapDegree), \"px \").concat(len, \"px\"),\n            strokeDashoffset: \"-\".concat(gapDegree / 2, \"px\")\n          }\n        };\n      }).reverse();\n    }\n  }, {\n    key: \"setStrokeColor\",\n    value: function setStrokeColor() {\n      var color = this.nzStrokeColor;\n      var isGradient = this.isGradient = !!color && typeof color !== 'string';\n\n      if (isGradient && !this.isCircleStyle) {\n        this.lineGradient = handleLinearGradient(color);\n      } else if (isGradient && this.isCircleStyle) {\n        this.circleGradient = handleCircleGradient(this.nzStrokeColor);\n      } else {\n        this.lineGradient = null;\n        this.circleGradient = [];\n      }\n    }\n  }, {\n    key: \"formatter\",\n    get: function get() {\n      return this.nzFormat || defaultFormatter;\n    }\n  }, {\n    key: \"status\",\n    get: function get() {\n      return this.nzStatus || this.inferredStatus;\n    }\n  }, {\n    key: \"strokeWidth\",\n    get: function get() {\n      return this.nzStrokeWidth || (this.nzType === 'line' && this.nzSize !== 'small' ? 8 : 6);\n    }\n  }, {\n    key: \"isCircleStyle\",\n    get: function get() {\n      return this.nzType === 'circle' || this.nzType === 'dashboard';\n    }\n  }]);\n\n  return NzProgressComponent;\n}();\n\nNzProgressComponent.ɵfac = function NzProgressComponent_Factory(t) {\n  return new (t || NzProgressComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NzConfigService));\n};\n\nNzProgressComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzProgressComponent,\n  selectors: [[\"nz-progress\"]],\n  inputs: {\n    nzShowInfo: \"nzShowInfo\",\n    nzWidth: \"nzWidth\",\n    nzStrokeColor: \"nzStrokeColor\",\n    nzSize: \"nzSize\",\n    nzPercent: \"nzPercent\",\n    nzStrokeWidth: \"nzStrokeWidth\",\n    nzGapDegree: \"nzGapDegree\",\n    nzType: \"nzType\",\n    nzGapPosition: \"nzGapPosition\",\n    nzStrokeLinecap: \"nzStrokeLinecap\",\n    nzSteps: \"nzSteps\",\n    nzFormat: \"nzFormat\",\n    nzSuccessPercent: \"nzSuccessPercent\",\n    nzStatus: \"nzStatus\"\n  },\n  exportAs: [\"nzProgress\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[\"progressInfoTemplate\", \"\"], [3, \"ngClass\"], [4, \"ngIf\"], [\"class\", \"ant-progress-inner\", 3, \"width\", \"height\", \"fontSize\", \"ant-progress-circle-gradient\", 4, \"ngIf\"], [\"class\", \"ant-progress-text\", 4, \"ngIf\"], [1, \"ant-progress-text\"], [4, \"ngIf\", \"ngIfElse\"], [\"formatTemplate\", \"\"], [\"nz-icon\", \"\", 3, \"nzType\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [\"class\", \"ant-progress-steps-outer\", 4, \"ngIf\"], [\"class\", \"ant-progress-outer\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"], [1, \"ant-progress-outer\"], [1, \"ant-progress-inner\"], [1, \"ant-progress-bg\"], [\"class\", \"ant-progress-success-bg\", 3, \"width\", \"border-radius\", \"height\", 4, \"ngIf\"], [1, \"ant-progress-success-bg\"], [1, \"ant-progress-steps-outer\"], [\"class\", \"ant-progress-steps-item\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"ant-progress-steps-item\", 3, \"ngStyle\"], [\"viewBox\", \"0 0 100 100\", 1, \"ant-progress-circle\"], [\"stroke\", \"#f3f3f3\", \"fill-opacity\", \"0\", 1, \"ant-progress-circle-trail\", 3, \"ngStyle\"], [\"class\", \"ant-progress-circle-path\", \"fill-opacity\", \"0\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"x1\", \"100%\", \"y1\", \"0%\", \"x2\", \"0%\", \"y2\", \"0%\", 3, \"id\"], [4, \"ngFor\", \"ngForOf\"], [\"fill-opacity\", \"0\", 1, \"ant-progress-circle-path\", 3, \"ngStyle\"]],\n  template: function NzProgressComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, NzProgressComponent_ng_template_0_Template, 1, 1, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n      ɵngcc0.ɵɵtemplate(3, NzProgressComponent_div_3_Template, 3, 2, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(4, NzProgressComponent_div_4_Template, 6, 15, \"div\", 3);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"ant-progress-line\", ctx.nzType == \"line\")(\"ant-progress-small\", ctx.nzSize == \"small\")(\"ant-progress-show-info\", ctx.nzShowInfo)(\"ant-progress-circle\", ctx.isCircleStyle)(\"ant-progress-steps\", ctx.isSteps);\n      ɵngcc0.ɵɵproperty(\"ngClass\", \"ant-progress ant-progress-status-\" + ctx.status);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzType === \"line\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isCircleStyle);\n    }\n  },\n  directives: [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc3.NzIconDirective, ɵngcc4.NzStringTemplateOutletDirective, ɵngcc2.NgTemplateOutlet, ɵngcc2.NgForOf, ɵngcc2.NgStyle],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nNzProgressComponent.ctorParameters = function () {\n  return [{\n    type: NzConfigService\n  }];\n};\n\nNzProgressComponent.propDecorators = {\n  nzShowInfo: [{\n    type: Input\n  }],\n  nzWidth: [{\n    type: Input\n  }],\n  nzStrokeColor: [{\n    type: Input\n  }],\n  nzSize: [{\n    type: Input\n  }],\n  nzFormat: [{\n    type: Input\n  }],\n  nzSuccessPercent: [{\n    type: Input\n  }],\n  nzPercent: [{\n    type: Input\n  }],\n  nzStrokeWidth: [{\n    type: Input\n  }],\n  nzGapDegree: [{\n    type: Input\n  }],\n  nzStatus: [{\n    type: Input\n  }],\n  nzType: [{\n    type: Input\n  }],\n  nzGapPosition: [{\n    type: Input\n  }],\n  nzStrokeLinecap: [{\n    type: Input\n  }],\n  nzSteps: [{\n    type: Input\n  }]\n};\n\n__decorate([WithConfig(), __metadata(\"design:type\", Boolean)], NzProgressComponent.prototype, \"nzShowInfo\", void 0);\n\n__decorate([WithConfig(), __metadata(\"design:type\", Object)], NzProgressComponent.prototype, \"nzStrokeColor\", void 0);\n\n__decorate([WithConfig(), __metadata(\"design:type\", String)], NzProgressComponent.prototype, \"nzSize\", void 0);\n\n__decorate([InputNumber(), __metadata(\"design:type\", Number)], NzProgressComponent.prototype, \"nzSuccessPercent\", void 0);\n\n__decorate([InputNumber(), __metadata(\"design:type\", Number)], NzProgressComponent.prototype, \"nzPercent\", void 0);\n\n__decorate([WithConfig(), InputNumber(), __metadata(\"design:type\", Number)], NzProgressComponent.prototype, \"nzStrokeWidth\", void 0);\n\n__decorate([WithConfig(), InputNumber(), __metadata(\"design:type\", Number)], NzProgressComponent.prototype, \"nzGapDegree\", void 0);\n\n__decorate([WithConfig(), __metadata(\"design:type\", String)], NzProgressComponent.prototype, \"nzGapPosition\", void 0);\n\n__decorate([WithConfig(), __metadata(\"design:type\", String)], NzProgressComponent.prototype, \"nzStrokeLinecap\", void 0);\n\n__decorate([InputNumber(), __metadata(\"design:type\", Number)], NzProgressComponent.prototype, \"nzSteps\", void 0);\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzProgressComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      selector: 'nz-progress',\n      exportAs: 'nzProgress',\n      preserveWhitespaces: false,\n      template: \"\\n    <ng-template #progressInfoTemplate>\\n      <span class=\\\"ant-progress-text\\\" *ngIf=\\\"nzShowInfo\\\">\\n        <ng-container *ngIf=\\\"(status === 'exception' || status === 'success') && !nzFormat; else formatTemplate\\\">\\n          <i nz-icon [nzType]=\\\"icon\\\"></i>\\n        </ng-container>\\n        <ng-template #formatTemplate>\\n          <ng-container *nzStringTemplateOutlet=\\\"formatter; context: { $implicit: nzPercent }; let formatter\\\">\\n            {{ formatter(nzPercent) }}\\n          </ng-container>\\n        </ng-template>\\n      </span>\\n    </ng-template>\\n\\n    <div\\n      [ngClass]=\\\"'ant-progress ant-progress-status-' + status\\\"\\n      [class.ant-progress-line]=\\\"nzType == 'line'\\\"\\n      [class.ant-progress-small]=\\\"nzSize == 'small'\\\"\\n      [class.ant-progress-show-info]=\\\"nzShowInfo\\\"\\n      [class.ant-progress-circle]=\\\"isCircleStyle\\\"\\n      [class.ant-progress-steps]=\\\"isSteps\\\"\\n    >\\n      <!-- line progress -->\\n      <div *ngIf=\\\"nzType === 'line'\\\">\\n        <!-- normal line style -->\\n        <ng-container *ngIf=\\\"!isSteps\\\">\\n          <div class=\\\"ant-progress-outer\\\" *ngIf=\\\"!isSteps\\\">\\n            <div class=\\\"ant-progress-inner\\\">\\n              <div\\n                class=\\\"ant-progress-bg\\\"\\n                [style.width.%]=\\\"nzPercent\\\"\\n                [style.border-radius]=\\\"nzStrokeLinecap === 'round' ? '100px' : '0'\\\"\\n                [style.background]=\\\"!isGradient ? nzStrokeColor : null\\\"\\n                [style.background-image]=\\\"isGradient ? lineGradient : null\\\"\\n                [style.height.px]=\\\"strokeWidth\\\"\\n              ></div>\\n              <div\\n                *ngIf=\\\"nzSuccessPercent || nzSuccessPercent === 0\\\"\\n                class=\\\"ant-progress-success-bg\\\"\\n                [style.width.%]=\\\"nzSuccessPercent\\\"\\n                [style.border-radius]=\\\"nzStrokeLinecap === 'round' ? '100px' : '0'\\\"\\n                [style.height.px]=\\\"strokeWidth\\\"\\n              ></div>\\n            </div>\\n          </div>\\n          <ng-template [ngTemplateOutlet]=\\\"progressInfoTemplate\\\"></ng-template>\\n        </ng-container>\\n        <!-- step style -->\\n        <div class=\\\"ant-progress-steps-outer\\\" *ngIf=\\\"isSteps\\\">\\n          <div *ngFor=\\\"let step of steps; let i = index\\\" class=\\\"ant-progress-steps-item\\\" [ngStyle]=\\\"step\\\"></div>\\n          <ng-template [ngTemplateOutlet]=\\\"progressInfoTemplate\\\"></ng-template>\\n        </div>\\n      </div>\\n\\n      <!-- circle / dashboard progress -->\\n      <div\\n        [style.width.px]=\\\"this.nzWidth\\\"\\n        [style.height.px]=\\\"this.nzWidth\\\"\\n        [style.fontSize.px]=\\\"this.nzWidth * 0.15 + 6\\\"\\n        class=\\\"ant-progress-inner\\\"\\n        [class.ant-progress-circle-gradient]=\\\"isGradient\\\"\\n        *ngIf=\\\"isCircleStyle\\\"\\n      >\\n        <svg class=\\\"ant-progress-circle \\\" viewBox=\\\"0 0 100 100\\\">\\n          <defs *ngIf=\\\"isGradient\\\">\\n            <linearGradient [id]=\\\"'gradient-' + gradientId\\\" x1=\\\"100%\\\" y1=\\\"0%\\\" x2=\\\"0%\\\" y2=\\\"0%\\\">\\n              <stop *ngFor=\\\"let i of circleGradient\\\" [attr.offset]=\\\"i.offset\\\" [attr.stop-color]=\\\"i.color\\\"></stop>\\n            </linearGradient>\\n          </defs>\\n          <path\\n            class=\\\"ant-progress-circle-trail\\\"\\n            stroke=\\\"#f3f3f3\\\"\\n            fill-opacity=\\\"0\\\"\\n            [attr.stroke-width]=\\\"strokeWidth\\\"\\n            [attr.d]=\\\"pathString\\\"\\n            [ngStyle]=\\\"trailPathStyle\\\"\\n          ></path>\\n          <path\\n            *ngFor=\\\"let p of progressCirclePath; trackBy: trackByFn\\\"\\n            class=\\\"ant-progress-circle-path\\\"\\n            fill-opacity=\\\"0\\\"\\n            [attr.d]=\\\"pathString\\\"\\n            [attr.stroke-linecap]=\\\"nzStrokeLinecap\\\"\\n            [attr.stroke]=\\\"p.stroke\\\"\\n            [attr.stroke-width]=\\\"nzPercent ? strokeWidth : 0\\\"\\n            [ngStyle]=\\\"p.strokePathStyle\\\"\\n          ></path>\\n        </svg>\\n        <ng-template [ngTemplateOutlet]=\\\"progressInfoTemplate\\\"></ng-template>\\n      </div>\\n    </div>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.NzConfigService\n    }];\n  }, {\n    nzShowInfo: [{\n      type: Input\n    }],\n    nzWidth: [{\n      type: Input\n    }],\n    nzStrokeColor: [{\n      type: Input\n    }],\n    nzSize: [{\n      type: Input\n    }],\n    nzPercent: [{\n      type: Input\n    }],\n    nzStrokeWidth: [{\n      type: Input\n    }],\n    nzGapDegree: [{\n      type: Input\n    }],\n    nzType: [{\n      type: Input\n    }],\n    nzGapPosition: [{\n      type: Input\n    }],\n    nzStrokeLinecap: [{\n      type: Input\n    }],\n    nzSteps: [{\n      type: Input\n    }],\n    nzFormat: [{\n      type: Input\n    }],\n    nzSuccessPercent: [{\n      type: Input\n    }],\n    nzStatus: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzProgressModule = function NzProgressModule() {\n  _classCallCheck(this, NzProgressModule);\n};\n\nNzProgressModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzProgressModule\n});\nNzProgressModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzProgressModule_Factory(t) {\n    return new (t || NzProgressModule)();\n  },\n  imports: [[CommonModule, NzIconModule, NzOutletModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzProgressModule, {\n    declarations: function declarations() {\n      return [NzProgressComponent];\n    },\n    imports: function imports() {\n      return [CommonModule, NzIconModule, NzOutletModule];\n    },\n    exports: function exports() {\n      return [NzProgressComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzProgressModule, [{\n    type: NgModule,\n    args: [{\n      exports: [NzProgressComponent],\n      declarations: [NzProgressComponent],\n      imports: [CommonModule, NzIconModule, NzOutletModule]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzProgressComponent, NzProgressModule };","map":{"version":3,"sources":["../../components/progress/utils.ts","../../components/progress/progress.component.ts","../../components/progress/progress.module.ts","../../components/progress/typings.ts","../../components/progress/public-api.ts","../../components/progress/ng-zorro-antd-progress.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzProgressColorGradient, NzProgressGradientProgress } from './typings';\n\nfunction stripPercentToNumber(percent: string): number {\n  return +percent.replace('%', '');\n}\n\nexport const sortGradient = (gradients: NzProgressGradientProgress) => {\n  let tempArr: Array<{ key: number; value: string }> = [];\n\n  Object.keys(gradients).forEach(key => {\n    const value = gradients[key];\n    const formatKey = stripPercentToNumber(key);\n    if (!isNaN(formatKey)) {\n      tempArr.push({\n        key: formatKey,\n        value\n      });\n    }\n  });\n\n  tempArr = tempArr.sort((a, b) => a.key - b.key);\n  return tempArr;\n};\n\nexport const handleCircleGradient = (strokeColor: NzProgressGradientProgress): Array<{ offset: string; color: string }> => {\n  return sortGradient(strokeColor).map(({ key, value }) => ({ offset: `${key}%`, color: value }));\n};\n\nexport const handleLinearGradient = (strokeColor: NzProgressColorGradient) => {\n  const { from = '#1890ff', to = '#1890ff', direction = 'to right', ...rest } = strokeColor;\n  if (Object.keys(rest).length !== 0) {\n    const sortedGradients = sortGradient(rest as NzProgressGradientProgress)\n      .map(({ key, value }) => `${value} ${key}%`)\n      .join(', ');\n    return `linear-gradient(${direction}, ${sortedGradients})`;\n  }\n  return `linear-gradient(${direction}, ${from}, ${to})`;\n};\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { NzConfigKey, NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { NgStyleInterface, NumberInput } from 'ng-zorro-antd/core/types';\nimport { InputNumber, isNotNil } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport {\n  NzProgressCirclePath,\n  NzProgressColorGradient,\n  NzProgressFormatter,\n  NzProgressGapPositionType,\n  NzProgressGradientProgress,\n  NzProgressStatusType,\n  NzProgressStepItem,\n  NzProgressStrokeColorType,\n  NzProgressStrokeLinecapType,\n  NzProgressTypeType\n} from './typings';\nimport { handleCircleGradient, handleLinearGradient } from './utils';\n\nlet gradientIdSeed = 0;\n\nconst NZ_CONFIG_MODULE_NAME: NzConfigKey = 'progress';\nconst statusIconNameMap = new Map([\n  ['success', 'check'],\n  ['exception', 'close']\n]);\nconst statusColorMap = new Map([\n  ['normal', '#108ee9'],\n  ['exception', '#ff5500'],\n  ['success', '#87d068']\n]);\nconst defaultFormatter: NzProgressFormatter = (p: number): string => `${p}%`;\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-progress',\n  exportAs: 'nzProgress',\n  preserveWhitespaces: false,\n  template: `\n    <ng-template #progressInfoTemplate>\n      <span class=\"ant-progress-text\" *ngIf=\"nzShowInfo\">\n        <ng-container *ngIf=\"(status === 'exception' || status === 'success') && !nzFormat; else formatTemplate\">\n          <i nz-icon [nzType]=\"icon\"></i>\n        </ng-container>\n        <ng-template #formatTemplate>\n          <ng-container *nzStringTemplateOutlet=\"formatter; context: { $implicit: nzPercent }; let formatter\">\n            {{ formatter(nzPercent) }}\n          </ng-container>\n        </ng-template>\n      </span>\n    </ng-template>\n\n    <div\n      [ngClass]=\"'ant-progress ant-progress-status-' + status\"\n      [class.ant-progress-line]=\"nzType == 'line'\"\n      [class.ant-progress-small]=\"nzSize == 'small'\"\n      [class.ant-progress-show-info]=\"nzShowInfo\"\n      [class.ant-progress-circle]=\"isCircleStyle\"\n      [class.ant-progress-steps]=\"isSteps\"\n    >\n      <!-- line progress -->\n      <div *ngIf=\"nzType === 'line'\">\n        <!-- normal line style -->\n        <ng-container *ngIf=\"!isSteps\">\n          <div class=\"ant-progress-outer\" *ngIf=\"!isSteps\">\n            <div class=\"ant-progress-inner\">\n              <div\n                class=\"ant-progress-bg\"\n                [style.width.%]=\"nzPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.background]=\"!isGradient ? nzStrokeColor : null\"\n                [style.background-image]=\"isGradient ? lineGradient : null\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n              <div\n                *ngIf=\"nzSuccessPercent || nzSuccessPercent === 0\"\n                class=\"ant-progress-success-bg\"\n                [style.width.%]=\"nzSuccessPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n            </div>\n          </div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </ng-container>\n        <!-- step style -->\n        <div class=\"ant-progress-steps-outer\" *ngIf=\"isSteps\">\n          <div *ngFor=\"let step of steps; let i = index\" class=\"ant-progress-steps-item\" [ngStyle]=\"step\"></div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </div>\n      </div>\n\n      <!-- circle / dashboard progress -->\n      <div\n        [style.width.px]=\"this.nzWidth\"\n        [style.height.px]=\"this.nzWidth\"\n        [style.fontSize.px]=\"this.nzWidth * 0.15 + 6\"\n        class=\"ant-progress-inner\"\n        [class.ant-progress-circle-gradient]=\"isGradient\"\n        *ngIf=\"isCircleStyle\"\n      >\n        <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n          <defs *ngIf=\"isGradient\">\n            <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\n              <stop *ngFor=\"let i of circleGradient\" [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\n            </linearGradient>\n          </defs>\n          <path\n            class=\"ant-progress-circle-trail\"\n            stroke=\"#f3f3f3\"\n            fill-opacity=\"0\"\n            [attr.stroke-width]=\"strokeWidth\"\n            [attr.d]=\"pathString\"\n            [ngStyle]=\"trailPathStyle\"\n          ></path>\n          <path\n            *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\n            class=\"ant-progress-circle-path\"\n            fill-opacity=\"0\"\n            [attr.d]=\"pathString\"\n            [attr.stroke-linecap]=\"nzStrokeLinecap\"\n            [attr.stroke]=\"p.stroke\"\n            [attr.stroke-width]=\"nzPercent ? strokeWidth : 0\"\n            [ngStyle]=\"p.strokePathStyle\"\n          ></path>\n        </svg>\n        <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n      </div>\n    </div>\n  `\n})\nexport class NzProgressComponent implements OnChanges, OnInit, OnDestroy {\n  readonly _nzModuleName: NzConfigKey = NZ_CONFIG_MODULE_NAME;\n\n  static ngAcceptInputType_nzSuccessPercent: NumberInput;\n  static ngAcceptInputType_nzPercent: NumberInput;\n  static ngAcceptInputType_nzStrokeWidth: NumberInput;\n  static ngAcceptInputType_nzGapDegree: NumberInput;\n  static ngAcceptInputType_nzSteps: NumberInput;\n\n  @Input() @WithConfig() nzShowInfo: boolean = true;\n  @Input() nzWidth = 132;\n  @Input() @WithConfig() nzStrokeColor?: NzProgressStrokeColorType = undefined;\n  @Input() @WithConfig() nzSize: 'default' | 'small' = 'default';\n  @Input() nzFormat?: NzProgressFormatter;\n  @Input() @InputNumber() nzSuccessPercent?: number;\n  @Input() @InputNumber() nzPercent: number = 0;\n  @Input() @WithConfig() @InputNumber() nzStrokeWidth?: number = undefined;\n  @Input() @WithConfig() @InputNumber() nzGapDegree?: number = undefined;\n  @Input() nzStatus?: NzProgressStatusType;\n  @Input() nzType: NzProgressTypeType = 'line';\n  @Input() @WithConfig() nzGapPosition: NzProgressGapPositionType = 'top';\n  @Input() @WithConfig() nzStrokeLinecap: NzProgressStrokeLinecapType = 'round';\n\n  @Input() @InputNumber() nzSteps: number = 0;\n\n  steps: NzProgressStepItem[] = [];\n\n  /** Gradient style when `nzType` is `line`. */\n  lineGradient: string | null = null;\n\n  /** If user uses gradient color. */\n  isGradient = false;\n\n  /** If the linear progress is a step progress. */\n  isSteps = false;\n\n  /**\n   * Each progress whose `nzType` is circle or dashboard should have unique id to\n   * define `<linearGradient>`.\n   */\n  gradientId = gradientIdSeed++;\n\n  /** Paths to rendered in the template. */\n  progressCirclePath: NzProgressCirclePath[] = [];\n  circleGradient?: Array<{ offset: string; color: string }>;\n  trailPathStyle: NgStyleInterface | null = null;\n  pathString?: string;\n  icon!: string;\n\n  trackByFn = (index: number) => `${index}`;\n\n  get formatter(): NzProgressFormatter {\n    return this.nzFormat || defaultFormatter;\n  }\n\n  get status(): NzProgressStatusType {\n    return this.nzStatus || this.inferredStatus;\n  }\n\n  get strokeWidth(): number {\n    return this.nzStrokeWidth || (this.nzType === 'line' && this.nzSize !== 'small' ? 8 : 6);\n  }\n\n  get isCircleStyle(): boolean {\n    return this.nzType === 'circle' || this.nzType === 'dashboard';\n  }\n\n  private cachedStatus: NzProgressStatusType = 'normal';\n  private inferredStatus: NzProgressStatusType = 'normal';\n  private destroy$ = new Subject<void>();\n\n  constructor(public nzConfigService: NzConfigService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const {\n      nzSteps,\n      nzGapPosition,\n      nzStrokeLinecap,\n      nzStrokeColor,\n      nzGapDegree,\n      nzType,\n      nzStatus,\n      nzPercent,\n      nzSuccessPercent,\n      nzStrokeWidth\n    } = changes;\n\n    if (nzStatus) {\n      this.cachedStatus = this.nzStatus || this.cachedStatus;\n    }\n\n    if (nzPercent || nzSuccessPercent) {\n      const fillAll = parseInt(this.nzPercent.toString(), 10) >= 100;\n      if (fillAll) {\n        if ((isNotNil(this.nzSuccessPercent) && this.nzSuccessPercent! >= 100) || this.nzSuccessPercent === undefined) {\n          this.inferredStatus = 'success';\n        }\n      } else {\n        this.inferredStatus = this.cachedStatus;\n      }\n    }\n\n    if (nzStatus || nzPercent || nzSuccessPercent || nzStrokeColor) {\n      this.updateIcon();\n    }\n\n    if (nzStrokeColor) {\n      this.setStrokeColor();\n    }\n\n    if (nzGapPosition || nzStrokeLinecap || nzGapDegree || nzType || nzPercent || nzStrokeColor || nzStrokeColor) {\n      this.getCirclePaths();\n    }\n\n    if (nzPercent || nzSteps || nzStrokeWidth) {\n      this.isSteps = this.nzSteps > 0;\n      if (this.isSteps) {\n        this.getSteps();\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.nzConfigService\n      .getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateIcon();\n        this.setStrokeColor();\n        this.getCirclePaths();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private updateIcon(): void {\n    const ret = statusIconNameMap.get(this.status);\n    this.icon = ret ? ret + (this.isCircleStyle ? '-o' : '-circle-fill') : '';\n  }\n\n  /**\n   * Calculate step render configs.\n   */\n  private getSteps(): void {\n    const current = Math.floor(this.nzSteps * (this.nzPercent / 100));\n    const stepWidth = this.nzSize === 'small' ? 2 : 14;\n\n    const steps = [];\n\n    for (let i = 0; i < this.nzSteps; i++) {\n      let color;\n      if (i <= current - 1) {\n        color = this.nzStrokeColor;\n      }\n      const stepStyle = {\n        backgroundColor: `${color}`,\n        width: `${stepWidth}px`,\n        height: `${this.strokeWidth}px`\n      };\n      steps.push(stepStyle);\n    }\n\n    this.steps = steps;\n  }\n\n  /**\n   * Calculate paths when the type is circle or dashboard.\n   */\n  private getCirclePaths(): void {\n    if (!this.isCircleStyle) {\n      return;\n    }\n\n    const values = isNotNil(this.nzSuccessPercent) ? [this.nzSuccessPercent!, this.nzPercent] : [this.nzPercent];\n\n    // Calculate shared styles.\n    const radius = 50 - this.strokeWidth / 2;\n    const gapPosition = this.nzGapPosition || (this.nzType === 'circle' ? 'top' : 'bottom');\n    const len = Math.PI * 2 * radius;\n    const gapDegree = this.nzGapDegree || (this.nzType === 'circle' ? 0 : 75);\n\n    let beginPositionX = 0;\n    let beginPositionY = -radius;\n    let endPositionX = 0;\n    let endPositionY = radius * -2;\n\n    switch (gapPosition) {\n      case 'left':\n        beginPositionX = -radius;\n        beginPositionY = 0;\n        endPositionX = radius * 2;\n        endPositionY = 0;\n        break;\n      case 'right':\n        beginPositionX = radius;\n        beginPositionY = 0;\n        endPositionX = radius * -2;\n        endPositionY = 0;\n        break;\n      case 'bottom':\n        beginPositionY = radius;\n        endPositionY = radius * 2;\n        break;\n      default:\n    }\n\n    this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n\n    this.trailPathStyle = {\n      strokeDasharray: `${len - gapDegree}px ${len}px`,\n      strokeDashoffset: `-${gapDegree / 2}px`,\n      transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n    };\n\n    // Calculate styles for each path.\n    this.progressCirclePath = values\n      .map((value, index) => {\n        const isSuccessPercent = values.length === 2 && index === 0;\n        return {\n          stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\n          strokePathStyle: {\n            stroke: !this.isGradient ? (isSuccessPercent ? statusColorMap.get('success') : (this.nzStrokeColor as string)) : null,\n            transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\n            strokeDasharray: `${((value || 0) / 100) * (len - gapDegree)}px ${len}px`,\n            strokeDashoffset: `-${gapDegree / 2}px`\n          }\n        };\n      })\n      .reverse();\n  }\n\n  private setStrokeColor(): void {\n    const color = this.nzStrokeColor;\n    const isGradient = (this.isGradient = !!color && typeof color !== 'string');\n    if (isGradient && !this.isCircleStyle) {\n      this.lineGradient = handleLinearGradient(color as NzProgressColorGradient);\n    } else if (isGradient && this.isCircleStyle) {\n      this.circleGradient = handleCircleGradient(this.nzStrokeColor as NzProgressGradientProgress);\n    } else {\n      this.lineGradient = null;\n      this.circleGradient = [];\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\n\nimport { NzProgressComponent } from './progress.component';\n\n@NgModule({\n  exports: [NzProgressComponent],\n  declarations: [NzProgressComponent],\n  imports: [CommonModule, NzIconModule, NzOutletModule]\n})\nexport class NzProgressModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { TemplateRef } from '@angular/core';\nimport { NgStyleInterface } from 'ng-zorro-antd/core/types';\n\nexport type NzProgressGapPositionType = 'top' | 'bottom' | 'left' | 'right';\n\nexport type NzProgressStatusType = 'success' | 'exception' | 'active' | 'normal';\n\nexport type NzProgressTypeType = 'line' | 'circle' | 'dashboard';\n\nexport type NzProgressStrokeLinecapType = 'round' | 'square';\n\nexport interface NzProgressGradientProgress {\n  [percent: string]: string;\n}\n\nexport interface NzProgressGradientFromTo {\n  from: string;\n  to: string;\n}\n\nexport type NzProgressColorGradient = { direction?: string } & (NzProgressGradientProgress | NzProgressGradientFromTo);\n\nexport type NzProgressStrokeColorType = string | NzProgressColorGradient;\n\nexport type NzProgressFormatter = ((percent: number) => string) | TemplateRef<{ $implicit: number }>;\n\nexport interface NzProgressCirclePath {\n  stroke: string | null;\n  strokePathStyle: NgStyleInterface;\n}\n\nexport interface NzProgressStepItem {\n  backgroundColor: string;\n  width: string;\n  height: string;\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport { NzProgressModule } from './progress.module';\nexport { NzProgressComponent } from './progress.component';\nexport * from './typings';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}