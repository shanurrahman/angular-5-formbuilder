{"ast":null,"code":"import _inherits from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { Component, ChangeDetectionStrategy, Input, EventEmitter, NgZone, Renderer2, ElementRef, ChangeDetectorRef, Host, Optional, Output, Injectable, SkipSelf, forwardRef, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { NzHighlightModule } from 'ng-zorro-antd/core/highlight';\nimport { NzNoAnimationDirective, NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzTreeBaseService, NzTreeBase, flattenTreeData, NzTreeHigherOrderServiceToken } from 'ng-zorro-antd/core/tree';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'ng-zorro-antd/core/outlet';\nimport * as ɵngcc3 from 'ng-zorro-antd/icon';\nimport * as ɵngcc4 from 'ng-zorro-antd/core/highlight';\nimport * as ɵngcc5 from 'ng-zorro-antd/core/tree';\nimport * as ɵngcc6 from 'ng-zorro-antd/core/no-animation';\nimport * as ɵngcc7 from 'ng-zorro-antd/core/config';\nimport * as ɵngcc8 from '@angular/cdk/scrolling';\n\nfunction NzTreeIndentComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 1);\n  }\n\n  if (rf & 2) {\n    var index_r2 = ctx.index;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r0.unitMapOfClass(index_r2));\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"i\", 4);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"ant-select-tree-switcher-icon\", ctx_r5.nzSelectMode)(\"ant-tree-switcher-icon\", !ctx_r5.nzSelectMode);\n  }\n}\n\nvar _c0 = function _c0(a0, a1) {\n  return {\n    $implicit: a0,\n    origin: a1\n  };\n};\n\nfunction NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template, 2, 4, \"ng-container\", 3);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r4.nzExpandedIcon)(\"nzStringTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r4.context, ctx_r4.context.origin));\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template, 2, 5, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n\n    var _r2 = ɵngcc0.ɵɵreference(3);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.isLoading)(\"ngIfElse\", _r2);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 7);\n  }\n\n  if (rf & 2) {\n    var ctx_r8 = ɵngcc0.ɵɵnextContext(4);\n    ɵngcc0.ɵɵproperty(\"nzType\", ctx_r8.isSwitcherOpen ? \"minus-square\" : \"plus-square\");\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 8);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_1_Template, 1, 1, \"i\", 5);\n    ɵngcc0.ɵɵtemplate(2, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_2_Template, 1, 0, \"i\", 6);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r7.isShowLineIcon);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r7.isShowLineIcon);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template, 3, 2, \"ng-container\", 3);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r6.nzExpandedIcon)(\"nzStringTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r6.context, ctx_r6.context.origin));\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template, 2, 5, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n\n    var _r2 = ɵngcc0.ɵɵreference(3);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r1.isLoading)(\"ngIfElse\", _r2);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 9);\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵproperty(\"nzSpin\", true);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_template_0_Template(rf, ctx) {}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 5);\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"nzType\", ctx_r3.icon);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵelementStart(1, \"span\");\n    ɵngcc0.ɵɵtemplate(2, NzTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template, 1, 1, \"i\", 4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassProp(\"ant-tree-icon__open\", ctx_r2.isSwitcherOpen)(\"ant-tree-icon__close\", ctx_r2.isSwitcherClose)(\"ant-tree-icon_loading\", ctx_r2.isLoading)(\"ant-select-tree-iconEle\", ctx_r2.selectMode)(\"ant-tree-iconEle\", !ctx_r2.selectMode);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"ant-select-tree-iconEle\", ctx_r2.selectMode)(\"ant-select-tree-icon__customize\", ctx_r2.selectMode)(\"ant-tree-iconEle\", !ctx_r2.selectMode)(\"ant-tree-icon__customize\", !ctx_r2.selectMode);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.icon);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeNodeTitleComponent_ng_container_1_span_1_Template, 3, 19, \"span\", 2);\n    ɵngcc0.ɵɵelement(2, \"span\", 3);\n    ɵngcc0.ɵɵpipe(3, \"nzHighlight\");\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.icon && ctx_r1.showIcon);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ɵngcc0.ɵɵpipeBind4(3, 2, ctx_r1.title, ctx_r1.matchedValue, \"i\", \"font-highlight\"), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction NzTreeNodeComponent_nz_tree_node_switcher_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"nz-tree-node-switcher\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function NzTreeNodeComponent_nz_tree_node_switcher_1_Template_nz_tree_node_switcher_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.clickExpand($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"nzShowExpand\", ctx_r0.nzShowExpand)(\"nzShowLine\", ctx_r0.nzShowLine)(\"nzExpandedIcon\", ctx_r0.nzExpandedIcon)(\"nzSelectMode\", ctx_r0.nzSelectMode)(\"context\", ctx_r0.nzTreeNode)(\"isLeaf\", ctx_r0.isLeaf)(\"isExpanded\", ctx_r0.isExpanded)(\"isLoading\", ctx_r0.isLoading);\n  }\n}\n\nfunction NzTreeNodeComponent_nz_tree_node_checkbox_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"nz-tree-node-checkbox\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function NzTreeNodeComponent_nz_tree_node_checkbox_2_Template_nz_tree_node_checkbox_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.clickCheckBox($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"nzSelectMode\", ctx_r1.nzSelectMode)(\"isChecked\", ctx_r1.isChecked)(\"isHalfChecked\", ctx_r1.isHalfChecked)(\"isDisabled\", ctx_r1.isDisabled)(\"isDisableCheckbox\", ctx_r1.isDisableCheckbox);\n  }\n}\n\nvar _c1 = [\"nzTreeTemplate\"];\n\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_ng_template_1_Template(rf, ctx) {}\n\nvar _c2 = function _c2(a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_ng_template_1_Template, 0, 0, \"ng-template\", 8);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var node_r5 = ctx.$implicit;\n    ɵngcc0.ɵɵnextContext(2);\n\n    var _r2 = ɵngcc0.ɵɵreference(7);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c2, node_r5));\n  }\n}\n\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 6);\n    ɵngcc0.ɵɵtemplate(1, NzTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_Template, 2, 4, \"ng-container\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"height\", ctx_r0.nzVirtualHeight);\n    ɵngcc0.ɵɵclassProp(\"ant-select-tree-list-holder-inner\", ctx_r0.nzSelectMode)(\"ant-tree-list-holder-inner\", !ctx_r0.nzSelectMode);\n    ɵngcc0.ɵɵproperty(\"itemSize\", ctx_r0.nzVirtualItemSize)(\"minBufferPx\", ctx_r0.nzVirtualMinBufferPx)(\"maxBufferPx\", ctx_r0.nzVirtualMaxBufferPx);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"cdkVirtualForOf\", ctx_r0.nzFlattenNodes)(\"cdkVirtualForTrackBy\", ctx_r0.trackByFlattenNode);\n  }\n}\n\nfunction NzTreeComponent_div_5_ng_container_1_ng_template_1_Template(rf, ctx) {}\n\nfunction NzTreeComponent_div_5_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeComponent_div_5_ng_container_1_ng_template_1_Template, 0, 0, \"ng-template\", 8);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var node_r8 = ctx.$implicit;\n    ɵngcc0.ɵɵnextContext(2);\n\n    var _r2 = ɵngcc0.ɵɵreference(7);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c2, node_r8));\n  }\n}\n\nfunction NzTreeComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵtemplate(1, NzTreeComponent_div_5_ng_container_1_Template, 2, 4, \"ng-container\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"ant-select-tree-list-holder-inner\", ctx_r1.nzSelectMode)(\"ant-tree-list-holder-inner\", !ctx_r1.nzSelectMode);\n    ɵngcc0.ɵɵproperty(\"@.disabled\", ctx_r1.beforeInit || (ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation))(\"nzNoAnimation\", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation)(\"@treeCollapseMotion\", ctx_r1.nzFlattenNodes.length);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.nzFlattenNodes)(\"ngForTrackBy\", ctx_r1.trackByFlattenNode);\n  }\n}\n\nfunction NzTreeComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"nz-tree-node\", 11);\n    ɵngcc0.ɵɵlistener(\"nzExpandChange\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzExpandChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.eventTriggerChanged($event);\n    })(\"nzClick\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzClick_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.eventTriggerChanged($event);\n    })(\"nzDblClick\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzDblClick_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.eventTriggerChanged($event);\n    })(\"nzContextMenu\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzContextMenu_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.eventTriggerChanged($event);\n    })(\"nzCheckBoxChange\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzCheckBoxChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.eventTriggerChanged($event);\n    })(\"nzOnDragStart\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzOnDragStart_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ctx_r17.eventTriggerChanged($event);\n    })(\"nzOnDragEnter\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzOnDragEnter_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.eventTriggerChanged($event);\n    })(\"nzOnDragOver\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzOnDragOver_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r19 = ɵngcc0.ɵɵnextContext();\n      return ctx_r19.eventTriggerChanged($event);\n    })(\"nzOnDragLeave\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzOnDragLeave_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r20 = ɵngcc0.ɵɵnextContext();\n      return ctx_r20.eventTriggerChanged($event);\n    })(\"nzOnDragEnd\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzOnDragEnd_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.eventTriggerChanged($event);\n    })(\"nzOnDrop\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzOnDrop_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r22 = ɵngcc0.ɵɵnextContext();\n      return ctx_r22.eventTriggerChanged($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var treeNode_r10 = ctx.$implicit;\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"icon\", treeNode_r10.icon)(\"title\", treeNode_r10.title)(\"isLoading\", treeNode_r10.isLoading)(\"isSelected\", treeNode_r10.isSelected)(\"isDisabled\", treeNode_r10.isDisabled)(\"isMatched\", treeNode_r10.isMatched)(\"isExpanded\", treeNode_r10.isExpanded)(\"isLeaf\", treeNode_r10.isLeaf)(\"isStart\", treeNode_r10.isStart)(\"isEnd\", treeNode_r10.isEnd)(\"isChecked\", treeNode_r10.isChecked)(\"isHalfChecked\", treeNode_r10.isHalfChecked)(\"isDisableCheckbox\", treeNode_r10.isDisableCheckbox)(\"isSelectable\", treeNode_r10.isSelectable)(\"canHide\", treeNode_r10.canHide)(\"nzTreeNode\", treeNode_r10)(\"nzSelectMode\", ctx_r3.nzSelectMode)(\"nzShowLine\", ctx_r3.nzShowLine)(\"nzExpandedIcon\", ctx_r3.nzExpandedIcon)(\"nzDraggable\", ctx_r3.nzDraggable)(\"nzCheckable\", ctx_r3.nzCheckable)(\"nzShowExpand\", ctx_r3.nzShowExpand)(\"nzAsyncData\", ctx_r3.nzAsyncData)(\"nzSearchValue\", ctx_r3.nzSearchValue)(\"nzHideUnMatched\", ctx_r3.nzHideUnMatched)(\"nzBeforeDrop\", ctx_r3.nzBeforeDrop)(\"nzShowIcon\", ctx_r3.nzShowIcon)(\"nzTreeTemplate\", ctx_r3.nzTreeTemplate || ctx_r3.nzTreeTemplateChild);\n  }\n}\n\nexport { NzTreeNode } from 'ng-zorro-antd/core/tree';\nimport { __decorate, __metadata } from 'tslib';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport { NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar NzTreeIndentComponent = /*#__PURE__*/function () {\n  function NzTreeIndentComponent() {\n    _classCallCheck(this, NzTreeIndentComponent);\n\n    this.nzSelectMode = false;\n    this.listOfUnit = [];\n  }\n\n  _createClass(NzTreeIndentComponent, [{\n    key: \"unitMapOfClass\",\n    value: function unitMapOfClass(index) {\n      var _ref;\n\n      return _ref = {}, _defineProperty(_ref, \"ant-tree-indent-unit\", !this.nzSelectMode), _defineProperty(_ref, \"ant-tree-indent-unit-start\", !this.nzSelectMode && this.nzIsStart[index + 1]), _defineProperty(_ref, \"ant-tree-indent-unit-end\", !this.nzSelectMode && this.nzIsEnd[index + 1]), _defineProperty(_ref, \"ant-select-tree-indent-unit\", this.nzSelectMode), _defineProperty(_ref, \"ant-select-tree-indent-unit-start\", this.nzSelectMode && this.nzIsStart[index + 1]), _defineProperty(_ref, \"ant-select-tree-indent-unit-end\", this.nzSelectMode && this.nzIsEnd[index + 1]), _ref;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {}\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzTreeLevel = changes.nzTreeLevel;\n\n      if (nzTreeLevel) {\n        this.listOfUnit = _toConsumableArray(new Array(nzTreeLevel.currentValue || 0));\n      }\n    }\n  }]);\n\n  return NzTreeIndentComponent;\n}();\n\nNzTreeIndentComponent.ɵfac = function NzTreeIndentComponent_Factory(t) {\n  return new (t || NzTreeIndentComponent)();\n};\n\nNzTreeIndentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeIndentComponent,\n  selectors: [[\"nz-tree-indent\"]],\n  hostVars: 5,\n  hostBindings: function NzTreeIndentComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-hidden\", true);\n      ɵngcc0.ɵɵclassProp(\"ant-tree-indent\", !ctx.nzSelectMode)(\"ant-select-tree-indent\", ctx.nzSelectMode);\n    }\n  },\n  inputs: {\n    nzSelectMode: \"nzSelectMode\",\n    nzTreeLevel: \"nzTreeLevel\",\n    nzIsStart: \"nzIsStart\",\n    nzIsEnd: \"nzIsEnd\"\n  },\n  exportAs: [\"nzTreeIndent\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"]],\n  template: function NzTreeIndentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, NzTreeIndentComponent_span_0_Template, 1, 1, \"span\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.listOfUnit);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, ɵngcc1.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\nNzTreeIndentComponent.propDecorators = {\n  nzTreeLevel: [{\n    type: Input\n  }],\n  nzIsStart: [{\n    type: Input\n  }],\n  nzIsEnd: [{\n    type: Input\n  }],\n  nzSelectMode: [{\n    type: Input\n  }]\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar NzTreeNodeCheckboxComponent = function NzTreeNodeCheckboxComponent() {\n  _classCallCheck(this, NzTreeNodeCheckboxComponent);\n\n  this.nzSelectMode = false;\n};\n\nNzTreeNodeCheckboxComponent.ɵfac = function NzTreeNodeCheckboxComponent_Factory(t) {\n  return new (t || NzTreeNodeCheckboxComponent)();\n};\n\nNzTreeNodeCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeNodeCheckboxComponent,\n  selectors: [[\"nz-tree-node-checkbox\"]],\n  hostVars: 16,\n  hostBindings: function NzTreeNodeCheckboxComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-select-tree-checkbox\", ctx.nzSelectMode)(\"ant-select-tree-checkbox-checked\", ctx.nzSelectMode && ctx.isChecked)(\"ant-select-tree-checkbox-indeterminate\", ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-select-tree-checkbox-disabled\", ctx.nzSelectMode && (ctx.isDisabled || ctx.isDisableCheckbox))(\"ant-tree-checkbox\", !ctx.nzSelectMode)(\"ant-tree-checkbox-checked\", !ctx.nzSelectMode && ctx.isChecked)(\"ant-tree-checkbox-indeterminate\", !ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-tree-checkbox-disabled\", !ctx.nzSelectMode && (ctx.isDisabled || ctx.isDisableCheckbox));\n    }\n  },\n  inputs: {\n    nzSelectMode: \"nzSelectMode\",\n    isChecked: \"isChecked\",\n    isHalfChecked: \"isHalfChecked\",\n    isDisabled: \"isDisabled\",\n    isDisableCheckbox: \"isDisableCheckbox\"\n  },\n  decls: 1,\n  vars: 4,\n  template: function NzTreeNodeCheckboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"span\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-tree-checkbox-inner\", !ctx.nzSelectMode)(\"ant-select-tree-checkbox-inner\", ctx.nzSelectMode);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\nNzTreeNodeCheckboxComponent.propDecorators = {\n  nzSelectMode: [{\n    type: Input\n  }],\n  isChecked: [{\n    type: Input\n  }],\n  isHalfChecked: [{\n    type: Input\n  }],\n  isDisabled: [{\n    type: Input\n  }],\n  isDisableCheckbox: [{\n    type: Input\n  }]\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar NzTreeNodeSwitcherComponent = /*#__PURE__*/function () {\n  function NzTreeNodeSwitcherComponent() {\n    _classCallCheck(this, NzTreeNodeSwitcherComponent);\n\n    this.nzSelectMode = false;\n  }\n\n  _createClass(NzTreeNodeSwitcherComponent, [{\n    key: \"isShowLineIcon\",\n    get: function get() {\n      return !this.isLeaf && !!this.nzShowLine;\n    }\n  }, {\n    key: \"isShowSwitchIcon\",\n    get: function get() {\n      return !this.isLeaf && !this.nzShowLine;\n    }\n  }, {\n    key: \"isSwitcherOpen\",\n    get: function get() {\n      return !!this.isExpanded && !this.isLeaf;\n    }\n  }, {\n    key: \"isSwitcherClose\",\n    get: function get() {\n      return !this.isExpanded && !this.isLeaf;\n    }\n  }]);\n\n  return NzTreeNodeSwitcherComponent;\n}();\n\nNzTreeNodeSwitcherComponent.ɵfac = function NzTreeNodeSwitcherComponent_Factory(t) {\n  return new (t || NzTreeNodeSwitcherComponent)();\n};\n\nNzTreeNodeSwitcherComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeNodeSwitcherComponent,\n  selectors: [[\"nz-tree-node-switcher\"]],\n  hostVars: 16,\n  hostBindings: function NzTreeNodeSwitcherComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-select-tree-switcher\", ctx.nzSelectMode)(\"ant-select-tree-switcher-noop\", ctx.nzSelectMode && ctx.isLeaf)(\"ant-select-tree-switcher_open\", ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-select-tree-switcher_close\", ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-tree-switcher\", !ctx.nzSelectMode)(\"ant-tree-switcher-noop\", !ctx.nzSelectMode && ctx.isLeaf)(\"ant-tree-switcher_open\", !ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-tree-switcher_close\", !ctx.nzSelectMode && ctx.isSwitcherClose);\n    }\n  },\n  inputs: {\n    nzSelectMode: \"nzSelectMode\",\n    nzShowExpand: \"nzShowExpand\",\n    nzShowLine: \"nzShowLine\",\n    nzExpandedIcon: \"nzExpandedIcon\",\n    context: \"context\",\n    isLeaf: \"isLeaf\",\n    isLoading: \"isLoading\",\n    isExpanded: \"isExpanded\"\n  },\n  decls: 4,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"loadingTemplate\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [\"nz-icon\", \"\", \"nzType\", \"caret-down\"], [\"nz-icon\", \"\", \"class\", \"ant-tree-switcher-line-icon\", 3, \"nzType\", 4, \"ngIf\"], [\"nz-icon\", \"\", \"nzType\", \"file\", \"class\", \"ant-tree-switcher-line-icon\", 4, \"ngIf\"], [\"nz-icon\", \"\", 1, \"ant-tree-switcher-line-icon\", 3, \"nzType\"], [\"nz-icon\", \"\", \"nzType\", \"file\", 1, \"ant-tree-switcher-line-icon\"], [\"nz-icon\", \"\", \"nzType\", \"loading\", 1, \"ant-tree-switcher-loading-icon\", 3, \"nzSpin\"]],\n  template: function NzTreeNodeSwitcherComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, NzTreeNodeSwitcherComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n      ɵngcc0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_Template, 2, 2, \"ng-container\", 0);\n      ɵngcc0.ɵɵtemplate(2, NzTreeNodeSwitcherComponent_ng_template_2_Template, 1, 1, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isShowSwitchIcon);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzShowLine);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc2.NzStringTemplateOutletDirective, ɵngcc3.NzIconDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\nNzTreeNodeSwitcherComponent.propDecorators = {\n  nzShowExpand: [{\n    type: Input\n  }],\n  nzShowLine: [{\n    type: Input\n  }],\n  nzExpandedIcon: [{\n    type: Input\n  }],\n  nzSelectMode: [{\n    type: Input\n  }],\n  context: [{\n    type: Input\n  }],\n  isLeaf: [{\n    type: Input\n  }],\n  isLoading: [{\n    type: Input\n  }],\n  isExpanded: [{\n    type: Input\n  }]\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar NzTreeNodeTitleComponent = /*#__PURE__*/function () {\n  function NzTreeNodeTitleComponent() {\n    _classCallCheck(this, NzTreeNodeTitleComponent);\n\n    this.treeTemplate = null;\n    this.selectMode = false;\n  }\n\n  _createClass(NzTreeNodeTitleComponent, [{\n    key: \"canDraggable\",\n    get: function get() {\n      return this.draggable && !this.isDisabled ? true : null;\n    }\n  }, {\n    key: \"matchedValue\",\n    get: function get() {\n      return this.isMatched ? this.searchValue : '';\n    }\n  }, {\n    key: \"isSwitcherOpen\",\n    get: function get() {\n      return this.isExpanded && !this.isLeaf;\n    }\n  }, {\n    key: \"isSwitcherClose\",\n    get: function get() {\n      return !this.isExpanded && !this.isLeaf;\n    }\n  }]);\n\n  return NzTreeNodeTitleComponent;\n}();\n\nNzTreeNodeTitleComponent.ɵfac = function NzTreeNodeTitleComponent_Factory(t) {\n  return new (t || NzTreeNodeTitleComponent)();\n};\n\nNzTreeNodeTitleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeNodeTitleComponent,\n  selectors: [[\"nz-tree-node-title\"]],\n  hostVars: 21,\n  hostBindings: function NzTreeNodeTitleComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"title\", ctx.title)(\"draggable\", ctx.canDraggable)(\"aria-grabbed\", ctx.canDraggable);\n      ɵngcc0.ɵɵclassProp(\"draggable\", ctx.canDraggable)(\"ant-select-tree-node-content-wrapper\", ctx.selectMode)(\"ant-select-tree-node-content-wrapper-open\", ctx.selectMode && ctx.isSwitcherOpen)(\"ant-select-tree-node-content-wrapper-close\", ctx.selectMode && ctx.isSwitcherClose)(\"ant-select-tree-node-selected\", ctx.selectMode && ctx.isSelected)(\"ant-tree-node-content-wrapper\", !ctx.selectMode)(\"ant-tree-node-content-wrapper-open\", !ctx.selectMode && ctx.isSwitcherOpen)(\"ant-tree-node-content-wrapper-close\", !ctx.selectMode && ctx.isSwitcherClose)(\"ant-tree-node-selected\", !ctx.selectMode && ctx.isSelected);\n    }\n  },\n  inputs: {\n    treeTemplate: \"treeTemplate\",\n    selectMode: \"selectMode\",\n    searchValue: \"searchValue\",\n    draggable: \"draggable\",\n    showIcon: \"showIcon\",\n    context: \"context\",\n    icon: \"icon\",\n    title: \"title\",\n    isLoading: \"isLoading\",\n    isSelected: \"isSelected\",\n    isDisabled: \"isDisabled\",\n    isMatched: \"isMatched\",\n    isExpanded: \"isExpanded\",\n    isLeaf: \"isLeaf\"\n  },\n  decls: 2,\n  vars: 6,\n  consts: [[3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [3, \"ant-tree-icon__open\", \"ant-tree-icon__close\", \"ant-tree-icon_loading\", \"ant-select-tree-iconEle\", \"ant-tree-iconEle\", 4, \"ngIf\"], [1, \"ant-tree-title\", 3, \"innerHTML\"], [\"nz-icon\", \"\", 3, \"nzType\", 4, \"ngIf\"], [\"nz-icon\", \"\", 3, \"nzType\"]],\n  template: function NzTreeNodeTitleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, NzTreeNodeTitleComponent_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      ɵngcc0.ɵɵtemplate(1, NzTreeNodeTitleComponent_ng_container_1_Template, 4, 7, \"ng-container\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.treeTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(3, _c0, ctx.context, ctx.context.origin));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.treeTemplate);\n    }\n  },\n  directives: [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgIf, ɵngcc3.NzIconDirective],\n  pipes: [ɵngcc4.NzHighlightPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\nNzTreeNodeTitleComponent.propDecorators = {\n  searchValue: [{\n    type: Input\n  }],\n  treeTemplate: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input\n  }],\n  showIcon: [{\n    type: Input\n  }],\n  selectMode: [{\n    type: Input\n  }],\n  context: [{\n    type: Input\n  }],\n  icon: [{\n    type: Input\n  }],\n  title: [{\n    type: Input\n  }],\n  isLoading: [{\n    type: Input\n  }],\n  isSelected: [{\n    type: Input\n  }],\n  isDisabled: [{\n    type: Input\n  }],\n  isMatched: [{\n    type: Input\n  }],\n  isExpanded: [{\n    type: Input\n  }],\n  isLeaf: [{\n    type: Input\n  }]\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar NzTreeNodeComponent = /*#__PURE__*/function () {\n  function NzTreeNodeComponent(nzTreeService, ngZone, renderer, elementRef, cdr, noAnimation) {\n    _classCallCheck(this, NzTreeNodeComponent);\n\n    this.nzTreeService = nzTreeService;\n    this.ngZone = ngZone;\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.cdr = cdr;\n    this.noAnimation = noAnimation;\n    /**\n     * for global property\n     */\n\n    this.icon = '';\n    this.title = '';\n    this.isLoading = false;\n    this.isSelected = false;\n    this.isDisabled = false;\n    this.isMatched = false;\n    this.nzHideUnMatched = false;\n    this.nzNoAnimation = false;\n    this.nzSelectMode = false;\n    this.nzShowIcon = false;\n    this.nzTreeTemplate = null;\n    this.nzSearchValue = '';\n    this.nzDraggable = false;\n    this.nzClick = new EventEmitter();\n    this.nzDblClick = new EventEmitter();\n    this.nzContextMenu = new EventEmitter();\n    this.nzCheckBoxChange = new EventEmitter();\n    this.nzExpandChange = new EventEmitter();\n    this.nzOnDragStart = new EventEmitter();\n    this.nzOnDragEnter = new EventEmitter();\n    this.nzOnDragOver = new EventEmitter();\n    this.nzOnDragLeave = new EventEmitter();\n    this.nzOnDrop = new EventEmitter();\n    this.nzOnDragEnd = new EventEmitter();\n    /**\n     * drag var\n     */\n\n    this.destroy$ = new Subject();\n    this.dragPos = 2;\n    this.dragPosClass = {\n      '0': 'drag-over',\n      '1': 'drag-over-gap-bottom',\n      '-1': 'drag-over-gap-top'\n    };\n  }\n  /**\n   * default set\n   */\n\n\n  _createClass(NzTreeNodeComponent, [{\n    key: \"onMousedown\",\n    value: function onMousedown(event) {\n      if (this.nzSelectMode) {\n        event.preventDefault();\n      }\n    }\n    /**\n     * collapse node\n     * @param event\n     */\n\n  }, {\n    key: \"clickExpand\",\n    value: function clickExpand(event) {\n      event.preventDefault();\n\n      if (!this.isLoading && !this.isLeaf) {\n        // set async state\n        if (this.nzAsyncData && this.nzTreeNode.children.length === 0 && !this.isExpanded) {\n          this.nzTreeNode.isLoading = true;\n        }\n\n        this.nzTreeNode.setExpanded(!this.isExpanded);\n      }\n\n      this.nzTreeService.setExpandedNodeList(this.nzTreeNode);\n      var eventNext = this.nzTreeService.formatEvent('expand', this.nzTreeNode, event);\n      this.nzExpandChange.emit(eventNext);\n    }\n  }, {\n    key: \"clickSelect\",\n    value: function clickSelect(event) {\n      event.preventDefault();\n\n      if (this.isSelectable && !this.isDisabled) {\n        this.nzTreeNode.isSelected = !this.nzTreeNode.isSelected;\n      }\n\n      this.nzTreeService.setSelectedNodeList(this.nzTreeNode);\n      var eventNext = this.nzTreeService.formatEvent('click', this.nzTreeNode, event);\n      this.nzClick.emit(eventNext);\n    }\n  }, {\n    key: \"dblClick\",\n    value: function dblClick(event) {\n      event.preventDefault();\n      var eventNext = this.nzTreeService.formatEvent('dblclick', this.nzTreeNode, event);\n      this.nzDblClick.emit(eventNext);\n    }\n  }, {\n    key: \"contextMenu\",\n    value: function contextMenu(event) {\n      event.preventDefault();\n      var eventNext = this.nzTreeService.formatEvent('contextmenu', this.nzTreeNode, event);\n      this.nzContextMenu.emit(eventNext);\n    }\n    /**\n     * check node\n     * @param event\n     */\n\n  }, {\n    key: \"clickCheckBox\",\n    value: function clickCheckBox(event) {\n      event.preventDefault(); // return if node is disabled\n\n      if (this.isDisabled || this.isDisableCheckbox) {\n        return;\n      }\n\n      this.nzTreeNode.isChecked = !this.nzTreeNode.isChecked;\n      this.nzTreeNode.isHalfChecked = false;\n      this.nzTreeService.setCheckedNodeList(this.nzTreeNode);\n      var eventNext = this.nzTreeService.formatEvent('check', this.nzTreeNode, event);\n      this.nzCheckBoxChange.emit(eventNext);\n    }\n  }, {\n    key: \"clearDragClass\",\n    value: function clearDragClass() {\n      var _this = this;\n\n      var dragClass = ['drag-over-gap-top', 'drag-over-gap-bottom', 'drag-over'];\n      dragClass.forEach(function (e) {\n        _this.renderer.removeClass(_this.elementRef.nativeElement, e);\n      });\n    }\n    /**\n     * drag event\n     * @param e\n     */\n\n  }, {\n    key: \"handleDragStart\",\n    value: function handleDragStart(e) {\n      try {\n        // ie throw error\n        // firefox-need-it\n        e.dataTransfer.setData('text/plain', this.nzTreeNode.key);\n      } catch (error) {// empty\n      }\n\n      this.nzTreeService.setSelectedNode(this.nzTreeNode);\n      var eventNext = this.nzTreeService.formatEvent('dragstart', this.nzTreeNode, e);\n      this.nzOnDragStart.emit(eventNext);\n    }\n  }, {\n    key: \"handleDragEnter\",\n    value: function handleDragEnter(e) {\n      var _this2 = this;\n\n      e.preventDefault(); // reset position\n\n      this.dragPos = 2;\n      this.ngZone.run(function () {\n        var eventNext = _this2.nzTreeService.formatEvent('dragenter', _this2.nzTreeNode, e);\n\n        _this2.nzOnDragEnter.emit(eventNext);\n      });\n    }\n  }, {\n    key: \"handleDragOver\",\n    value: function handleDragOver(e) {\n      e.preventDefault();\n      var dropPosition = this.nzTreeService.calcDropPosition(e);\n\n      if (this.dragPos !== dropPosition) {\n        this.clearDragClass();\n        this.dragPos = dropPosition; // leaf node will pass\n\n        if (!(this.dragPos === 0 && this.isLeaf)) {\n          this.renderer.addClass(this.elementRef.nativeElement, this.dragPosClass[this.dragPos]);\n        }\n      }\n\n      var eventNext = this.nzTreeService.formatEvent('dragover', this.nzTreeNode, e);\n      this.nzOnDragOver.emit(eventNext);\n    }\n  }, {\n    key: \"handleDragLeave\",\n    value: function handleDragLeave(e) {\n      e.preventDefault();\n      this.clearDragClass();\n      var eventNext = this.nzTreeService.formatEvent('dragleave', this.nzTreeNode, e);\n      this.nzOnDragLeave.emit(eventNext);\n    }\n  }, {\n    key: \"handleDragDrop\",\n    value: function handleDragDrop(e) {\n      var _this3 = this;\n\n      this.ngZone.run(function () {\n        _this3.clearDragClass();\n\n        var node = _this3.nzTreeService.getSelectedNode();\n\n        if (!node || node && node.key === _this3.nzTreeNode.key || _this3.dragPos === 0 && _this3.isLeaf) {\n          return;\n        } // pass if node is leafNo\n\n\n        var dropEvent = _this3.nzTreeService.formatEvent('drop', _this3.nzTreeNode, e);\n\n        var dragEndEvent = _this3.nzTreeService.formatEvent('dragend', _this3.nzTreeNode, e);\n\n        if (_this3.nzBeforeDrop) {\n          _this3.nzBeforeDrop({\n            dragNode: _this3.nzTreeService.getSelectedNode(),\n            node: _this3.nzTreeNode,\n            pos: _this3.dragPos\n          }).subscribe(function (canDrop) {\n            if (canDrop) {\n              _this3.nzTreeService.dropAndApply(_this3.nzTreeNode, _this3.dragPos);\n            }\n\n            _this3.nzOnDrop.emit(dropEvent);\n\n            _this3.nzOnDragEnd.emit(dragEndEvent);\n          });\n        } else if (_this3.nzTreeNode) {\n          _this3.nzTreeService.dropAndApply(_this3.nzTreeNode, _this3.dragPos);\n\n          _this3.nzOnDrop.emit(dropEvent);\n        }\n      });\n    }\n  }, {\n    key: \"handleDragEnd\",\n    value: function handleDragEnd(e) {\n      var _this4 = this;\n\n      e.preventDefault();\n      this.ngZone.run(function () {\n        // if user do not custom beforeDrop\n        if (!_this4.nzBeforeDrop) {\n          var eventNext = _this4.nzTreeService.formatEvent('dragend', _this4.nzTreeNode, e);\n\n          _this4.nzOnDragEnd.emit(eventNext);\n        }\n      });\n    }\n    /**\n     * Listening to dragging events.\n     */\n\n  }, {\n    key: \"handDragEvent\",\n    value: function handDragEvent() {\n      var _this5 = this;\n\n      this.ngZone.runOutsideAngular(function () {\n        if (_this5.nzDraggable) {\n          var nativeElement = _this5.elementRef.nativeElement;\n          _this5.destroy$ = new Subject();\n          fromEvent(nativeElement, 'dragstart').pipe(takeUntil(_this5.destroy$)).subscribe(function (e) {\n            return _this5.handleDragStart(e);\n          });\n          fromEvent(nativeElement, 'dragenter').pipe(takeUntil(_this5.destroy$)).subscribe(function (e) {\n            return _this5.handleDragEnter(e);\n          });\n          fromEvent(nativeElement, 'dragover').pipe(takeUntil(_this5.destroy$)).subscribe(function (e) {\n            return _this5.handleDragOver(e);\n          });\n          fromEvent(nativeElement, 'dragleave').pipe(takeUntil(_this5.destroy$)).subscribe(function (e) {\n            return _this5.handleDragLeave(e);\n          });\n          fromEvent(nativeElement, 'drop').pipe(takeUntil(_this5.destroy$)).subscribe(function (e) {\n            return _this5.handleDragDrop(e);\n          });\n          fromEvent(nativeElement, 'dragend').pipe(takeUntil(_this5.destroy$)).subscribe(function (e) {\n            return _this5.handleDragEnd(e);\n          });\n        } else {\n          _this5.destroy$.next();\n\n          _this5.destroy$.complete();\n        }\n      });\n    }\n  }, {\n    key: \"markForCheck\",\n    value: function markForCheck() {\n      this.cdr.markForCheck();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.nzTreeNode.component = this;\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzDraggable = changes.nzDraggable;\n\n      if (nzDraggable) {\n        this.handDragEvent();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }, {\n    key: \"displayStyle\",\n    get: function get() {\n      // to hide unmatched nodes\n      return this.nzSearchValue && this.nzHideUnMatched && !this.isMatched && !this.isExpanded && this.canHide ? 'none' : '';\n    }\n  }, {\n    key: \"isSwitcherOpen\",\n    get: function get() {\n      return this.isExpanded && !this.isLeaf;\n    }\n  }, {\n    key: \"isSwitcherClose\",\n    get: function get() {\n      return !this.isExpanded && !this.isLeaf;\n    }\n  }]);\n\n  return NzTreeNodeComponent;\n}();\n\nNzTreeNodeComponent.ɵfac = function NzTreeNodeComponent_Factory(t) {\n  return new (t || NzTreeNodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.NzTreeBaseService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.NzNoAnimationDirective, 9));\n};\n\nNzTreeNodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeNodeComponent,\n  selectors: [[\"nz-tree-node\"]],\n  hostVars: 34,\n  hostBindings: function NzTreeNodeComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"mousedown\", function NzTreeNodeComponent_mousedown_HostBindingHandler($event) {\n        return ctx.onMousedown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n      ɵngcc0.ɵɵclassProp(\"ant-select-tree-treenode\", ctx.nzSelectMode)(\"ant-select-tree-treenode-disabled\", ctx.nzSelectMode && ctx.isDisabled)(\"ant-select-tree-treenode-switcher-open\", ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-select-tree-treenode-switcher-close\", ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-select-tree-treenode-checkbox-checked\", ctx.nzSelectMode && ctx.isChecked)(\"ant-select-tree-treenode-checkbox-indeterminate\", ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-select-tree-treenode-selected\", ctx.nzSelectMode && ctx.isSelected)(\"ant-select-tree-treenode-loading\", ctx.nzSelectMode && ctx.isLoading)(\"ant-tree-treenode\", !ctx.nzSelectMode)(\"ant-tree-treenode-disabled\", !ctx.nzSelectMode && ctx.isDisabled)(\"ant-tree-treenode-switcher-open\", !ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-tree-treenode-switcher-close\", !ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-tree-treenode-checkbox-checked\", !ctx.nzSelectMode && ctx.isChecked)(\"ant-tree-treenode-checkbox-indeterminate\", !ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-tree-treenode-selected\", !ctx.nzSelectMode && ctx.isSelected)(\"ant-tree-treenode-loading\", !ctx.nzSelectMode && ctx.isLoading);\n    }\n  },\n  inputs: {\n    icon: \"icon\",\n    title: \"title\",\n    isLoading: \"isLoading\",\n    isSelected: \"isSelected\",\n    isDisabled: \"isDisabled\",\n    isMatched: \"isMatched\",\n    nzHideUnMatched: \"nzHideUnMatched\",\n    nzNoAnimation: \"nzNoAnimation\",\n    nzSelectMode: \"nzSelectMode\",\n    nzShowIcon: \"nzShowIcon\",\n    nzTreeTemplate: \"nzTreeTemplate\",\n    nzSearchValue: \"nzSearchValue\",\n    nzDraggable: \"nzDraggable\",\n    isExpanded: \"isExpanded\",\n    isLeaf: \"isLeaf\",\n    isChecked: \"isChecked\",\n    isHalfChecked: \"isHalfChecked\",\n    isDisableCheckbox: \"isDisableCheckbox\",\n    isSelectable: \"isSelectable\",\n    canHide: \"canHide\",\n    isStart: \"isStart\",\n    isEnd: \"isEnd\",\n    nzTreeNode: \"nzTreeNode\",\n    nzShowLine: \"nzShowLine\",\n    nzShowExpand: \"nzShowExpand\",\n    nzCheckable: \"nzCheckable\",\n    nzAsyncData: \"nzAsyncData\",\n    nzExpandedIcon: \"nzExpandedIcon\",\n    nzBeforeDrop: \"nzBeforeDrop\"\n  },\n  outputs: {\n    nzClick: \"nzClick\",\n    nzDblClick: \"nzDblClick\",\n    nzContextMenu: \"nzContextMenu\",\n    nzCheckBoxChange: \"nzCheckBoxChange\",\n    nzExpandChange: \"nzExpandChange\",\n    nzOnDragStart: \"nzOnDragStart\",\n    nzOnDragEnter: \"nzOnDragEnter\",\n    nzOnDragOver: \"nzOnDragOver\",\n    nzOnDragLeave: \"nzOnDragLeave\",\n    nzOnDrop: \"nzOnDrop\",\n    nzOnDragEnd: \"nzOnDragEnd\"\n  },\n  exportAs: [\"nzTreeNode\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 4,\n  vars: 20,\n  consts: [[3, \"nzTreeLevel\", \"nzSelectMode\", \"nzIsStart\", \"nzIsEnd\"], [3, \"nzShowExpand\", \"nzShowLine\", \"nzExpandedIcon\", \"nzSelectMode\", \"context\", \"isLeaf\", \"isExpanded\", \"isLoading\", \"click\", 4, \"ngIf\"], [3, \"nzSelectMode\", \"isChecked\", \"isHalfChecked\", \"isDisabled\", \"isDisableCheckbox\", \"click\", 4, \"ngIf\"], [3, \"icon\", \"title\", \"isLoading\", \"isSelected\", \"isDisabled\", \"isMatched\", \"isExpanded\", \"isLeaf\", \"searchValue\", \"treeTemplate\", \"draggable\", \"showIcon\", \"selectMode\", \"context\", \"dblclick\", \"click\", \"contextmenu\"], [3, \"nzShowExpand\", \"nzShowLine\", \"nzExpandedIcon\", \"nzSelectMode\", \"context\", \"isLeaf\", \"isExpanded\", \"isLoading\", \"click\"], [3, \"nzSelectMode\", \"isChecked\", \"isHalfChecked\", \"isDisabled\", \"isDisableCheckbox\", \"click\"]],\n  template: function NzTreeNodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"nz-tree-indent\", 0);\n      ɵngcc0.ɵɵtemplate(1, NzTreeNodeComponent_nz_tree_node_switcher_1_Template, 1, 8, \"nz-tree-node-switcher\", 1);\n      ɵngcc0.ɵɵtemplate(2, NzTreeNodeComponent_nz_tree_node_checkbox_2_Template, 1, 5, \"nz-tree-node-checkbox\", 2);\n      ɵngcc0.ɵɵelementStart(3, \"nz-tree-node-title\", 3);\n      ɵngcc0.ɵɵlistener(\"dblclick\", function NzTreeNodeComponent_Template_nz_tree_node_title_dblclick_3_listener($event) {\n        return ctx.dblClick($event);\n      })(\"click\", function NzTreeNodeComponent_Template_nz_tree_node_title_click_3_listener($event) {\n        return ctx.clickSelect($event);\n      })(\"contextmenu\", function NzTreeNodeComponent_Template_nz_tree_node_title_contextmenu_3_listener($event) {\n        return ctx.contextMenu($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"nzTreeLevel\", ctx.nzTreeNode.level)(\"nzSelectMode\", ctx.nzSelectMode)(\"nzIsStart\", ctx.isStart)(\"nzIsEnd\", ctx.isEnd);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzShowExpand);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzCheckable);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"icon\", ctx.icon)(\"title\", ctx.title)(\"isLoading\", ctx.isLoading)(\"isSelected\", ctx.isSelected)(\"isDisabled\", ctx.isDisabled)(\"isMatched\", ctx.isMatched)(\"isExpanded\", ctx.isExpanded)(\"isLeaf\", ctx.isLeaf)(\"searchValue\", ctx.nzSearchValue)(\"treeTemplate\", ctx.nzTreeTemplate)(\"draggable\", ctx.nzDraggable)(\"showIcon\", ctx.nzShowIcon)(\"selectMode\", ctx.nzSelectMode)(\"context\", ctx.nzTreeNode);\n    }\n  },\n  directives: [NzTreeIndentComponent, ɵngcc1.NgIf, NzTreeNodeTitleComponent, NzTreeNodeSwitcherComponent, NzTreeNodeCheckboxComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nNzTreeNodeComponent.ctorParameters = function () {\n  return [{\n    type: NzTreeBaseService\n  }, {\n    type: NgZone\n  }, {\n    type: Renderer2\n  }, {\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NzNoAnimationDirective,\n    decorators: [{\n      type: Host\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nNzTreeNodeComponent.propDecorators = {\n  icon: [{\n    type: Input\n  }],\n  title: [{\n    type: Input\n  }],\n  isLoading: [{\n    type: Input\n  }],\n  isSelected: [{\n    type: Input\n  }],\n  isDisabled: [{\n    type: Input\n  }],\n  isMatched: [{\n    type: Input\n  }],\n  isExpanded: [{\n    type: Input\n  }],\n  isLeaf: [{\n    type: Input\n  }],\n  isChecked: [{\n    type: Input\n  }],\n  isHalfChecked: [{\n    type: Input\n  }],\n  isDisableCheckbox: [{\n    type: Input\n  }],\n  isSelectable: [{\n    type: Input\n  }],\n  canHide: [{\n    type: Input\n  }],\n  isStart: [{\n    type: Input\n  }],\n  isEnd: [{\n    type: Input\n  }],\n  nzTreeNode: [{\n    type: Input\n  }],\n  nzShowLine: [{\n    type: Input\n  }],\n  nzShowExpand: [{\n    type: Input\n  }],\n  nzCheckable: [{\n    type: Input\n  }],\n  nzAsyncData: [{\n    type: Input\n  }],\n  nzHideUnMatched: [{\n    type: Input\n  }],\n  nzNoAnimation: [{\n    type: Input\n  }],\n  nzSelectMode: [{\n    type: Input\n  }],\n  nzShowIcon: [{\n    type: Input\n  }],\n  nzExpandedIcon: [{\n    type: Input\n  }],\n  nzTreeTemplate: [{\n    type: Input\n  }],\n  nzBeforeDrop: [{\n    type: Input\n  }],\n  nzSearchValue: [{\n    type: Input\n  }],\n  nzDraggable: [{\n    type: Input\n  }],\n  nzClick: [{\n    type: Output\n  }],\n  nzDblClick: [{\n    type: Output\n  }],\n  nzContextMenu: [{\n    type: Output\n  }],\n  nzCheckBoxChange: [{\n    type: Output\n  }],\n  nzExpandChange: [{\n    type: Output\n  }],\n  nzOnDragStart: [{\n    type: Output\n  }],\n  nzOnDragEnter: [{\n    type: Output\n  }],\n  nzOnDragOver: [{\n    type: Output\n  }],\n  nzOnDragLeave: [{\n    type: Output\n  }],\n  nzOnDrop: [{\n    type: Output\n  }],\n  nzOnDragEnd: [{\n    type: Output\n  }]\n};\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Boolean)], NzTreeNodeComponent.prototype, \"nzShowLine\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Boolean)], NzTreeNodeComponent.prototype, \"nzShowExpand\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Boolean)], NzTreeNodeComponent.prototype, \"nzCheckable\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Boolean)], NzTreeNodeComponent.prototype, \"nzAsyncData\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeNodeComponent.prototype, \"nzHideUnMatched\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeNodeComponent.prototype, \"nzNoAnimation\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeNodeComponent.prototype, \"nzSelectMode\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeNodeComponent.prototype, \"nzShowIcon\", void 0);\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeService = /*#__PURE__*/function (_NzTreeBaseService) {\n  _inherits(NzTreeService, _NzTreeBaseService);\n\n  var _super = _createSuper(NzTreeService);\n\n  function NzTreeService() {\n    _classCallCheck(this, NzTreeService);\n\n    return _super.call(this);\n  }\n\n  return NzTreeService;\n}(NzTreeBaseService);\n\nNzTreeService.ɵfac = function NzTreeService_Factory(t) {\n  return new (t || NzTreeService)();\n};\n\nNzTreeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NzTreeService,\n  factory: NzTreeService.ɵfac\n});\n\nNzTreeService.ctorParameters = function () {\n  return [];\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction NzTreeServiceFactory(higherOrderService, treeService) {\n  return higherOrderService ? higherOrderService : treeService;\n}\n\nvar NZ_CONFIG_MODULE_NAME = 'tree';\n\nvar NzTreeComponent = /*#__PURE__*/function (_NzTreeBase) {\n  _inherits(NzTreeComponent, _NzTreeBase);\n\n  var _super2 = _createSuper(NzTreeComponent);\n\n  // Handle emit event end\n  function NzTreeComponent(nzTreeService, nzConfigService, cdr, noAnimation) {\n    var _this6;\n\n    _classCallCheck(this, NzTreeComponent);\n\n    _this6 = _super2.call(this, nzTreeService);\n    _this6.nzConfigService = nzConfigService;\n    _this6.cdr = cdr;\n    _this6.noAnimation = noAnimation;\n    _this6._nzModuleName = NZ_CONFIG_MODULE_NAME;\n    _this6.nzShowIcon = false;\n    _this6.nzHideUnMatched = false;\n    _this6.nzBlockNode = false;\n    _this6.nzExpandAll = false;\n    _this6.nzSelectMode = false;\n    _this6.nzCheckStrictly = false;\n    _this6.nzShowExpand = true;\n    _this6.nzShowLine = false;\n    _this6.nzCheckable = false;\n    _this6.nzAsyncData = false;\n    _this6.nzDraggable = false;\n    _this6.nzMultiple = false;\n    _this6.nzVirtualItemSize = 28;\n    _this6.nzVirtualMaxBufferPx = 500;\n    _this6.nzVirtualMinBufferPx = 28;\n    _this6.nzVirtualHeight = null;\n    _this6.nzData = [];\n    _this6.nzExpandedKeys = [];\n    _this6.nzSelectedKeys = [];\n    _this6.nzCheckedKeys = [];\n    _this6.nzSearchValue = '';\n    _this6.nzFlattenNodes = [];\n    _this6.beforeInit = true;\n    _this6.nzExpandedKeysChange = new EventEmitter();\n    _this6.nzSelectedKeysChange = new EventEmitter();\n    _this6.nzCheckedKeysChange = new EventEmitter();\n    _this6.nzSearchValueChange = new EventEmitter();\n    _this6.nzClick = new EventEmitter();\n    _this6.nzDblClick = new EventEmitter();\n    _this6.nzContextMenu = new EventEmitter();\n    _this6.nzCheckBoxChange = new EventEmitter();\n    _this6.nzExpandChange = new EventEmitter();\n    _this6.nzOnDragStart = new EventEmitter();\n    _this6.nzOnDragEnter = new EventEmitter();\n    _this6.nzOnDragOver = new EventEmitter();\n    _this6.nzOnDragLeave = new EventEmitter();\n    _this6.nzOnDrop = new EventEmitter();\n    _this6.nzOnDragEnd = new EventEmitter();\n    _this6.HIDDEN_STYLE = {\n      width: 0,\n      height: 0,\n      display: 'flex',\n      overflow: 'hidden',\n      opacity: 0,\n      border: 0,\n      padding: 0,\n      margin: 0\n    };\n    _this6.destroy$ = new Subject();\n\n    _this6.onChange = function () {\n      return null;\n    };\n\n    _this6.onTouched = function () {\n      return null;\n    };\n\n    return _this6;\n  }\n\n  _createClass(NzTreeComponent, [{\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.handleNzData(value);\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Render all properties of nzTree\n     * @param changes: all changes from @Input\n     */\n\n  }, {\n    key: \"renderTreeProperties\",\n    value: function renderTreeProperties(changes) {\n      var useDefaultExpandedKeys = false;\n      var expandAll = false;\n      var nzData = changes.nzData,\n          nzExpandedKeys = changes.nzExpandedKeys,\n          nzSelectedKeys = changes.nzSelectedKeys,\n          nzCheckedKeys = changes.nzCheckedKeys,\n          nzCheckStrictly = changes.nzCheckStrictly,\n          nzExpandAll = changes.nzExpandAll,\n          nzMultiple = changes.nzMultiple,\n          nzSearchValue = changes.nzSearchValue;\n\n      if (nzExpandAll) {\n        useDefaultExpandedKeys = true;\n        expandAll = this.nzExpandAll;\n      }\n\n      if (nzMultiple) {\n        this.nzTreeService.isMultiple = this.nzMultiple;\n      }\n\n      if (nzCheckStrictly) {\n        this.nzTreeService.isCheckStrictly = this.nzCheckStrictly;\n      }\n\n      if (nzData) {\n        this.handleNzData(this.nzData);\n      }\n\n      if (nzCheckedKeys) {\n        this.handleCheckedKeys(this.nzCheckedKeys);\n      }\n\n      if (nzCheckStrictly) {\n        this.handleCheckedKeys(null);\n      }\n\n      if (nzExpandedKeys || nzExpandAll) {\n        useDefaultExpandedKeys = true;\n        this.handleExpandedKeys(expandAll || this.nzExpandedKeys);\n      }\n\n      if (nzSelectedKeys) {\n        this.handleSelectedKeys(this.nzSelectedKeys, this.nzMultiple);\n      }\n\n      if (nzSearchValue) {\n        if (!(nzSearchValue.firstChange && !this.nzSearchValue)) {\n          useDefaultExpandedKeys = false;\n          this.handleSearchValue(nzSearchValue.currentValue, this.nzSearchFunc);\n          this.nzSearchValueChange.emit(this.nzTreeService.formatEvent('search', null, null));\n        }\n      } // flatten data\n\n\n      var currentExpandedKeys = this.getExpandedNodeList().map(function (v) {\n        return v.key;\n      });\n      var newExpandedKeys = useDefaultExpandedKeys ? expandAll || this.nzExpandedKeys : currentExpandedKeys;\n      this.handleFlattenNodes(this.nzTreeService.rootNodes, newExpandedKeys);\n    }\n  }, {\n    key: \"trackByFlattenNode\",\n    value: function trackByFlattenNode(_, node) {\n      return node.key;\n    } // Deal with properties\n\n    /**\n     * nzData\n     * @param value\n     */\n\n  }, {\n    key: \"handleNzData\",\n    value: function handleNzData(value) {\n      if (Array.isArray(value)) {\n        var data = this.coerceTreeNodes(value);\n        this.nzTreeService.initTree(data);\n      }\n    }\n  }, {\n    key: \"handleFlattenNodes\",\n    value: function handleFlattenNodes(data) {\n      var expandKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      this.nzTreeService.flattenTreeData(data, expandKeys);\n    }\n  }, {\n    key: \"handleCheckedKeys\",\n    value: function handleCheckedKeys(keys) {\n      this.nzTreeService.conductCheck(keys, this.nzCheckStrictly);\n    }\n  }, {\n    key: \"handleExpandedKeys\",\n    value: function handleExpandedKeys() {\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.nzTreeService.conductExpandedKeys(keys);\n    }\n  }, {\n    key: \"handleSelectedKeys\",\n    value: function handleSelectedKeys(keys, isMulti) {\n      this.nzTreeService.conductSelectedKeys(keys, isMulti);\n    }\n  }, {\n    key: \"handleSearchValue\",\n    value: function handleSearchValue(value, searchFunc) {\n      var _this7 = this;\n\n      var dataList = flattenTreeData(this.nzTreeService.rootNodes, true).map(function (v) {\n        return v.data;\n      });\n\n      var checkIfMatched = function checkIfMatched(node) {\n        if (searchFunc) {\n          return searchFunc(node.origin);\n        }\n\n        return !value || !node.title.toLowerCase().includes(value.toLowerCase()) ? false : true;\n      };\n\n      dataList.forEach(function (v) {\n        v.isMatched = checkIfMatched(v);\n        v.canHide = !v.isMatched;\n\n        if (!v.isMatched) {\n          v.setExpanded(false);\n\n          _this7.nzTreeService.setExpandedNodeList(v);\n        } else {\n          // expand\n          _this7.nzTreeService.expandNodeAllParentBySearch(v);\n        }\n\n        _this7.nzTreeService.setMatchedNodeList(v);\n      });\n    }\n    /**\n     * Handle emit event\n     * @param event\n     * handle each event\n     */\n\n  }, {\n    key: \"eventTriggerChanged\",\n    value: function eventTriggerChanged(event) {\n      var node = event.node;\n\n      switch (event.eventName) {\n        case 'expand':\n          this.renderTree();\n          this.nzExpandChange.emit(event);\n          break;\n\n        case 'click':\n          this.nzClick.emit(event);\n          break;\n\n        case 'dblclick':\n          this.nzDblClick.emit(event);\n          break;\n\n        case 'contextmenu':\n          this.nzContextMenu.emit(event);\n          break;\n\n        case 'check':\n          // Render checked state with nodes' property `isChecked`\n          this.nzTreeService.setCheckedNodeList(node);\n\n          if (!this.nzCheckStrictly) {\n            this.nzTreeService.conduct(node);\n          } // Cause check method will rerender list, so we need recover it and next the new event to user\n\n\n          var eventNext = this.nzTreeService.formatEvent('check', node, event.event);\n          this.nzCheckBoxChange.emit(eventNext);\n          break;\n\n        case 'dragstart':\n          // if node is expanded\n          if (node.isExpanded) {\n            node.setExpanded(!node.isExpanded);\n            this.renderTree();\n          }\n\n          this.nzOnDragStart.emit(event);\n          break;\n\n        case 'dragenter':\n          var selectedNode = this.nzTreeService.getSelectedNode();\n\n          if (selectedNode && selectedNode.key !== node.key && !node.isExpanded && !node.isLeaf) {\n            node.setExpanded(true);\n            this.renderTree();\n          }\n\n          this.nzOnDragEnter.emit(event);\n          break;\n\n        case 'dragover':\n          this.nzOnDragOver.emit(event);\n          break;\n\n        case 'dragleave':\n          this.nzOnDragLeave.emit(event);\n          break;\n\n        case 'dragend':\n          this.nzOnDragEnd.emit(event);\n          break;\n\n        case 'drop':\n          this.renderTree();\n          this.nzOnDrop.emit(event);\n          break;\n      }\n    }\n    /**\n     * Click expand icon\n     */\n\n  }, {\n    key: \"renderTree\",\n    value: function renderTree() {\n      this.handleFlattenNodes(this.nzTreeService.rootNodes, this.getExpandedNodeList().map(function (v) {\n        return v.key;\n      }));\n      this.cdr.markForCheck();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this8 = this;\n\n      this.nzTreeService.flattenNodes$.pipe(takeUntil(this.destroy$)).subscribe(function (data) {\n        _this8.nzFlattenNodes = data;\n\n        _this8.cdr.markForCheck();\n      });\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.renderTreeProperties(changes);\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.beforeInit = false;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }]);\n\n  return NzTreeComponent;\n}(NzTreeBase);\n\nNzTreeComponent.ɵfac = function NzTreeComponent_Factory(t) {\n  return new (t || NzTreeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.NzTreeBaseService), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.NzConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.NzNoAnimationDirective, 9));\n};\n\nNzTreeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeComponent,\n  selectors: [[\"nz-tree\"]],\n  contentQueries: function NzTreeComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticContentQuery(dirIndex, _c1, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nzTreeTemplateChild = _t.first);\n    }\n  },\n  viewQuery: function NzTreeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkVirtualScrollViewport, true, CdkVirtualScrollViewport);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cdkVirtualScrollViewport = _t.first);\n    }\n  },\n  hostVars: 18,\n  hostBindings: function NzTreeComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-select-tree\", ctx.nzSelectMode)(\"ant-select-tree-show-line\", ctx.nzSelectMode && ctx.nzShowLine)(\"ant-select-tree-icon-hide\", ctx.nzSelectMode && !ctx.nzShowIcon)(\"ant-select-tree-block-node\", ctx.nzSelectMode && ctx.nzBlockNode)(\"ant-tree\", !ctx.nzSelectMode)(\"ant-tree-show-line\", !ctx.nzSelectMode && ctx.nzShowLine)(\"ant-tree-icon-hide\", !ctx.nzSelectMode && !ctx.nzShowIcon)(\"ant-tree-block-node\", !ctx.nzSelectMode && ctx.nzBlockNode)(\"draggable-tree\", ctx.nzDraggable);\n    }\n  },\n  inputs: {\n    nzShowIcon: \"nzShowIcon\",\n    nzHideUnMatched: \"nzHideUnMatched\",\n    nzBlockNode: \"nzBlockNode\",\n    nzExpandAll: \"nzExpandAll\",\n    nzSelectMode: \"nzSelectMode\",\n    nzCheckStrictly: \"nzCheckStrictly\",\n    nzShowExpand: \"nzShowExpand\",\n    nzShowLine: \"nzShowLine\",\n    nzCheckable: \"nzCheckable\",\n    nzAsyncData: \"nzAsyncData\",\n    nzDraggable: \"nzDraggable\",\n    nzMultiple: \"nzMultiple\",\n    nzVirtualItemSize: \"nzVirtualItemSize\",\n    nzVirtualMaxBufferPx: \"nzVirtualMaxBufferPx\",\n    nzVirtualMinBufferPx: \"nzVirtualMinBufferPx\",\n    nzVirtualHeight: \"nzVirtualHeight\",\n    nzData: \"nzData\",\n    nzExpandedKeys: \"nzExpandedKeys\",\n    nzSelectedKeys: \"nzSelectedKeys\",\n    nzCheckedKeys: \"nzCheckedKeys\",\n    nzSearchValue: \"nzSearchValue\",\n    nzExpandedIcon: \"nzExpandedIcon\",\n    nzTreeTemplate: \"nzTreeTemplate\",\n    nzBeforeDrop: \"nzBeforeDrop\",\n    nzSearchFunc: \"nzSearchFunc\"\n  },\n  outputs: {\n    nzExpandedKeysChange: \"nzExpandedKeysChange\",\n    nzSelectedKeysChange: \"nzSelectedKeysChange\",\n    nzCheckedKeysChange: \"nzCheckedKeysChange\",\n    nzSearchValueChange: \"nzSearchValueChange\",\n    nzClick: \"nzClick\",\n    nzDblClick: \"nzDblClick\",\n    nzContextMenu: \"nzContextMenu\",\n    nzCheckBoxChange: \"nzCheckBoxChange\",\n    nzExpandChange: \"nzExpandChange\",\n    nzOnDragStart: \"nzOnDragStart\",\n    nzOnDragEnter: \"nzOnDragEnter\",\n    nzOnDragOver: \"nzOnDragOver\",\n    nzOnDragLeave: \"nzOnDragLeave\",\n    nzOnDrop: \"nzOnDrop\",\n    nzOnDragEnd: \"nzOnDragEnd\"\n  },\n  exportAs: [\"nzTree\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([NzTreeService, {\n    provide: NzTreeBaseService,\n    useFactory: NzTreeServiceFactory,\n    deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n  }, {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return NzTreeComponent;\n    }),\n    multi: true\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 5,\n  consts: [[\"role\", \"tree\"], [3, \"ngStyle\"], [1, \"ant-tree-list\"], [3, \"ant-select-tree-list-holder-inner\", \"ant-tree-list-holder-inner\", \"itemSize\", \"minBufferPx\", \"maxBufferPx\", \"height\", 4, \"ngIf\"], [3, \"ant-select-tree-list-holder-inner\", \"ant-tree-list-holder-inner\", \"nzNoAnimation\", 4, \"ngIf\"], [\"nodeTemplate\", \"\"], [3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\", \"cdkVirtualForTrackBy\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"nzNoAnimation\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"icon\", \"title\", \"isLoading\", \"isSelected\", \"isDisabled\", \"isMatched\", \"isExpanded\", \"isLeaf\", \"isStart\", \"isEnd\", \"isChecked\", \"isHalfChecked\", \"isDisableCheckbox\", \"isSelectable\", \"canHide\", \"nzTreeNode\", \"nzSelectMode\", \"nzShowLine\", \"nzExpandedIcon\", \"nzDraggable\", \"nzCheckable\", \"nzShowExpand\", \"nzAsyncData\", \"nzSearchValue\", \"nzHideUnMatched\", \"nzBeforeDrop\", \"nzShowIcon\", \"nzTreeTemplate\", \"nzExpandChange\", \"nzClick\", \"nzDblClick\", \"nzContextMenu\", \"nzCheckBoxChange\", \"nzOnDragStart\", \"nzOnDragEnter\", \"nzOnDragOver\", \"nzOnDragLeave\", \"nzOnDragEnd\", \"nzOnDrop\"]],\n  template: function NzTreeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelement(1, \"input\", 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵelementStart(3, \"div\");\n      ɵngcc0.ɵɵtemplate(4, NzTreeComponent_cdk_virtual_scroll_viewport_4_Template, 2, 11, \"cdk-virtual-scroll-viewport\", 3);\n      ɵngcc0.ɵɵtemplate(5, NzTreeComponent_div_5_Template, 2, 9, \"div\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(6, NzTreeComponent_ng_template_6_Template, 1, 28, \"ng-template\", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.HIDDEN_STYLE);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"ant-select-tree-list\", ctx.nzSelectMode);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzVirtualHeight);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.nzVirtualHeight);\n    }\n  },\n  directives: [ɵngcc1.NgStyle, ɵngcc1.NgIf, ɵngcc8.CdkVirtualScrollViewport, ɵngcc8.CdkFixedSizeVirtualScroll, ɵngcc8.CdkVirtualForOf, ɵngcc1.NgTemplateOutlet, ɵngcc6.NzNoAnimationDirective, ɵngcc1.NgForOf, NzTreeNodeComponent],\n  encapsulation: 2,\n  data: {\n    animation: [treeCollapseMotion]\n  },\n  changeDetection: 0\n});\n\nNzTreeComponent.ctorParameters = function () {\n  return [{\n    type: NzTreeBaseService\n  }, {\n    type: NzConfigService\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NzNoAnimationDirective,\n    decorators: [{\n      type: Host\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nNzTreeComponent.propDecorators = {\n  nzShowIcon: [{\n    type: Input\n  }],\n  nzHideUnMatched: [{\n    type: Input\n  }],\n  nzBlockNode: [{\n    type: Input\n  }],\n  nzExpandAll: [{\n    type: Input\n  }],\n  nzSelectMode: [{\n    type: Input\n  }],\n  nzCheckStrictly: [{\n    type: Input\n  }],\n  nzShowExpand: [{\n    type: Input\n  }],\n  nzShowLine: [{\n    type: Input\n  }],\n  nzCheckable: [{\n    type: Input\n  }],\n  nzAsyncData: [{\n    type: Input\n  }],\n  nzDraggable: [{\n    type: Input\n  }],\n  nzMultiple: [{\n    type: Input\n  }],\n  nzExpandedIcon: [{\n    type: Input\n  }],\n  nzVirtualItemSize: [{\n    type: Input\n  }],\n  nzVirtualMaxBufferPx: [{\n    type: Input\n  }],\n  nzVirtualMinBufferPx: [{\n    type: Input\n  }],\n  nzVirtualHeight: [{\n    type: Input\n  }],\n  nzTreeTemplate: [{\n    type: Input\n  }],\n  nzBeforeDrop: [{\n    type: Input\n  }],\n  nzData: [{\n    type: Input\n  }],\n  nzExpandedKeys: [{\n    type: Input\n  }],\n  nzSelectedKeys: [{\n    type: Input\n  }],\n  nzCheckedKeys: [{\n    type: Input\n  }],\n  nzSearchValue: [{\n    type: Input\n  }],\n  nzSearchFunc: [{\n    type: Input\n  }],\n  nzTreeTemplateChild: [{\n    type: ContentChild,\n    args: ['nzTreeTemplate', {\n      static: true\n    }]\n  }],\n  cdkVirtualScrollViewport: [{\n    type: ViewChild,\n    args: [CdkVirtualScrollViewport, {\n      read: CdkVirtualScrollViewport\n    }]\n  }],\n  nzExpandedKeysChange: [{\n    type: Output\n  }],\n  nzSelectedKeysChange: [{\n    type: Output\n  }],\n  nzCheckedKeysChange: [{\n    type: Output\n  }],\n  nzSearchValueChange: [{\n    type: Output\n  }],\n  nzClick: [{\n    type: Output\n  }],\n  nzDblClick: [{\n    type: Output\n  }],\n  nzContextMenu: [{\n    type: Output\n  }],\n  nzCheckBoxChange: [{\n    type: Output\n  }],\n  nzExpandChange: [{\n    type: Output\n  }],\n  nzOnDragStart: [{\n    type: Output\n  }],\n  nzOnDragEnter: [{\n    type: Output\n  }],\n  nzOnDragOver: [{\n    type: Output\n  }],\n  nzOnDragLeave: [{\n    type: Output\n  }],\n  nzOnDrop: [{\n    type: Output\n  }],\n  nzOnDragEnd: [{\n    type: Output\n  }]\n};\n\n__decorate([InputBoolean(), WithConfig(), __metadata(\"design:type\", Boolean)], NzTreeComponent.prototype, \"nzShowIcon\", void 0);\n\n__decorate([InputBoolean(), WithConfig(), __metadata(\"design:type\", Boolean)], NzTreeComponent.prototype, \"nzHideUnMatched\", void 0);\n\n__decorate([InputBoolean(), WithConfig(), __metadata(\"design:type\", Boolean)], NzTreeComponent.prototype, \"nzBlockNode\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeComponent.prototype, \"nzExpandAll\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeComponent.prototype, \"nzSelectMode\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeComponent.prototype, \"nzCheckStrictly\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Boolean)], NzTreeComponent.prototype, \"nzShowExpand\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeComponent.prototype, \"nzShowLine\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeComponent.prototype, \"nzCheckable\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeComponent.prototype, \"nzAsyncData\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Boolean)], NzTreeComponent.prototype, \"nzDraggable\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeComponent.prototype, \"nzMultiple\", void 0);\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzTreeIndentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-indent',\n      exportAs: 'nzTreeIndent',\n      template: \" <span *ngFor=\\\"let i of listOfUnit; let index = index\\\" [ngClass]=\\\"unitMapOfClass(index)\\\"></span> \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[attr.aria-hidden]': 'true',\n        '[class.ant-tree-indent]': '!nzSelectMode',\n        '[class.ant-select-tree-indent]': 'nzSelectMode'\n      }\n    }]\n  }], function () {\n    return [];\n  }, {\n    nzSelectMode: [{\n      type: Input\n    }],\n    nzTreeLevel: [{\n      type: Input\n    }],\n    nzIsStart: [{\n      type: Input\n    }],\n    nzIsEnd: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzTreeNodeCheckboxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-checkbox',\n      template: \" <span [class.ant-tree-checkbox-inner]=\\\"!nzSelectMode\\\" [class.ant-select-tree-checkbox-inner]=\\\"nzSelectMode\\\"></span> \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[class.ant-select-tree-checkbox]': \"nzSelectMode\",\n        '[class.ant-select-tree-checkbox-checked]': \"nzSelectMode && isChecked\",\n        '[class.ant-select-tree-checkbox-indeterminate]': \"nzSelectMode && isHalfChecked\",\n        '[class.ant-select-tree-checkbox-disabled]': \"nzSelectMode && (isDisabled || isDisableCheckbox)\",\n        '[class.ant-tree-checkbox]': \"!nzSelectMode\",\n        '[class.ant-tree-checkbox-checked]': \"!nzSelectMode && isChecked\",\n        '[class.ant-tree-checkbox-indeterminate]': \"!nzSelectMode && isHalfChecked\",\n        '[class.ant-tree-checkbox-disabled]': \"!nzSelectMode && (isDisabled || isDisableCheckbox)\"\n      }\n    }]\n  }], function () {\n    return [];\n  }, {\n    nzSelectMode: [{\n      type: Input\n    }],\n    isChecked: [{\n      type: Input\n    }],\n    isHalfChecked: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    isDisableCheckbox: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzTreeNodeSwitcherComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-switcher',\n      template: \"\\n    <ng-container *ngIf=\\\"isShowSwitchIcon\\\">\\n      <ng-container *ngIf=\\\"!isLoading; else loadingTemplate\\\">\\n        <ng-container *nzStringTemplateOutlet=\\\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\\\">\\n          <i\\n            nz-icon\\n            nzType=\\\"caret-down\\\"\\n            [class.ant-select-tree-switcher-icon]=\\\"nzSelectMode\\\"\\n            [class.ant-tree-switcher-icon]=\\\"!nzSelectMode\\\"\\n          ></i>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"nzShowLine\\\">\\n      <ng-container *ngIf=\\\"!isLoading; else loadingTemplate\\\">\\n        <ng-container *nzStringTemplateOutlet=\\\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\\\">\\n          <i\\n            *ngIf=\\\"isShowLineIcon\\\"\\n            nz-icon\\n            [nzType]=\\\"isSwitcherOpen ? 'minus-square' : 'plus-square'\\\"\\n            class=\\\"ant-tree-switcher-line-icon\\\"\\n          ></i>\\n          <i *ngIf=\\\"!isShowLineIcon\\\" nz-icon nzType=\\\"file\\\" class=\\\"ant-tree-switcher-line-icon\\\"></i>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n    <ng-template #loadingTemplate>\\n      <i nz-icon nzType=\\\"loading\\\" [nzSpin]=\\\"true\\\" class=\\\"ant-tree-switcher-loading-icon\\\"></i>\\n    </ng-template>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[class.ant-select-tree-switcher]': 'nzSelectMode',\n        '[class.ant-select-tree-switcher-noop]': 'nzSelectMode && isLeaf',\n        '[class.ant-select-tree-switcher_open]': 'nzSelectMode && isSwitcherOpen',\n        '[class.ant-select-tree-switcher_close]': 'nzSelectMode && isSwitcherClose',\n        '[class.ant-tree-switcher]': '!nzSelectMode',\n        '[class.ant-tree-switcher-noop]': '!nzSelectMode && isLeaf',\n        '[class.ant-tree-switcher_open]': '!nzSelectMode && isSwitcherOpen',\n        '[class.ant-tree-switcher_close]': '!nzSelectMode && isSwitcherClose'\n      }\n    }]\n  }], function () {\n    return [];\n  }, {\n    nzSelectMode: [{\n      type: Input\n    }],\n    nzShowExpand: [{\n      type: Input\n    }],\n    nzShowLine: [{\n      type: Input\n    }],\n    nzExpandedIcon: [{\n      type: Input\n    }],\n    context: [{\n      type: Input\n    }],\n    isLeaf: [{\n      type: Input\n    }],\n    isLoading: [{\n      type: Input\n    }],\n    isExpanded: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzTreeNodeTitleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-title',\n      template: \" <ng-template [ngTemplateOutlet]=\\\"treeTemplate\\\" [ngTemplateOutletContext]=\\\"{ $implicit: context, origin: context.origin }\\\">\\n    </ng-template>\\n    <ng-container *ngIf=\\\"!treeTemplate\\\">\\n      <span\\n        *ngIf=\\\"icon && showIcon\\\"\\n        [class.ant-tree-icon__open]=\\\"isSwitcherOpen\\\"\\n        [class.ant-tree-icon__close]=\\\"isSwitcherClose\\\"\\n        [class.ant-tree-icon_loading]=\\\"isLoading\\\"\\n        [class.ant-select-tree-iconEle]=\\\"selectMode\\\"\\n        [class.ant-tree-iconEle]=\\\"!selectMode\\\"\\n      >\\n        <span\\n          [class.ant-select-tree-iconEle]=\\\"selectMode\\\"\\n          [class.ant-select-tree-icon__customize]=\\\"selectMode\\\"\\n          [class.ant-tree-iconEle]=\\\"!selectMode\\\"\\n          [class.ant-tree-icon__customize]=\\\"!selectMode\\\"\\n        >\\n          <i nz-icon *ngIf=\\\"icon\\\" [nzType]=\\\"icon\\\"></i>\\n        </span>\\n      </span>\\n      <span class=\\\"ant-tree-title\\\" [innerHTML]=\\\"title | nzHighlight: matchedValue:'i':'font-highlight'\\\"> </span>\\n    </ng-container>\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[attr.title]': 'title',\n        '[attr.draggable]': 'canDraggable',\n        '[attr.aria-grabbed]': 'canDraggable',\n        '[class.draggable]': 'canDraggable',\n        '[class.ant-select-tree-node-content-wrapper]': \"selectMode\",\n        '[class.ant-select-tree-node-content-wrapper-open]': \"selectMode && isSwitcherOpen\",\n        '[class.ant-select-tree-node-content-wrapper-close]': \"selectMode && isSwitcherClose\",\n        '[class.ant-select-tree-node-selected]': \"selectMode && isSelected\",\n        '[class.ant-tree-node-content-wrapper]': \"!selectMode\",\n        '[class.ant-tree-node-content-wrapper-open]': \"!selectMode && isSwitcherOpen\",\n        '[class.ant-tree-node-content-wrapper-close]': \"!selectMode && isSwitcherClose\",\n        '[class.ant-tree-node-selected]': \"!selectMode && isSelected\"\n      }\n    }]\n  }], function () {\n    return [];\n  }, {\n    treeTemplate: [{\n      type: Input\n    }],\n    selectMode: [{\n      type: Input\n    }],\n    searchValue: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input\n    }],\n    showIcon: [{\n      type: Input\n    }],\n    context: [{\n      type: Input\n    }],\n    icon: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    isLoading: [{\n      type: Input\n    }],\n    isSelected: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    isMatched: [{\n      type: Input\n    }],\n    isExpanded: [{\n      type: Input\n    }],\n    isLeaf: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzTreeNodeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node',\n      exportAs: 'nzTreeNode',\n      template: \"\\n    <nz-tree-indent [nzTreeLevel]=\\\"nzTreeNode.level\\\" [nzSelectMode]=\\\"nzSelectMode\\\" [nzIsStart]=\\\"isStart\\\" [nzIsEnd]=\\\"isEnd\\\"></nz-tree-indent>\\n    <nz-tree-node-switcher\\n      *ngIf=\\\"nzShowExpand\\\"\\n      [nzShowExpand]=\\\"nzShowExpand\\\"\\n      [nzShowLine]=\\\"nzShowLine\\\"\\n      [nzExpandedIcon]=\\\"nzExpandedIcon\\\"\\n      [nzSelectMode]=\\\"nzSelectMode\\\"\\n      [context]=\\\"nzTreeNode\\\"\\n      [isLeaf]=\\\"isLeaf\\\"\\n      [isExpanded]=\\\"isExpanded\\\"\\n      [isLoading]=\\\"isLoading\\\"\\n      (click)=\\\"clickExpand($event)\\\"\\n    ></nz-tree-node-switcher>\\n    <nz-tree-node-checkbox\\n      *ngIf=\\\"nzCheckable\\\"\\n      (click)=\\\"clickCheckBox($event)\\\"\\n      [nzSelectMode]=\\\"nzSelectMode\\\"\\n      [isChecked]=\\\"isChecked\\\"\\n      [isHalfChecked]=\\\"isHalfChecked\\\"\\n      [isDisabled]=\\\"isDisabled\\\"\\n      [isDisableCheckbox]=\\\"isDisableCheckbox\\\"\\n    ></nz-tree-node-checkbox>\\n    <nz-tree-node-title\\n      [icon]=\\\"icon\\\"\\n      [title]=\\\"title\\\"\\n      [isLoading]=\\\"isLoading\\\"\\n      [isSelected]=\\\"isSelected\\\"\\n      [isDisabled]=\\\"isDisabled\\\"\\n      [isMatched]=\\\"isMatched\\\"\\n      [isExpanded]=\\\"isExpanded\\\"\\n      [isLeaf]=\\\"isLeaf\\\"\\n      [searchValue]=\\\"nzSearchValue\\\"\\n      [treeTemplate]=\\\"nzTreeTemplate\\\"\\n      [draggable]=\\\"nzDraggable\\\"\\n      [showIcon]=\\\"nzShowIcon\\\"\\n      [selectMode]=\\\"nzSelectMode\\\"\\n      [context]=\\\"nzTreeNode\\\"\\n      (dblclick)=\\\"dblClick($event)\\\"\\n      (click)=\\\"clickSelect($event)\\\"\\n      (contextmenu)=\\\"contextMenu($event)\\\"\\n    ></nz-tree-node-title>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[class.ant-select-tree-treenode]': \"nzSelectMode\",\n        '[class.ant-select-tree-treenode-disabled]': \"nzSelectMode && isDisabled\",\n        '[class.ant-select-tree-treenode-switcher-open]': \"nzSelectMode && isSwitcherOpen\",\n        '[class.ant-select-tree-treenode-switcher-close]': \"nzSelectMode && isSwitcherClose\",\n        '[class.ant-select-tree-treenode-checkbox-checked]': \"nzSelectMode && isChecked\",\n        '[class.ant-select-tree-treenode-checkbox-indeterminate]': \"nzSelectMode && isHalfChecked\",\n        '[class.ant-select-tree-treenode-selected]': \"nzSelectMode && isSelected\",\n        '[class.ant-select-tree-treenode-loading]': \"nzSelectMode && isLoading\",\n        '[class.ant-tree-treenode]': \"!nzSelectMode\",\n        '[class.ant-tree-treenode-disabled]': \"!nzSelectMode && isDisabled\",\n        '[class.ant-tree-treenode-switcher-open]': \"!nzSelectMode && isSwitcherOpen\",\n        '[class.ant-tree-treenode-switcher-close]': \"!nzSelectMode && isSwitcherClose\",\n        '[class.ant-tree-treenode-checkbox-checked]': \"!nzSelectMode && isChecked\",\n        '[class.ant-tree-treenode-checkbox-indeterminate]': \"!nzSelectMode && isHalfChecked\",\n        '[class.ant-tree-treenode-selected]': \"!nzSelectMode && isSelected\",\n        '[class.ant-tree-treenode-loading]': \"!nzSelectMode && isLoading\",\n        '[style.display]': 'displayStyle',\n        '(mousedown)': 'onMousedown($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc5.NzTreeBaseService\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc6.NzNoAnimationDirective,\n      decorators: [{\n        type: Host\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    icon: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    isLoading: [{\n      type: Input\n    }],\n    isSelected: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    isMatched: [{\n      type: Input\n    }],\n    nzHideUnMatched: [{\n      type: Input\n    }],\n    nzNoAnimation: [{\n      type: Input\n    }],\n    nzSelectMode: [{\n      type: Input\n    }],\n    nzShowIcon: [{\n      type: Input\n    }],\n    nzTreeTemplate: [{\n      type: Input\n    }],\n    nzSearchValue: [{\n      type: Input\n    }],\n    nzDraggable: [{\n      type: Input\n    }],\n    nzClick: [{\n      type: Output\n    }],\n    nzDblClick: [{\n      type: Output\n    }],\n    nzContextMenu: [{\n      type: Output\n    }],\n    nzCheckBoxChange: [{\n      type: Output\n    }],\n    nzExpandChange: [{\n      type: Output\n    }],\n    nzOnDragStart: [{\n      type: Output\n    }],\n    nzOnDragEnter: [{\n      type: Output\n    }],\n    nzOnDragOver: [{\n      type: Output\n    }],\n    nzOnDragLeave: [{\n      type: Output\n    }],\n    nzOnDrop: [{\n      type: Output\n    }],\n    nzOnDragEnd: [{\n      type: Output\n    }],\n    isExpanded: [{\n      type: Input\n    }],\n    isLeaf: [{\n      type: Input\n    }],\n    isChecked: [{\n      type: Input\n    }],\n    isHalfChecked: [{\n      type: Input\n    }],\n    isDisableCheckbox: [{\n      type: Input\n    }],\n    isSelectable: [{\n      type: Input\n    }],\n    canHide: [{\n      type: Input\n    }],\n    isStart: [{\n      type: Input\n    }],\n    isEnd: [{\n      type: Input\n    }],\n    nzTreeNode: [{\n      type: Input\n    }],\n    nzShowLine: [{\n      type: Input\n    }],\n    nzShowExpand: [{\n      type: Input\n    }],\n    nzCheckable: [{\n      type: Input\n    }],\n    nzAsyncData: [{\n      type: Input\n    }],\n    nzExpandedIcon: [{\n      type: Input\n    }],\n    nzBeforeDrop: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzTreeService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzTreeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree',\n      exportAs: 'nzTree',\n      animations: [treeCollapseMotion],\n      template: \"\\n    <div role=\\\"tree\\\">\\n      <input [ngStyle]=\\\"HIDDEN_STYLE\\\" />\\n    </div>\\n    <div class=\\\"ant-tree-list\\\" [class.ant-select-tree-list]=\\\"nzSelectMode\\\">\\n      <div>\\n        <cdk-virtual-scroll-viewport\\n          *ngIf=\\\"nzVirtualHeight\\\"\\n          [class.ant-select-tree-list-holder-inner]=\\\"nzSelectMode\\\"\\n          [class.ant-tree-list-holder-inner]=\\\"!nzSelectMode\\\"\\n          [itemSize]=\\\"nzVirtualItemSize\\\"\\n          [minBufferPx]=\\\"nzVirtualMinBufferPx\\\"\\n          [maxBufferPx]=\\\"nzVirtualMaxBufferPx\\\"\\n          [style.height]=\\\"nzVirtualHeight\\\"\\n        >\\n          <ng-container *cdkVirtualFor=\\\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\\\">\\n            <ng-template [ngTemplateOutlet]=\\\"nodeTemplate\\\" [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"></ng-template>\\n          </ng-container>\\n        </cdk-virtual-scroll-viewport>\\n\\n        <div\\n          *ngIf=\\\"!nzVirtualHeight\\\"\\n          [class.ant-select-tree-list-holder-inner]=\\\"nzSelectMode\\\"\\n          [class.ant-tree-list-holder-inner]=\\\"!nzSelectMode\\\"\\n          [@.disabled]=\\\"beforeInit || noAnimation?.nzNoAnimation\\\"\\n          [nzNoAnimation]=\\\"noAnimation?.nzNoAnimation\\\"\\n          [@treeCollapseMotion]=\\\"nzFlattenNodes.length\\\"\\n        >\\n          <ng-container *ngFor=\\\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\\\">\\n            <ng-template [ngTemplateOutlet]=\\\"nodeTemplate\\\" [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"></ng-template>\\n          </ng-container>\\n        </div>\\n      </div>\\n    </div>\\n    <ng-template #nodeTemplate let-treeNode>\\n      <nz-tree-node\\n        [icon]=\\\"treeNode.icon\\\"\\n        [title]=\\\"treeNode.title\\\"\\n        [isLoading]=\\\"treeNode.isLoading\\\"\\n        [isSelected]=\\\"treeNode.isSelected\\\"\\n        [isDisabled]=\\\"treeNode.isDisabled\\\"\\n        [isMatched]=\\\"treeNode.isMatched\\\"\\n        [isExpanded]=\\\"treeNode.isExpanded\\\"\\n        [isLeaf]=\\\"treeNode.isLeaf\\\"\\n        [isStart]=\\\"treeNode.isStart\\\"\\n        [isEnd]=\\\"treeNode.isEnd\\\"\\n        [isChecked]=\\\"treeNode.isChecked\\\"\\n        [isHalfChecked]=\\\"treeNode.isHalfChecked\\\"\\n        [isDisableCheckbox]=\\\"treeNode.isDisableCheckbox\\\"\\n        [isSelectable]=\\\"treeNode.isSelectable\\\"\\n        [canHide]=\\\"treeNode.canHide\\\"\\n        [nzTreeNode]=\\\"treeNode\\\"\\n        [nzSelectMode]=\\\"nzSelectMode\\\"\\n        [nzShowLine]=\\\"nzShowLine\\\"\\n        [nzExpandedIcon]=\\\"nzExpandedIcon\\\"\\n        [nzDraggable]=\\\"nzDraggable\\\"\\n        [nzCheckable]=\\\"nzCheckable\\\"\\n        [nzShowExpand]=\\\"nzShowExpand\\\"\\n        [nzAsyncData]=\\\"nzAsyncData\\\"\\n        [nzSearchValue]=\\\"nzSearchValue\\\"\\n        [nzHideUnMatched]=\\\"nzHideUnMatched\\\"\\n        [nzBeforeDrop]=\\\"nzBeforeDrop\\\"\\n        [nzShowIcon]=\\\"nzShowIcon\\\"\\n        [nzTreeTemplate]=\\\"nzTreeTemplate || nzTreeTemplateChild\\\"\\n        (nzExpandChange)=\\\"eventTriggerChanged($event)\\\"\\n        (nzClick)=\\\"eventTriggerChanged($event)\\\"\\n        (nzDblClick)=\\\"eventTriggerChanged($event)\\\"\\n        (nzContextMenu)=\\\"eventTriggerChanged($event)\\\"\\n        (nzCheckBoxChange)=\\\"eventTriggerChanged($event)\\\"\\n        (nzOnDragStart)=\\\"eventTriggerChanged($event)\\\"\\n        (nzOnDragEnter)=\\\"eventTriggerChanged($event)\\\"\\n        (nzOnDragOver)=\\\"eventTriggerChanged($event)\\\"\\n        (nzOnDragLeave)=\\\"eventTriggerChanged($event)\\\"\\n        (nzOnDragEnd)=\\\"eventTriggerChanged($event)\\\"\\n        (nzOnDrop)=\\\"eventTriggerChanged($event)\\\"\\n      ></nz-tree-node>\\n    </ng-template>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [NzTreeService, {\n        provide: NzTreeBaseService,\n        useFactory: NzTreeServiceFactory,\n        deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n      }, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return NzTreeComponent;\n        }),\n        multi: true\n      }],\n      host: {\n        '[class.ant-select-tree]': \"nzSelectMode\",\n        '[class.ant-select-tree-show-line]': \"nzSelectMode && nzShowLine\",\n        '[class.ant-select-tree-icon-hide]': \"nzSelectMode && !nzShowIcon\",\n        '[class.ant-select-tree-block-node]': \"nzSelectMode && nzBlockNode\",\n        '[class.ant-tree]': \"!nzSelectMode\",\n        '[class.ant-tree-show-line]': \"!nzSelectMode && nzShowLine\",\n        '[class.ant-tree-icon-hide]': \"!nzSelectMode && !nzShowIcon\",\n        '[class.ant-tree-block-node]': \"!nzSelectMode && nzBlockNode\",\n        '[class.draggable-tree]': \"nzDraggable\"\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc5.NzTreeBaseService\n    }, {\n      type: ɵngcc7.NzConfigService\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc6.NzNoAnimationDirective,\n      decorators: [{\n        type: Host\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    nzShowIcon: [{\n      type: Input\n    }],\n    nzHideUnMatched: [{\n      type: Input\n    }],\n    nzBlockNode: [{\n      type: Input\n    }],\n    nzExpandAll: [{\n      type: Input\n    }],\n    nzSelectMode: [{\n      type: Input\n    }],\n    nzCheckStrictly: [{\n      type: Input\n    }],\n    nzShowExpand: [{\n      type: Input\n    }],\n    nzShowLine: [{\n      type: Input\n    }],\n    nzCheckable: [{\n      type: Input\n    }],\n    nzAsyncData: [{\n      type: Input\n    }],\n    nzDraggable: [{\n      type: Input\n    }],\n    nzMultiple: [{\n      type: Input\n    }],\n    nzVirtualItemSize: [{\n      type: Input\n    }],\n    nzVirtualMaxBufferPx: [{\n      type: Input\n    }],\n    nzVirtualMinBufferPx: [{\n      type: Input\n    }],\n    nzVirtualHeight: [{\n      type: Input\n    }],\n    nzData: [{\n      type: Input\n    }],\n    nzExpandedKeys: [{\n      type: Input\n    }],\n    nzSelectedKeys: [{\n      type: Input\n    }],\n    nzCheckedKeys: [{\n      type: Input\n    }],\n    nzSearchValue: [{\n      type: Input\n    }],\n    nzExpandedKeysChange: [{\n      type: Output\n    }],\n    nzSelectedKeysChange: [{\n      type: Output\n    }],\n    nzCheckedKeysChange: [{\n      type: Output\n    }],\n    nzSearchValueChange: [{\n      type: Output\n    }],\n    nzClick: [{\n      type: Output\n    }],\n    nzDblClick: [{\n      type: Output\n    }],\n    nzContextMenu: [{\n      type: Output\n    }],\n    nzCheckBoxChange: [{\n      type: Output\n    }],\n    nzExpandChange: [{\n      type: Output\n    }],\n    nzOnDragStart: [{\n      type: Output\n    }],\n    nzOnDragEnter: [{\n      type: Output\n    }],\n    nzOnDragOver: [{\n      type: Output\n    }],\n    nzOnDragLeave: [{\n      type: Output\n    }],\n    nzOnDrop: [{\n      type: Output\n    }],\n    nzOnDragEnd: [{\n      type: Output\n    }],\n    nzExpandedIcon: [{\n      type: Input\n    }],\n    nzTreeTemplate: [{\n      type: Input\n    }],\n    nzBeforeDrop: [{\n      type: Input\n    }],\n    nzSearchFunc: [{\n      type: Input\n    }],\n    nzTreeTemplateChild: [{\n      type: ContentChild,\n      args: ['nzTreeTemplate', {\n        static: true\n      }]\n    }],\n    cdkVirtualScrollViewport: [{\n      type: ViewChild,\n      args: [CdkVirtualScrollViewport, {\n        read: CdkVirtualScrollViewport\n      }]\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeModule = function NzTreeModule() {\n  _classCallCheck(this, NzTreeModule);\n};\n\nNzTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzTreeModule\n});\nNzTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzTreeModule_Factory(t) {\n    return new (t || NzTreeModule)();\n  },\n  imports: [[CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzTreeModule, {\n    declarations: function declarations() {\n      return [NzTreeComponent, NzTreeNodeComponent, NzTreeIndentComponent, NzTreeNodeSwitcherComponent, NzTreeNodeCheckboxComponent, NzTreeNodeTitleComponent];\n    },\n    imports: function imports() {\n      return [CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule];\n    },\n    exports: function exports() {\n      return [NzTreeComponent, NzTreeNodeComponent, NzTreeIndentComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule],\n      declarations: [NzTreeComponent, NzTreeNodeComponent, NzTreeIndentComponent, NzTreeNodeSwitcherComponent, NzTreeNodeCheckboxComponent, NzTreeNodeTitleComponent],\n      exports: [NzTreeComponent, NzTreeNodeComponent, NzTreeIndentComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzTreeComponent, NzTreeIndentComponent, NzTreeModule, NzTreeNodeCheckboxComponent, NzTreeNodeComponent, NzTreeNodeSwitcherComponent, NzTreeNodeTitleComponent, NzTreeService, NzTreeServiceFactory };","map":{"version":3,"sources":["../../components/tree/tree-indent.component.ts","../../components/tree/tree-node-checkbox.component.ts","../../components/tree/tree-node-switcher.component.ts","../../components/tree/tree-node-title.component.ts","../../components/tree/tree-node.component.ts","../../components/tree/tree.service.ts","../../components/tree/tree.component.ts","../../components/tree/tree.module.ts","../../components/tree/public-api.ts","../../components/tree/ng-zorro-antd-tree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'nz-tree-indent',\n  exportAs: 'nzTreeIndent',\n  template: ` <span *ngFor=\"let i of listOfUnit; let index = index\" [ngClass]=\"unitMapOfClass(index)\"></span> `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  host: {\n    '[attr.aria-hidden]': 'true',\n    '[class.ant-tree-indent]': '!nzSelectMode',\n    '[class.ant-select-tree-indent]': 'nzSelectMode'\n  }\n})\nexport class NzTreeIndentComponent implements OnInit, OnChanges {\n  @Input() nzTreeLevel?: number;\n  @Input() nzIsStart?: boolean[];\n  @Input() nzIsEnd?: boolean[];\n  @Input() nzSelectMode = false;\n\n  listOfUnit: number[] = [];\n\n  unitMapOfClass(index: number): { [key: string]: boolean } {\n    return {\n      [`ant-tree-indent-unit`]: !this.nzSelectMode,\n      [`ant-tree-indent-unit-start`]: !this.nzSelectMode && this.nzIsStart![index + 1],\n      [`ant-tree-indent-unit-end`]: !this.nzSelectMode && this.nzIsEnd![index + 1],\n      [`ant-select-tree-indent-unit`]: this.nzSelectMode,\n      [`ant-select-tree-indent-unit-start`]: this.nzSelectMode && this.nzIsStart![index + 1],\n      [`ant-select-tree-indent-unit-end`]: this.nzSelectMode && this.nzIsEnd![index + 1]\n    };\n  }\n\n  ngOnInit(): void {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzTreeLevel } = changes;\n    if (nzTreeLevel) {\n      this.listOfUnit = [...new Array(nzTreeLevel.currentValue || 0)];\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'nz-tree-node-checkbox',\n  template: ` <span [class.ant-tree-checkbox-inner]=\"!nzSelectMode\" [class.ant-select-tree-checkbox-inner]=\"nzSelectMode\"></span> `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  host: {\n    '[class.ant-select-tree-checkbox]': `nzSelectMode`,\n    '[class.ant-select-tree-checkbox-checked]': `nzSelectMode && isChecked`,\n    '[class.ant-select-tree-checkbox-indeterminate]': `nzSelectMode && isHalfChecked`,\n    '[class.ant-select-tree-checkbox-disabled]': `nzSelectMode && (isDisabled || isDisableCheckbox)`,\n    '[class.ant-tree-checkbox]': `!nzSelectMode`,\n    '[class.ant-tree-checkbox-checked]': `!nzSelectMode && isChecked`,\n    '[class.ant-tree-checkbox-indeterminate]': `!nzSelectMode && isHalfChecked`,\n    '[class.ant-tree-checkbox-disabled]': `!nzSelectMode && (isDisabled || isDisableCheckbox)`\n  }\n})\nexport class NzTreeNodeCheckboxComponent {\n  @Input() nzSelectMode = false;\n  @Input() isChecked?: boolean;\n  @Input() isHalfChecked?: boolean;\n  @Input() isDisabled?: boolean;\n  @Input() isDisableCheckbox?: boolean;\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\nimport { NzTreeNode, NzTreeNodeOptions } from 'ng-zorro-antd/core/tree';\n\n@Component({\n  selector: 'nz-tree-node-switcher',\n  template: `\n    <ng-container *ngIf=\"isShowSwitchIcon\">\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n        <ng-container *nzStringTemplateOutlet=\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\">\n          <i\n            nz-icon\n            nzType=\"caret-down\"\n            [class.ant-select-tree-switcher-icon]=\"nzSelectMode\"\n            [class.ant-tree-switcher-icon]=\"!nzSelectMode\"\n          ></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"nzShowLine\">\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n        <ng-container *nzStringTemplateOutlet=\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\">\n          <i\n            *ngIf=\"isShowLineIcon\"\n            nz-icon\n            [nzType]=\"isSwitcherOpen ? 'minus-square' : 'plus-square'\"\n            class=\"ant-tree-switcher-line-icon\"\n          ></i>\n          <i *ngIf=\"!isShowLineIcon\" nz-icon nzType=\"file\" class=\"ant-tree-switcher-line-icon\"></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-template #loadingTemplate>\n      <i nz-icon nzType=\"loading\" [nzSpin]=\"true\" class=\"ant-tree-switcher-loading-icon\"></i>\n    </ng-template>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  host: {\n    '[class.ant-select-tree-switcher]': 'nzSelectMode',\n    '[class.ant-select-tree-switcher-noop]': 'nzSelectMode && isLeaf',\n    '[class.ant-select-tree-switcher_open]': 'nzSelectMode && isSwitcherOpen',\n    '[class.ant-select-tree-switcher_close]': 'nzSelectMode && isSwitcherClose',\n    '[class.ant-tree-switcher]': '!nzSelectMode',\n    '[class.ant-tree-switcher-noop]': '!nzSelectMode && isLeaf',\n    '[class.ant-tree-switcher_open]': '!nzSelectMode && isSwitcherOpen',\n    '[class.ant-tree-switcher_close]': '!nzSelectMode && isSwitcherClose'\n  }\n})\nexport class NzTreeNodeSwitcherComponent {\n  @Input() nzShowExpand?: boolean;\n  @Input() nzShowLine?: boolean;\n  @Input() nzExpandedIcon?: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }>;\n  @Input() nzSelectMode = false;\n  @Input() context!: NzTreeNode;\n  @Input() isLeaf?: boolean;\n  @Input() isLoading?: boolean;\n  @Input() isExpanded?: boolean;\n\n  get isShowLineIcon(): boolean {\n    return !this.isLeaf && !!this.nzShowLine;\n  }\n\n  get isShowSwitchIcon(): boolean {\n    return !this.isLeaf && !this.nzShowLine;\n  }\n\n  get isSwitcherOpen(): boolean {\n    return !!this.isExpanded && !this.isLeaf;\n  }\n\n  get isSwitcherClose(): boolean {\n    return !this.isExpanded && !this.isLeaf;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\nimport { NzTreeNode, NzTreeNodeOptions } from 'ng-zorro-antd/core/tree';\n\n@Component({\n  selector: 'nz-tree-node-title',\n  template: ` <ng-template [ngTemplateOutlet]=\"treeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: context, origin: context.origin }\">\n    </ng-template>\n    <ng-container *ngIf=\"!treeTemplate\">\n      <span\n        *ngIf=\"icon && showIcon\"\n        [class.ant-tree-icon__open]=\"isSwitcherOpen\"\n        [class.ant-tree-icon__close]=\"isSwitcherClose\"\n        [class.ant-tree-icon_loading]=\"isLoading\"\n        [class.ant-select-tree-iconEle]=\"selectMode\"\n        [class.ant-tree-iconEle]=\"!selectMode\"\n      >\n        <span\n          [class.ant-select-tree-iconEle]=\"selectMode\"\n          [class.ant-select-tree-icon__customize]=\"selectMode\"\n          [class.ant-tree-iconEle]=\"!selectMode\"\n          [class.ant-tree-icon__customize]=\"!selectMode\"\n        >\n          <i nz-icon *ngIf=\"icon\" [nzType]=\"icon\"></i>\n        </span>\n      </span>\n      <span class=\"ant-tree-title\" [innerHTML]=\"title | nzHighlight: matchedValue:'i':'font-highlight'\"> </span>\n    </ng-container>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  host: {\n    '[attr.title]': 'title',\n    '[attr.draggable]': 'canDraggable',\n    '[attr.aria-grabbed]': 'canDraggable',\n    '[class.draggable]': 'canDraggable',\n    '[class.ant-select-tree-node-content-wrapper]': `selectMode`,\n    '[class.ant-select-tree-node-content-wrapper-open]': `selectMode && isSwitcherOpen`,\n    '[class.ant-select-tree-node-content-wrapper-close]': `selectMode && isSwitcherClose`,\n    '[class.ant-select-tree-node-selected]': `selectMode && isSelected`,\n    '[class.ant-tree-node-content-wrapper]': `!selectMode`,\n    '[class.ant-tree-node-content-wrapper-open]': `!selectMode && isSwitcherOpen`,\n    '[class.ant-tree-node-content-wrapper-close]': `!selectMode && isSwitcherClose`,\n    '[class.ant-tree-node-selected]': `!selectMode && isSelected`\n  }\n})\nexport class NzTreeNodeTitleComponent {\n  @Input() searchValue!: string;\n  @Input() treeTemplate: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }> | null = null;\n  @Input() draggable!: boolean;\n  @Input() showIcon!: boolean;\n  @Input() selectMode = false;\n  @Input() context!: NzTreeNode;\n  @Input() icon!: string;\n  @Input() title!: string;\n  @Input() isLoading!: boolean;\n  @Input() isSelected!: boolean;\n  @Input() isDisabled!: boolean;\n  @Input() isMatched!: boolean;\n  @Input() isExpanded!: boolean;\n  @Input() isLeaf!: boolean;\n\n  get canDraggable(): boolean | null {\n    return this.draggable && !this.isDisabled ? true : null;\n  }\n\n  get matchedValue(): string {\n    return this.isMatched ? this.searchValue : '';\n  }\n\n  get isSwitcherOpen(): boolean {\n    return this.isExpanded && !this.isLeaf;\n  }\n\n  get isSwitcherClose(): boolean {\n    return !this.isExpanded && !this.isLeaf;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Renderer2,\n  SimpleChange,\n  TemplateRef\n} from '@angular/core';\nimport { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';\n\nimport { NzFormatBeforeDropEvent, NzFormatEmitEvent, NzTreeBaseService, NzTreeNode, NzTreeNodeOptions } from 'ng-zorro-antd/core/tree';\nimport { BooleanInput } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { fromEvent, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'nz-tree-node',\n  exportAs: 'nzTreeNode',\n  template: `\n    <nz-tree-indent [nzTreeLevel]=\"nzTreeNode.level\" [nzSelectMode]=\"nzSelectMode\" [nzIsStart]=\"isStart\" [nzIsEnd]=\"isEnd\"></nz-tree-indent>\n    <nz-tree-node-switcher\n      *ngIf=\"nzShowExpand\"\n      [nzShowExpand]=\"nzShowExpand\"\n      [nzShowLine]=\"nzShowLine\"\n      [nzExpandedIcon]=\"nzExpandedIcon\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [context]=\"nzTreeNode\"\n      [isLeaf]=\"isLeaf\"\n      [isExpanded]=\"isExpanded\"\n      [isLoading]=\"isLoading\"\n      (click)=\"clickExpand($event)\"\n    ></nz-tree-node-switcher>\n    <nz-tree-node-checkbox\n      *ngIf=\"nzCheckable\"\n      (click)=\"clickCheckBox($event)\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [isChecked]=\"isChecked\"\n      [isHalfChecked]=\"isHalfChecked\"\n      [isDisabled]=\"isDisabled\"\n      [isDisableCheckbox]=\"isDisableCheckbox\"\n    ></nz-tree-node-checkbox>\n    <nz-tree-node-title\n      [icon]=\"icon\"\n      [title]=\"title\"\n      [isLoading]=\"isLoading\"\n      [isSelected]=\"isSelected\"\n      [isDisabled]=\"isDisabled\"\n      [isMatched]=\"isMatched\"\n      [isExpanded]=\"isExpanded\"\n      [isLeaf]=\"isLeaf\"\n      [searchValue]=\"nzSearchValue\"\n      [treeTemplate]=\"nzTreeTemplate\"\n      [draggable]=\"nzDraggable\"\n      [showIcon]=\"nzShowIcon\"\n      [selectMode]=\"nzSelectMode\"\n      [context]=\"nzTreeNode\"\n      (dblclick)=\"dblClick($event)\"\n      (click)=\"clickSelect($event)\"\n      (contextmenu)=\"contextMenu($event)\"\n    ></nz-tree-node-title>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  host: {\n    '[class.ant-select-tree-treenode]': `nzSelectMode`,\n    '[class.ant-select-tree-treenode-disabled]': `nzSelectMode && isDisabled`,\n    '[class.ant-select-tree-treenode-switcher-open]': `nzSelectMode && isSwitcherOpen`,\n    '[class.ant-select-tree-treenode-switcher-close]': `nzSelectMode && isSwitcherClose`,\n    '[class.ant-select-tree-treenode-checkbox-checked]': `nzSelectMode && isChecked`,\n    '[class.ant-select-tree-treenode-checkbox-indeterminate]': `nzSelectMode && isHalfChecked`,\n    '[class.ant-select-tree-treenode-selected]': `nzSelectMode && isSelected`,\n    '[class.ant-select-tree-treenode-loading]': `nzSelectMode && isLoading`,\n    '[class.ant-tree-treenode]': `!nzSelectMode`,\n    '[class.ant-tree-treenode-disabled]': `!nzSelectMode && isDisabled`,\n    '[class.ant-tree-treenode-switcher-open]': `!nzSelectMode && isSwitcherOpen`,\n    '[class.ant-tree-treenode-switcher-close]': `!nzSelectMode && isSwitcherClose`,\n    '[class.ant-tree-treenode-checkbox-checked]': `!nzSelectMode && isChecked`,\n    '[class.ant-tree-treenode-checkbox-indeterminate]': `!nzSelectMode && isHalfChecked`,\n    '[class.ant-tree-treenode-selected]': `!nzSelectMode && isSelected`,\n    '[class.ant-tree-treenode-loading]': `!nzSelectMode && isLoading`,\n    '[style.display]': 'displayStyle',\n    '(mousedown)': 'onMousedown($event)'\n  }\n})\nexport class NzTreeNodeComponent implements OnInit, OnChanges, OnDestroy {\n  static ngAcceptInputType_nzShowLine: BooleanInput;\n  static ngAcceptInputType_nzShowExpand: BooleanInput;\n  static ngAcceptInputType_nzCheckable: BooleanInput;\n  static ngAcceptInputType_nzAsyncData: BooleanInput;\n  static ngAcceptInputType_nzHideUnMatched: BooleanInput;\n  static ngAcceptInputType_nzNoAnimation: BooleanInput;\n  static ngAcceptInputType_nzSelectMode: BooleanInput;\n  static ngAcceptInputType_nzShowIcon: BooleanInput;\n\n  /**\n   * for global property\n   */\n  @Input() icon: string = '';\n  @Input() title: string = '';\n  @Input() isLoading: boolean = false;\n  @Input() isSelected: boolean = false;\n  @Input() isDisabled: boolean = false;\n  @Input() isMatched: boolean = false;\n  @Input() isExpanded!: boolean;\n  @Input() isLeaf!: boolean;\n  @Input() isChecked?: boolean;\n  @Input() isHalfChecked?: boolean;\n  @Input() isDisableCheckbox?: boolean;\n  @Input() isSelectable?: boolean;\n  @Input() canHide?: boolean;\n  @Input() isStart?: boolean[];\n  @Input() isEnd?: boolean[];\n  @Input() nzTreeNode!: NzTreeNode;\n  @Input() @InputBoolean() nzShowLine?: boolean;\n  @Input() @InputBoolean() nzShowExpand?: boolean;\n  @Input() @InputBoolean() nzCheckable?: boolean;\n  @Input() @InputBoolean() nzAsyncData?: boolean;\n  @Input() @InputBoolean() nzHideUnMatched = false;\n  @Input() @InputBoolean() nzNoAnimation = false;\n  @Input() @InputBoolean() nzSelectMode = false;\n  @Input() @InputBoolean() nzShowIcon = false;\n  @Input() nzExpandedIcon?: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }>;\n  @Input() nzTreeTemplate: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }> | null = null;\n  @Input() nzBeforeDrop?: (confirm: NzFormatBeforeDropEvent) => Observable<boolean>;\n  @Input() nzSearchValue = '';\n  @Input() nzDraggable: boolean = false;\n  @Output() readonly nzClick = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzDblClick = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzContextMenu = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzCheckBoxChange = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzExpandChange = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragStart = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragEnter = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragOver = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragLeave = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDrop = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragEnd = new EventEmitter<NzFormatEmitEvent>();\n\n  /**\n   * drag var\n   */\n  destroy$ = new Subject();\n  dragPos = 2;\n  dragPosClass: { [key: string]: string } = {\n    '0': 'drag-over',\n    '1': 'drag-over-gap-bottom',\n    '-1': 'drag-over-gap-top'\n  };\n\n  /**\n   * default set\n   */\n  get displayStyle(): string {\n    // to hide unmatched nodes\n    return this.nzSearchValue && this.nzHideUnMatched && !this.isMatched && !this.isExpanded && this.canHide ? 'none' : '';\n  }\n\n  get isSwitcherOpen(): boolean {\n    return this.isExpanded && !this.isLeaf;\n  }\n\n  get isSwitcherClose(): boolean {\n    return !this.isExpanded && !this.isLeaf;\n  }\n\n  onMousedown(event: MouseEvent): void {\n    if (this.nzSelectMode) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * collapse node\n   * @param event\n   */\n  clickExpand(event: MouseEvent): void {\n    event.preventDefault();\n    if (!this.isLoading && !this.isLeaf) {\n      // set async state\n      if (this.nzAsyncData && this.nzTreeNode.children.length === 0 && !this.isExpanded) {\n        this.nzTreeNode.isLoading = true;\n      }\n      this.nzTreeNode.setExpanded(!this.isExpanded);\n    }\n    this.nzTreeService.setExpandedNodeList(this.nzTreeNode);\n    const eventNext = this.nzTreeService.formatEvent('expand', this.nzTreeNode, event);\n    this.nzExpandChange.emit(eventNext);\n  }\n\n  clickSelect(event: MouseEvent): void {\n    event.preventDefault();\n    if (this.isSelectable && !this.isDisabled) {\n      this.nzTreeNode.isSelected = !this.nzTreeNode.isSelected;\n    }\n    this.nzTreeService.setSelectedNodeList(this.nzTreeNode);\n    const eventNext = this.nzTreeService.formatEvent('click', this.nzTreeNode, event);\n    this.nzClick.emit(eventNext);\n  }\n\n  dblClick(event: MouseEvent): void {\n    event.preventDefault();\n    const eventNext = this.nzTreeService.formatEvent('dblclick', this.nzTreeNode, event);\n    this.nzDblClick.emit(eventNext);\n  }\n\n  contextMenu(event: MouseEvent): void {\n    event.preventDefault();\n    const eventNext = this.nzTreeService.formatEvent('contextmenu', this.nzTreeNode, event);\n    this.nzContextMenu.emit(eventNext);\n  }\n\n  /**\n   * check node\n   * @param event\n   */\n  clickCheckBox(event: MouseEvent): void {\n    event.preventDefault();\n    // return if node is disabled\n    if (this.isDisabled || this.isDisableCheckbox) {\n      return;\n    }\n    this.nzTreeNode.isChecked = !this.nzTreeNode.isChecked;\n    this.nzTreeNode.isHalfChecked = false;\n    this.nzTreeService.setCheckedNodeList(this.nzTreeNode);\n    const eventNext = this.nzTreeService.formatEvent('check', this.nzTreeNode, event);\n    this.nzCheckBoxChange.emit(eventNext);\n  }\n\n  clearDragClass(): void {\n    const dragClass = ['drag-over-gap-top', 'drag-over-gap-bottom', 'drag-over'];\n    dragClass.forEach(e => {\n      this.renderer.removeClass(this.elementRef.nativeElement, e);\n    });\n  }\n\n  /**\n   * drag event\n   * @param e\n   */\n  handleDragStart(e: DragEvent): void {\n    try {\n      // ie throw error\n      // firefox-need-it\n      e.dataTransfer!.setData('text/plain', this.nzTreeNode.key!);\n    } catch (error) {\n      // empty\n    }\n    this.nzTreeService.setSelectedNode(this.nzTreeNode);\n    const eventNext = this.nzTreeService.formatEvent('dragstart', this.nzTreeNode, e);\n    this.nzOnDragStart.emit(eventNext);\n  }\n\n  handleDragEnter(e: DragEvent): void {\n    e.preventDefault();\n    // reset position\n    this.dragPos = 2;\n    this.ngZone.run(() => {\n      const eventNext = this.nzTreeService.formatEvent('dragenter', this.nzTreeNode, e);\n      this.nzOnDragEnter.emit(eventNext);\n    });\n  }\n\n  handleDragOver(e: DragEvent): void {\n    e.preventDefault();\n    const dropPosition = this.nzTreeService.calcDropPosition(e);\n    if (this.dragPos !== dropPosition) {\n      this.clearDragClass();\n      this.dragPos = dropPosition;\n      // leaf node will pass\n      if (!(this.dragPos === 0 && this.isLeaf)) {\n        this.renderer.addClass(this.elementRef.nativeElement, this.dragPosClass[this.dragPos]);\n      }\n    }\n    const eventNext = this.nzTreeService.formatEvent('dragover', this.nzTreeNode, e);\n    this.nzOnDragOver.emit(eventNext);\n  }\n\n  handleDragLeave(e: DragEvent): void {\n    e.preventDefault();\n    this.clearDragClass();\n    const eventNext = this.nzTreeService.formatEvent('dragleave', this.nzTreeNode, e);\n    this.nzOnDragLeave.emit(eventNext);\n  }\n\n  handleDragDrop(e: DragEvent): void {\n    this.ngZone.run(() => {\n      this.clearDragClass();\n      const node = this.nzTreeService.getSelectedNode();\n      if (!node || (node && node.key === this.nzTreeNode.key) || (this.dragPos === 0 && this.isLeaf)) {\n        return;\n      }\n      // pass if node is leafNo\n      const dropEvent = this.nzTreeService.formatEvent('drop', this.nzTreeNode, e);\n      const dragEndEvent = this.nzTreeService.formatEvent('dragend', this.nzTreeNode, e);\n      if (this.nzBeforeDrop) {\n        this.nzBeforeDrop({\n          dragNode: this.nzTreeService.getSelectedNode()!,\n          node: this.nzTreeNode,\n          pos: this.dragPos\n        }).subscribe((canDrop: boolean) => {\n          if (canDrop) {\n            this.nzTreeService.dropAndApply(this.nzTreeNode, this.dragPos);\n          }\n          this.nzOnDrop.emit(dropEvent);\n          this.nzOnDragEnd.emit(dragEndEvent);\n        });\n      } else if (this.nzTreeNode) {\n        this.nzTreeService.dropAndApply(this.nzTreeNode, this.dragPos);\n        this.nzOnDrop.emit(dropEvent);\n      }\n    });\n  }\n\n  handleDragEnd(e: DragEvent): void {\n    e.preventDefault();\n    this.ngZone.run(() => {\n      // if user do not custom beforeDrop\n      if (!this.nzBeforeDrop) {\n        const eventNext = this.nzTreeService.formatEvent('dragend', this.nzTreeNode, e);\n        this.nzOnDragEnd.emit(eventNext);\n      }\n    });\n  }\n\n  /**\n   * Listening to dragging events.\n   */\n  handDragEvent(): void {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.nzDraggable) {\n        const nativeElement = this.elementRef.nativeElement;\n        this.destroy$ = new Subject();\n        fromEvent<DragEvent>(nativeElement, 'dragstart')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((e: DragEvent) => this.handleDragStart(e));\n        fromEvent<DragEvent>(nativeElement, 'dragenter')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((e: DragEvent) => this.handleDragEnter(e));\n        fromEvent<DragEvent>(nativeElement, 'dragover')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((e: DragEvent) => this.handleDragOver(e));\n        fromEvent<DragEvent>(nativeElement, 'dragleave')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((e: DragEvent) => this.handleDragLeave(e));\n        fromEvent<DragEvent>(nativeElement, 'drop')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((e: DragEvent) => this.handleDragDrop(e));\n        fromEvent<DragEvent>(nativeElement, 'dragend')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((e: DragEvent) => this.handleDragEnd(e));\n      } else {\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    });\n  }\n\n  markForCheck(): void {\n    this.cdr.markForCheck();\n  }\n\n  constructor(\n    public nzTreeService: NzTreeBaseService,\n    private ngZone: NgZone,\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    private cdr: ChangeDetectorRef,\n    @Host() @Optional() public noAnimation?: NzNoAnimationDirective\n  ) {}\n\n  ngOnInit(): void {\n    this.nzTreeNode.component = this;\n  }\n\n  ngOnChanges(changes: { [propertyName: string]: SimpleChange }): void {\n    const { nzDraggable } = changes;\n    if (nzDraggable) {\n      this.handDragEvent();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Injectable } from '@angular/core';\nimport { NzTreeBaseService } from 'ng-zorro-antd/core/tree';\n\n@Injectable()\nexport class NzTreeService extends NzTreeBaseService {\n  constructor() {\n    super();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  SimpleChange,\n  SkipSelf,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport { NzConfigKey, NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';\nimport {\n  flattenTreeData,\n  NzFormatBeforeDropEvent,\n  NzFormatEmitEvent,\n  NzTreeBase,\n  NzTreeBaseService,\n  NzTreeHigherOrderServiceToken,\n  NzTreeNode,\n  NzTreeNodeKey,\n  NzTreeNodeOptions\n} from 'ng-zorro-antd/core/tree';\nimport { BooleanInput, NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { NzTreeService } from './tree.service';\n\nexport function NzTreeServiceFactory(higherOrderService: NzTreeBaseService, treeService: NzTreeService): NzTreeBaseService {\n  return higherOrderService ? higherOrderService : treeService;\n}\n\nconst NZ_CONFIG_MODULE_NAME: NzConfigKey = 'tree';\n\n@Component({\n  selector: 'nz-tree',\n  exportAs: 'nzTree',\n  animations: [treeCollapseMotion],\n  template: `\n    <div role=\"tree\">\n      <input [ngStyle]=\"HIDDEN_STYLE\" />\n    </div>\n    <div class=\"ant-tree-list\" [class.ant-select-tree-list]=\"nzSelectMode\">\n      <div>\n        <cdk-virtual-scroll-viewport\n          *ngIf=\"nzVirtualHeight\"\n          [class.ant-select-tree-list-holder-inner]=\"nzSelectMode\"\n          [class.ant-tree-list-holder-inner]=\"!nzSelectMode\"\n          [itemSize]=\"nzVirtualItemSize\"\n          [minBufferPx]=\"nzVirtualMinBufferPx\"\n          [maxBufferPx]=\"nzVirtualMaxBufferPx\"\n          [style.height]=\"nzVirtualHeight\"\n        >\n          <ng-container *cdkVirtualFor=\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\">\n            <ng-template [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n          </ng-container>\n        </cdk-virtual-scroll-viewport>\n\n        <div\n          *ngIf=\"!nzVirtualHeight\"\n          [class.ant-select-tree-list-holder-inner]=\"nzSelectMode\"\n          [class.ant-tree-list-holder-inner]=\"!nzSelectMode\"\n          [@.disabled]=\"beforeInit || noAnimation?.nzNoAnimation\"\n          [nzNoAnimation]=\"noAnimation?.nzNoAnimation\"\n          [@treeCollapseMotion]=\"nzFlattenNodes.length\"\n        >\n          <ng-container *ngFor=\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\">\n            <ng-template [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n    <ng-template #nodeTemplate let-treeNode>\n      <nz-tree-node\n        [icon]=\"treeNode.icon\"\n        [title]=\"treeNode.title\"\n        [isLoading]=\"treeNode.isLoading\"\n        [isSelected]=\"treeNode.isSelected\"\n        [isDisabled]=\"treeNode.isDisabled\"\n        [isMatched]=\"treeNode.isMatched\"\n        [isExpanded]=\"treeNode.isExpanded\"\n        [isLeaf]=\"treeNode.isLeaf\"\n        [isStart]=\"treeNode.isStart\"\n        [isEnd]=\"treeNode.isEnd\"\n        [isChecked]=\"treeNode.isChecked\"\n        [isHalfChecked]=\"treeNode.isHalfChecked\"\n        [isDisableCheckbox]=\"treeNode.isDisableCheckbox\"\n        [isSelectable]=\"treeNode.isSelectable\"\n        [canHide]=\"treeNode.canHide\"\n        [nzTreeNode]=\"treeNode\"\n        [nzSelectMode]=\"nzSelectMode\"\n        [nzShowLine]=\"nzShowLine\"\n        [nzExpandedIcon]=\"nzExpandedIcon\"\n        [nzDraggable]=\"nzDraggable\"\n        [nzCheckable]=\"nzCheckable\"\n        [nzShowExpand]=\"nzShowExpand\"\n        [nzAsyncData]=\"nzAsyncData\"\n        [nzSearchValue]=\"nzSearchValue\"\n        [nzHideUnMatched]=\"nzHideUnMatched\"\n        [nzBeforeDrop]=\"nzBeforeDrop\"\n        [nzShowIcon]=\"nzShowIcon\"\n        [nzTreeTemplate]=\"nzTreeTemplate || nzTreeTemplateChild\"\n        (nzExpandChange)=\"eventTriggerChanged($event)\"\n        (nzClick)=\"eventTriggerChanged($event)\"\n        (nzDblClick)=\"eventTriggerChanged($event)\"\n        (nzContextMenu)=\"eventTriggerChanged($event)\"\n        (nzCheckBoxChange)=\"eventTriggerChanged($event)\"\n        (nzOnDragStart)=\"eventTriggerChanged($event)\"\n        (nzOnDragEnter)=\"eventTriggerChanged($event)\"\n        (nzOnDragOver)=\"eventTriggerChanged($event)\"\n        (nzOnDragLeave)=\"eventTriggerChanged($event)\"\n        (nzOnDragEnd)=\"eventTriggerChanged($event)\"\n        (nzOnDrop)=\"eventTriggerChanged($event)\"\n      ></nz-tree-node>\n    </ng-template>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    NzTreeService,\n    {\n      provide: NzTreeBaseService,\n      useFactory: NzTreeServiceFactory,\n      deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n    },\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NzTreeComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.ant-select-tree]': `nzSelectMode`,\n    '[class.ant-select-tree-show-line]': `nzSelectMode && nzShowLine`,\n    '[class.ant-select-tree-icon-hide]': `nzSelectMode && !nzShowIcon`,\n    '[class.ant-select-tree-block-node]': `nzSelectMode && nzBlockNode`,\n    '[class.ant-tree]': `!nzSelectMode`,\n    '[class.ant-tree-show-line]': `!nzSelectMode && nzShowLine`,\n    '[class.ant-tree-icon-hide]': `!nzSelectMode && !nzShowIcon`,\n    '[class.ant-tree-block-node]': `!nzSelectMode && nzBlockNode`,\n    '[class.draggable-tree]': `nzDraggable`\n  }\n})\nexport class NzTreeComponent extends NzTreeBase implements OnInit, OnDestroy, ControlValueAccessor, OnChanges, AfterViewInit {\n  readonly _nzModuleName: NzConfigKey = NZ_CONFIG_MODULE_NAME;\n\n  static ngAcceptInputType_nzShowIcon: BooleanInput;\n  static ngAcceptInputType_nzHideUnMatched: BooleanInput;\n  static ngAcceptInputType_nzBlockNode: BooleanInput;\n  static ngAcceptInputType_nzExpandAll: BooleanInput;\n  static ngAcceptInputType_nzSelectMode: BooleanInput;\n  static ngAcceptInputType_nzCheckStrictly: BooleanInput;\n  static ngAcceptInputType_nzShowExpand: BooleanInput;\n  static ngAcceptInputType_nzShowLine: BooleanInput;\n  static ngAcceptInputType_nzCheckable: BooleanInput;\n  static ngAcceptInputType_nzAsyncData: BooleanInput;\n  static ngAcceptInputType_nzDraggable: BooleanInput;\n  static ngAcceptInputType_nzMultiple: BooleanInput;\n\n  @Input() @InputBoolean() @WithConfig() nzShowIcon: boolean = false;\n  @Input() @InputBoolean() @WithConfig() nzHideUnMatched: boolean = false;\n  @Input() @InputBoolean() @WithConfig() nzBlockNode: boolean = false;\n  @Input() @InputBoolean() nzExpandAll = false;\n  @Input() @InputBoolean() nzSelectMode = false;\n  @Input() @InputBoolean() nzCheckStrictly = false;\n  @Input() @InputBoolean() nzShowExpand: boolean = true;\n  @Input() @InputBoolean() nzShowLine = false;\n  @Input() @InputBoolean() nzCheckable = false;\n  @Input() @InputBoolean() nzAsyncData = false;\n  @Input() @InputBoolean() nzDraggable: boolean = false;\n  @Input() @InputBoolean() nzMultiple = false;\n  @Input() nzExpandedIcon?: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }>;\n  @Input() nzVirtualItemSize = 28;\n  @Input() nzVirtualMaxBufferPx = 500;\n  @Input() nzVirtualMinBufferPx = 28;\n  @Input() nzVirtualHeight: string | null = null;\n  @Input() nzTreeTemplate?: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }>;\n  @Input() nzBeforeDrop?: (confirm: NzFormatBeforeDropEvent) => Observable<boolean>;\n  @Input() nzData: NzTreeNodeOptions[] | NzTreeNode[] = [];\n  @Input() nzExpandedKeys: NzTreeNodeKey[] = [];\n  @Input() nzSelectedKeys: NzTreeNodeKey[] = [];\n  @Input() nzCheckedKeys: NzTreeNodeKey[] = [];\n  @Input() nzSearchValue: string = '';\n  @Input() nzSearchFunc?: (node: NzTreeNodeOptions) => boolean;\n  @ContentChild('nzTreeTemplate', { static: true }) nzTreeTemplateChild!: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }>;\n  @ViewChild(CdkVirtualScrollViewport, { read: CdkVirtualScrollViewport }) cdkVirtualScrollViewport!: CdkVirtualScrollViewport;\n  nzFlattenNodes: NzTreeNode[] = [];\n  beforeInit = true;\n\n  @Output() readonly nzExpandedKeysChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() readonly nzSelectedKeysChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() readonly nzCheckedKeysChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() readonly nzSearchValueChange = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzClick = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzDblClick = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzContextMenu = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzCheckBoxChange = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzExpandChange = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragStart = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragEnter = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragOver = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragLeave = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDrop = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragEnd = new EventEmitter<NzFormatEmitEvent>();\n\n  HIDDEN_STYLE = {\n    width: 0,\n    height: 0,\n    display: 'flex',\n    overflow: 'hidden',\n    opacity: 0,\n    border: 0,\n    padding: 0,\n    margin: 0\n  };\n\n  destroy$ = new Subject();\n\n  onChange: (value: NzTreeNode[]) => void = () => null;\n  onTouched: () => void = () => null;\n\n  writeValue(value: NzTreeNode[]): void {\n    this.handleNzData(value);\n  }\n\n  registerOnChange(fn: (_: NzTreeNode[]) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Render all properties of nzTree\n   * @param changes: all changes from @Input\n   */\n  renderTreeProperties(changes: { [propertyName: string]: SimpleChange }): void {\n    let useDefaultExpandedKeys = false;\n    let expandAll = false;\n    const { nzData, nzExpandedKeys, nzSelectedKeys, nzCheckedKeys, nzCheckStrictly, nzExpandAll, nzMultiple, nzSearchValue } = changes;\n\n    if (nzExpandAll) {\n      useDefaultExpandedKeys = true;\n      expandAll = this.nzExpandAll;\n    }\n\n    if (nzMultiple) {\n      this.nzTreeService.isMultiple = this.nzMultiple;\n    }\n\n    if (nzCheckStrictly) {\n      this.nzTreeService.isCheckStrictly = this.nzCheckStrictly;\n    }\n\n    if (nzData) {\n      this.handleNzData(this.nzData);\n    }\n\n    if (nzCheckedKeys) {\n      this.handleCheckedKeys(this.nzCheckedKeys);\n    }\n\n    if (nzCheckStrictly) {\n      this.handleCheckedKeys(null);\n    }\n\n    if (nzExpandedKeys || nzExpandAll) {\n      useDefaultExpandedKeys = true;\n      this.handleExpandedKeys(expandAll || this.nzExpandedKeys);\n    }\n\n    if (nzSelectedKeys) {\n      this.handleSelectedKeys(this.nzSelectedKeys, this.nzMultiple);\n    }\n\n    if (nzSearchValue) {\n      if (!(nzSearchValue.firstChange && !this.nzSearchValue)) {\n        useDefaultExpandedKeys = false;\n        this.handleSearchValue(nzSearchValue.currentValue, this.nzSearchFunc);\n        this.nzSearchValueChange.emit(this.nzTreeService.formatEvent('search', null, null));\n      }\n    }\n\n    // flatten data\n    const currentExpandedKeys = this.getExpandedNodeList().map(v => v.key);\n    const newExpandedKeys = useDefaultExpandedKeys ? expandAll || this.nzExpandedKeys : currentExpandedKeys;\n    this.handleFlattenNodes(this.nzTreeService.rootNodes, newExpandedKeys);\n  }\n\n  trackByFlattenNode(_: number, node: NzTreeNode): string {\n    return node.key;\n  }\n  // Deal with properties\n  /**\n   * nzData\n   * @param value\n   */\n  handleNzData(value: NzSafeAny[]): void {\n    if (Array.isArray(value)) {\n      const data = this.coerceTreeNodes(value);\n      this.nzTreeService.initTree(data);\n    }\n  }\n\n  handleFlattenNodes(data: NzTreeNode[], expandKeys: NzTreeNodeKey[] | true = []): void {\n    this.nzTreeService.flattenTreeData(data, expandKeys);\n  }\n\n  handleCheckedKeys(keys: NzTreeNodeKey[] | null): void {\n    this.nzTreeService.conductCheck(keys, this.nzCheckStrictly);\n  }\n\n  handleExpandedKeys(keys: NzTreeNodeKey[] | true = []): void {\n    this.nzTreeService.conductExpandedKeys(keys);\n  }\n\n  handleSelectedKeys(keys: NzTreeNodeKey[], isMulti: boolean): void {\n    this.nzTreeService.conductSelectedKeys(keys, isMulti);\n  }\n\n  handleSearchValue(value: string, searchFunc?: (node: NzTreeNodeOptions) => boolean): void {\n    const dataList = flattenTreeData(this.nzTreeService.rootNodes, true).map(v => v.data);\n    const checkIfMatched = (node: NzTreeNode): boolean => {\n      if (searchFunc) {\n        return searchFunc(node.origin);\n      }\n      return !value || !node.title.toLowerCase().includes(value.toLowerCase()) ? false : true;\n    };\n    dataList.forEach(v => {\n      v.isMatched = checkIfMatched(v);\n      v.canHide = !v.isMatched;\n      if (!v.isMatched) {\n        v.setExpanded(false);\n        this.nzTreeService.setExpandedNodeList(v);\n      } else {\n        // expand\n        this.nzTreeService.expandNodeAllParentBySearch(v);\n      }\n      this.nzTreeService.setMatchedNodeList(v);\n    });\n  }\n\n  /**\n   * Handle emit event\n   * @param event\n   * handle each event\n   */\n  eventTriggerChanged(event: NzFormatEmitEvent): void {\n    const node = event.node!;\n    switch (event.eventName) {\n      case 'expand':\n        this.renderTree();\n        this.nzExpandChange.emit(event);\n        break;\n      case 'click':\n        this.nzClick.emit(event);\n        break;\n      case 'dblclick':\n        this.nzDblClick.emit(event);\n        break;\n      case 'contextmenu':\n        this.nzContextMenu.emit(event);\n        break;\n      case 'check':\n        // Render checked state with nodes' property `isChecked`\n        this.nzTreeService.setCheckedNodeList(node);\n        if (!this.nzCheckStrictly) {\n          this.nzTreeService.conduct(node);\n        }\n        // Cause check method will rerender list, so we need recover it and next the new event to user\n        const eventNext = this.nzTreeService.formatEvent('check', node, event.event!);\n        this.nzCheckBoxChange.emit(eventNext);\n        break;\n      case 'dragstart':\n        // if node is expanded\n        if (node.isExpanded) {\n          node.setExpanded(!node.isExpanded);\n          this.renderTree();\n        }\n        this.nzOnDragStart.emit(event);\n        break;\n      case 'dragenter':\n        const selectedNode = this.nzTreeService.getSelectedNode();\n        if (selectedNode && selectedNode.key !== node.key && !node.isExpanded && !node.isLeaf) {\n          node.setExpanded(true);\n          this.renderTree();\n        }\n        this.nzOnDragEnter.emit(event);\n        break;\n      case 'dragover':\n        this.nzOnDragOver.emit(event);\n        break;\n      case 'dragleave':\n        this.nzOnDragLeave.emit(event);\n        break;\n      case 'dragend':\n        this.nzOnDragEnd.emit(event);\n        break;\n      case 'drop':\n        this.renderTree();\n        this.nzOnDrop.emit(event);\n        break;\n    }\n  }\n\n  /**\n   * Click expand icon\n   */\n  renderTree(): void {\n    this.handleFlattenNodes(\n      this.nzTreeService.rootNodes,\n      this.getExpandedNodeList().map(v => v.key)\n    );\n    this.cdr.markForCheck();\n  }\n  // Handle emit event end\n\n  constructor(\n    nzTreeService: NzTreeBaseService,\n    public nzConfigService: NzConfigService,\n    private cdr: ChangeDetectorRef,\n    @Host() @Optional() public noAnimation?: NzNoAnimationDirective\n  ) {\n    super(nzTreeService);\n  }\n\n  ngOnInit(): void {\n    this.nzTreeService.flattenNodes$.pipe(takeUntil(this.destroy$)).subscribe(data => {\n      this.nzFlattenNodes = data;\n      this.cdr.markForCheck();\n    });\n  }\n\n  ngOnChanges(changes: { [propertyName: string]: SimpleChange }): void {\n    this.renderTreeProperties(changes);\n  }\n\n  ngAfterViewInit(): void {\n    this.beforeInit = false;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzHighlightModule } from 'ng-zorro-antd/core/highlight';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzTreeIndentComponent } from './tree-indent.component';\nimport { NzTreeNodeCheckboxComponent } from './tree-node-checkbox.component';\nimport { NzTreeNodeSwitcherComponent } from './tree-node-switcher.component';\nimport { NzTreeNodeTitleComponent } from './tree-node-title.component';\nimport { NzTreeNodeComponent } from './tree-node.component';\nimport { NzTreeComponent } from './tree.component';\n\n@NgModule({\n  imports: [CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule],\n  declarations: [\n    NzTreeComponent,\n    NzTreeNodeComponent,\n    NzTreeIndentComponent,\n    NzTreeNodeSwitcherComponent,\n    NzTreeNodeCheckboxComponent,\n    NzTreeNodeTitleComponent\n  ],\n  exports: [NzTreeComponent, NzTreeNodeComponent, NzTreeIndentComponent]\n})\nexport class NzTreeModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport * from './tree.module';\nexport * from './tree.component';\nexport * from './tree-node.component';\nexport * from './tree-indent.component';\nexport * from './tree.service';\nexport * from './tree-node-switcher.component';\nexport * from './tree-node-checkbox.component';\nexport * from './tree-node-title.component';\nexport { NzTreeNodeOptions, NzFormatEmitEvent, NzFormatBeforeDropEvent, NzTreeNode } from 'ng-zorro-antd/core/tree';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}