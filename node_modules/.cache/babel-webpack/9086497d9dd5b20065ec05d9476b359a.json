{"ast":null,"code":"import _classCallCheck from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Optional, Inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, mapTo } from 'rxjs/operators';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * User should provide an object implements this interface to set global configurations.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nvar NZ_CONFIG = new InjectionToken('nz-config');\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar isDefined = function isDefined(value) {\n  return value !== undefined;\n};\n\nvar ɵ0 = isDefined;\n\nvar NzConfigService = /*#__PURE__*/function () {\n  function NzConfigService(defaultConfig) {\n    _classCallCheck(this, NzConfigService);\n\n    this.configUpdated$ = new Subject();\n    this.config = defaultConfig || {};\n  }\n\n  _createClass(NzConfigService, [{\n    key: \"getConfigForComponent\",\n    value: function getConfigForComponent(componentName) {\n      return this.config[componentName];\n    }\n  }, {\n    key: \"getConfigChangeEventForComponent\",\n    value: function getConfigChangeEventForComponent(componentName) {\n      return this.configUpdated$.pipe(filter(function (n) {\n        return n === componentName;\n      }), mapTo(undefined));\n    }\n  }, {\n    key: \"set\",\n    value: function set(componentName, value) {\n      this.config[componentName] = Object.assign(Object.assign({}, this.config[componentName]), value);\n      this.configUpdated$.next(componentName);\n    }\n  }]);\n\n  return NzConfigService;\n}();\n\nNzConfigService.ɵfac = function NzConfigService_Factory(t) {\n  return new (t || NzConfigService)(ɵngcc0.ɵɵinject(NZ_CONFIG, 8));\n};\n\nNzConfigService.ɵprov = ɵɵdefineInjectable({\n  factory: function NzConfigService_Factory() {\n    return new NzConfigService(ɵɵinject(NZ_CONFIG, 8));\n  },\n  token: NzConfigService,\n  providedIn: \"root\"\n});\n\nNzConfigService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [NZ_CONFIG]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzConfigService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NZ_CONFIG]\n      }]\n    }];\n  }, null);\n})(); // tslint:disable:no-invalid-this\n\n/**\n * This decorator is used to decorate properties. If a property is decorated, it would try to load default value from\n * config.\n */\n// tslint:disable-next-line:typedef\n\n\nfunction WithConfig() {\n  return function ConfigDecorator(target, propName, originalDescriptor) {\n    var privatePropName = \"$$__assignedValue__\".concat(propName);\n    Object.defineProperty(target, privatePropName, {\n      configurable: true,\n      writable: true,\n      enumerable: false\n    });\n    return {\n      get: function get() {\n        var originalValue = (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.get) ? originalDescriptor.get.bind(this)() : this[privatePropName];\n        var assignedByUser = ((this.assignmentCount || {})[propName] || 0) > 1;\n\n        if (assignedByUser && isDefined(originalValue)) {\n          return originalValue;\n        }\n\n        var componentConfig = this.nzConfigService.getConfigForComponent(this._nzModuleName) || {};\n        var configValue = componentConfig[propName];\n        var ret = isDefined(configValue) ? configValue : originalValue;\n        return ret;\n      },\n      set: function set(value) {\n        // If the value is assigned, we consider the newly assigned value as 'assigned by user'.\n        this.assignmentCount = this.assignmentCount || {};\n        this.assignmentCount[propName] = (this.assignmentCount[propName] || 0) + 1;\n\n        if (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.set) {\n          originalDescriptor.set.bind(this)(value);\n        } else {\n          this[privatePropName] = value;\n        }\n      },\n      configurable: true,\n      enumerable: true\n    };\n  };\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NZ_CONFIG, NzConfigService, WithConfig, ɵ0 };","map":{"version":3,"sources":["../../components/core/config/config.ts","../../components/core/config/config.service.ts","../../components/core/config/public-api.ts","../../components/core/config/ng-zorro-antd-core-config.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { InjectionToken, TemplateRef, Type } from '@angular/core';\n\nimport { SafeUrl } from '@angular/platform-browser';\nimport { NzBreakpointEnum } from 'ng-zorro-antd/core/services';\nimport { NzSafeAny, NzShapeSCType, NzSizeDSType, NzSizeLDSType, NzSizeMDSType } from 'ng-zorro-antd/core/types';\n\nexport interface NzConfig {\n  affix?: AffixConfig;\n  select?: SelectConfig;\n  alert?: AlertConfig;\n  anchor?: AnchorConfig;\n  avatar?: AvatarConfig;\n  backTop?: BackTopConfig;\n  badge?: BadgeConfig;\n  button?: ButtonConfig;\n  card?: CardConfig;\n  carousel?: CarouselConfig;\n  cascader?: CascaderConfig;\n  codeEditor?: CodeEditorConfig;\n  collapse?: CollapseConfig;\n  collapsePanel?: CollapsePanelConfig;\n  datePicker?: DatePickerConfig;\n  descriptions?: DescriptionsConfig;\n  drawer?: DrawerConfig;\n  empty?: EmptyConfig;\n  form?: FormConfig;\n  icon?: IconConfig;\n  message?: MessageConfig;\n  modal?: ModalConfig;\n  notification?: NotificationConfig;\n  pageHeader?: PageHeaderConfig;\n  progress?: ProgressConfig;\n  rate?: RateConfig;\n  space?: SpaceConfig;\n  spin?: SpinConfig;\n  switch?: SwitchConfig;\n  table?: TableConfig;\n  tabs?: TabsConfig;\n  timePicker?: TimePickerConfig;\n  tree?: TreeConfig;\n  treeSelect?: TreeSelectConfig;\n  typography?: TypographyConfig;\n}\n\nexport interface SelectConfig {\n  nzBorderless?: boolean;\n  nzSuffixIcon?: TemplateRef<NzSafeAny> | string | null;\n}\n\nexport interface AffixConfig {\n  nzOffsetBottom?: number;\n  nzOffsetTop?: number;\n}\n\nexport interface AlertConfig {\n  nzCloseable?: boolean;\n  nzShowIcon?: boolean;\n}\n\nexport interface AvatarConfig {\n  nzShape?: NzShapeSCType;\n  nzSize?: NzSizeLDSType | number;\n}\n\nexport interface AnchorConfig {\n  nzBounds?: number;\n  nzOffsetBottom?: number;\n  nzOffsetTop?: number;\n  nzShowInkInFixed?: boolean;\n}\n\nexport interface BackTopConfig {\n  nzVisibilityHeight?: number;\n}\n\nexport interface BadgeConfig {\n  nzColor?: number;\n  nzOverflowCount?: number;\n  nzShowZero?: number;\n}\n\nexport interface ButtonConfig {\n  nzSize?: 'large' | 'default' | 'small';\n}\n\nexport interface CodeEditorConfig {\n  assetsRoot?: string | SafeUrl;\n  defaultEditorOption?: NzSafeAny;\n  useStaticLoading?: boolean;\n\n  onLoad?(): void;\n  onFirstEditorInit?(): void;\n  onInit?(): void;\n}\n\nexport interface CardConfig {\n  nzSize?: NzSizeDSType;\n  nzHoverable?: boolean;\n  nzBordered?: boolean;\n  nzBorderless?: boolean;\n}\n\nexport interface CarouselConfig {\n  nzAutoPlay?: boolean;\n  nzAutoPlaySpeed?: boolean;\n  nzDots?: boolean;\n  nzEffect?: 'scrollx' | 'fade' | string;\n  nzEnableSwipe?: boolean;\n  nzVertical?: boolean;\n}\n\nexport interface CascaderConfig {\n  nzSize?: string;\n}\n\nexport interface CollapseConfig {\n  nzAccordion?: boolean;\n  nzBordered?: boolean;\n  nzGhost?: boolean;\n}\n\nexport interface CollapsePanelConfig {\n  nzShowArrow?: boolean;\n}\n\nexport interface DatePickerConfig {\n  nzSeparator?: string;\n  nzSuffixIcon?: string | TemplateRef<NzSafeAny>;\n}\n\nexport interface DescriptionsConfig {\n  nzBorder?: boolean;\n  nzColumn?: { [key in NzBreakpointEnum]?: number } | number;\n  nzSize?: 'default' | 'middle' | 'small';\n  nzColon?: boolean;\n}\n\nexport interface DrawerConfig {\n  nzMask?: boolean;\n  nzMaskClosable?: boolean;\n  nzCloseOnNavigation?: boolean;\n}\n\nexport interface EmptyConfig {\n  nzDefaultEmptyContent?: Type<NzSafeAny> | TemplateRef<string> | string | undefined;\n}\n\nexport interface FormConfig {\n  nzNoColon?: boolean;\n  nzAutoTips?: Record<string, Record<string, string>>;\n}\n\nexport interface IconConfig {\n  nzTheme?: 'fill' | 'outline' | 'twotone';\n  nzTwotoneColor?: string;\n}\n\nexport interface MessageConfig {\n  nzAnimate?: boolean;\n  nzDuration?: number;\n  nzMaxStack?: number;\n  nzPauseOnHover?: boolean;\n  nzTop?: number | string;\n}\n\nexport interface ModalConfig {\n  nzMask?: boolean;\n  nzMaskClosable?: boolean;\n  nzCloseOnNavigation?: boolean;\n}\n\nexport interface NotificationConfig extends MessageConfig {\n  nzTop?: string | number;\n  nzBottom?: string | number;\n  nzPlacement?: 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n}\n\nexport interface PageHeaderConfig {\n  nzGhost: boolean;\n}\n\nexport interface ProgressConfig {\n  nzGapDegree?: number;\n  nzGapPosition?: 'top' | 'right' | 'bottom' | 'left';\n  nzShowInfo?: boolean;\n  nzStrokeSwitch?: number;\n  nzStrokeWidth?: number;\n  nzSize?: 'default' | 'small';\n  nzStrokeLinecap?: 'round' | 'square';\n  nzStrokeColor?: string;\n}\n\nexport interface RateConfig {\n  nzAllowClear?: boolean;\n  nzAllowHalf?: boolean;\n}\n\nexport interface SpaceConfig {\n  nzSize?: 'small' | 'middle' | 'large' | number;\n}\n\nexport interface SpinConfig {\n  nzIndicator?: TemplateRef<NzSafeAny>;\n}\n\nexport interface SwitchConfig {\n  nzSize: NzSizeDSType;\n}\n\nexport interface TableConfig {\n  nzBordered?: boolean;\n  nzSize?: NzSizeMDSType;\n  nzShowQuickJumper?: boolean;\n  nzLoadingIndicator?: TemplateRef<NzSafeAny>;\n  nzShowSizeChanger?: boolean;\n  nzSimple?: boolean;\n  nzHideOnSinglePage?: boolean;\n}\n\nexport interface TabsConfig {\n  nzAnimated?:\n    | boolean\n    | {\n        inkBar: boolean;\n        tabPane: boolean;\n      };\n  nzSize?: NzSizeLDSType;\n  nzType?: 'line' | 'card';\n  nzTabBarGutter?: number;\n  nzShowPagination?: boolean;\n}\n\nexport interface TimePickerConfig {\n  nzAllowEmpty?: boolean;\n  nzClearText?: string;\n  nzFormat?: string;\n  nzHourStep?: number;\n  nzMinuteStep?: number;\n  nzSecondStep?: number;\n  nzPopupClassName?: string;\n  nzUse12Hours?: string;\n  nzSuffixIcon?: string | TemplateRef<NzSafeAny>;\n}\n\nexport interface TreeConfig {\n  nzBlockNode?: boolean;\n  nzShowIcon?: boolean;\n  nzHideUnMatched?: boolean;\n}\n\nexport interface TreeSelectConfig {\n  nzShowIcon?: string;\n  nzShowLine?: boolean;\n  nzDropdownMatchSelectWidth?: boolean;\n  nzHideUnMatched?: boolean;\n  nzSize?: 'large' | 'small' | 'default';\n}\n\nexport interface TypographyConfig {\n  nzEllipsisRows?: number;\n}\n\nexport type NzConfigKey = keyof NzConfig;\n\n/**\n * User should provide an object implements this interface to set global configurations.\n */\nexport const NZ_CONFIG = new InjectionToken<NzConfig>('nz-config');\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { Observable, Subject } from 'rxjs';\n\nimport { filter, mapTo } from 'rxjs/operators';\n\nimport { NzConfig, NzConfigKey, NZ_CONFIG } from './config';\n\nconst isDefined = function (value?: NzSafeAny): boolean {\n  return value !== undefined;\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NzConfigService {\n  private configUpdated$ = new Subject<keyof NzConfig>();\n\n  /** Global config holding property. */\n  private config: NzConfig;\n\n  constructor(@Optional() @Inject(NZ_CONFIG) defaultConfig?: NzConfig) {\n    this.config = defaultConfig || {};\n  }\n\n  getConfigForComponent<T extends NzConfigKey>(componentName: T): NzConfig[T] {\n    return this.config[componentName];\n  }\n\n  getConfigChangeEventForComponent(componentName: NzConfigKey): Observable<void> {\n    return this.configUpdated$.pipe(\n      filter(n => n === componentName),\n      mapTo(undefined)\n    );\n  }\n\n  set<T extends NzConfigKey>(componentName: T, value: NzConfig[T]): void {\n    this.config[componentName] = { ...this.config[componentName], ...value };\n    this.configUpdated$.next(componentName);\n  }\n}\n\n// tslint:disable:no-invalid-this\n\n/**\n * This decorator is used to decorate properties. If a property is decorated, it would try to load default value from\n * config.\n */\n// tslint:disable-next-line:typedef\nexport function WithConfig<T>() {\n  return function ConfigDecorator(target: NzSafeAny, propName: NzSafeAny, originalDescriptor?: TypedPropertyDescriptor<T>): NzSafeAny {\n    const privatePropName = `$$__assignedValue__${propName}`;\n\n    Object.defineProperty(target, privatePropName, {\n      configurable: true,\n      writable: true,\n      enumerable: false\n    });\n\n    return {\n      get(): T | undefined {\n        const originalValue = originalDescriptor?.get ? originalDescriptor.get.bind(this)() : this[privatePropName];\n        const assignedByUser = ((this.assignmentCount || {})[propName] || 0) > 1;\n\n        if (assignedByUser && isDefined(originalValue)) {\n          return originalValue;\n        }\n\n        const componentConfig = this.nzConfigService.getConfigForComponent(this._nzModuleName) || {};\n        const configValue = componentConfig[propName];\n        const ret = isDefined(configValue) ? configValue : originalValue;\n\n        return ret;\n      },\n      set(value?: T): void {\n        // If the value is assigned, we consider the newly assigned value as 'assigned by user'.\n        this.assignmentCount = this.assignmentCount || {};\n        this.assignmentCount[propName] = (this.assignmentCount[propName] || 0) + 1;\n\n        if (originalDescriptor?.set) {\n          originalDescriptor.set.bind(this)(value);\n        } else {\n          this[privatePropName] = value;\n        }\n      },\n      configurable: true,\n      enumerable: true\n    };\n  };\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport * from './config.service';\nexport * from './config';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}