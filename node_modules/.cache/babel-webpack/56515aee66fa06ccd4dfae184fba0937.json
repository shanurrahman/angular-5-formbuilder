{"ast":null,"code":"import _toConsumableArray from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { InjectionToken, ɵɵdefineInjectable, ɵɵinject, RendererFactory2, Injectable, Optional, Inject, Self, Directive, ElementRef, Renderer2, Input, NgModule } from '@angular/core';\nimport { __decorate, __metadata } from 'tslib';\nimport { IconService, IconDirective } from '@ant-design/icons-angular';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { DOCUMENT } from '@angular/common';\nimport { HttpBackend } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { NzConfigService } from 'ng-zorro-antd/core/config';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { Subject } from 'rxjs';\nimport { BarsOutline, CalendarOutline, CaretUpFill, CaretUpOutline, CaretDownFill, CaretDownOutline, CheckCircleFill, CheckCircleOutline, CheckOutline, ClockCircleOutline, CloseCircleOutline, CloseCircleFill, CloseOutline, CopyOutline, DoubleLeftOutline, DoubleRightOutline, DownOutline, EditOutline, EllipsisOutline, ExclamationCircleFill, ExclamationCircleOutline, EyeOutline, FileFill, FileOutline, FilterFill, InfoCircleFill, InfoCircleOutline, LeftOutline, LoadingOutline, PaperClipOutline, QuestionCircleOutline, RightOutline, StarFill, SearchOutline, UploadOutline, VerticalAlignTopOutline, UpOutline, SwapRightOutline } from '@ant-design/icons-angular/icons';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nimport * as ɵngcc2 from 'ng-zorro-antd/core/config';\nimport * as ɵngcc3 from '@angular/common/http';\nvar NZ_ICONS_USED_BY_ZORRO = [BarsOutline, CalendarOutline, CaretUpFill, CaretUpOutline, CaretDownFill, CaretDownOutline, CheckCircleFill, CheckCircleOutline, CheckOutline, ClockCircleOutline, CloseCircleOutline, CloseCircleFill, CloseOutline, CopyOutline, DoubleLeftOutline, DoubleRightOutline, DownOutline, EditOutline, EllipsisOutline, ExclamationCircleFill, ExclamationCircleOutline, EyeOutline, FileFill, FileOutline, FilterFill, InfoCircleFill, InfoCircleOutline, LeftOutline, LoadingOutline, PaperClipOutline, QuestionCircleOutline, RightOutline, StarFill, SearchOutline, StarFill, UploadOutline, VerticalAlignTopOutline, UpOutline, SwapRightOutline];\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar NZ_ICONS = new InjectionToken('nz_icons');\nvar NZ_ICON_DEFAULT_TWOTONE_COLOR = new InjectionToken('nz_icon_default_twotone_color');\nvar DEFAULT_TWOTONE_COLOR = '#1890ff';\n/**\n * It should be a global singleton, otherwise registered icons could not be found.\n */\n\nvar NzIconService = /*#__PURE__*/function (_IconService) {\n  _inherits(NzIconService, _IconService);\n\n  var _super = _createSuper(NzIconService);\n\n  function NzIconService(rendererFactory, sanitizer, nzConfigService, handler, _document, icons) {\n    var _this2;\n\n    var _this;\n\n    _classCallCheck(this, NzIconService);\n\n    _this = _super.call(this, rendererFactory, handler, _document, sanitizer);\n    _this.nzConfigService = nzConfigService;\n    _this.configUpdated$ = new Subject();\n    _this.iconfontCache = new Set();\n\n    _this.onConfigChange();\n\n    (_this2 = _this).addIcon.apply(_this2, NZ_ICONS_USED_BY_ZORRO.concat(_toConsumableArray(icons || [])));\n\n    _this.configDefaultTwotoneColor();\n\n    _this.configDefaultTheme();\n\n    return _this;\n  }\n\n  _createClass(NzIconService, [{\n    key: \"normalizeSvgElement\",\n    value: function normalizeSvgElement(svg) {\n      if (!svg.getAttribute('viewBox')) {\n        this._renderer.setAttribute(svg, 'viewBox', '0 0 1024 1024');\n      }\n\n      if (!svg.getAttribute('width') || !svg.getAttribute('height')) {\n        this._renderer.setAttribute(svg, 'width', '1em');\n\n        this._renderer.setAttribute(svg, 'height', '1em');\n      }\n\n      if (!svg.getAttribute('fill')) {\n        this._renderer.setAttribute(svg, 'fill', 'currentColor');\n      }\n    }\n  }, {\n    key: \"fetchFromIconfont\",\n    value: function fetchFromIconfont(opt) {\n      var scriptUrl = opt.scriptUrl;\n\n      if (this._document && !this.iconfontCache.has(scriptUrl)) {\n        var script = this._renderer.createElement('script');\n\n        this._renderer.setAttribute(script, 'src', scriptUrl);\n\n        this._renderer.setAttribute(script, 'data-namespace', scriptUrl.replace(/^(https?|http):/g, ''));\n\n        this._renderer.appendChild(this._document.body, script);\n\n        this.iconfontCache.add(scriptUrl);\n      }\n    }\n  }, {\n    key: \"createIconfontIcon\",\n    value: function createIconfontIcon(type) {\n      return this._createSVGElementFromString(\"<svg><use xlink:href=\\\"\".concat(type, \"\\\"></svg>\"));\n    }\n  }, {\n    key: \"onConfigChange\",\n    value: function onConfigChange() {\n      var _this3 = this;\n\n      this.nzConfigService.getConfigChangeEventForComponent('icon').subscribe(function () {\n        _this3.configDefaultTwotoneColor();\n\n        _this3.configDefaultTheme();\n\n        _this3.configUpdated$.next();\n      });\n    }\n  }, {\n    key: \"configDefaultTheme\",\n    value: function configDefaultTheme() {\n      var iconConfig = this.getConfig();\n      this.defaultTheme = iconConfig.nzTheme || 'outline';\n    }\n  }, {\n    key: \"configDefaultTwotoneColor\",\n    value: function configDefaultTwotoneColor() {\n      var iconConfig = this.getConfig();\n      var defaultTwotoneColor = iconConfig.nzTwotoneColor || DEFAULT_TWOTONE_COLOR;\n      var primaryColor = DEFAULT_TWOTONE_COLOR;\n\n      if (defaultTwotoneColor) {\n        if (defaultTwotoneColor.startsWith('#')) {\n          primaryColor = defaultTwotoneColor;\n        } else {\n          warn('Twotone color must be a hex color!');\n        }\n      }\n\n      this.twoToneColor = {\n        primaryColor: primaryColor\n      };\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.nzConfigService.getConfigForComponent('icon') || {};\n    }\n  }]);\n\n  return NzIconService;\n}(IconService);\n\nNzIconService.ɵfac = function NzIconService_Factory(t) {\n  return new (t || NzIconService)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2), ɵngcc0.ɵɵinject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵinject(ɵngcc2.NzConfigService), ɵngcc0.ɵɵinject(ɵngcc3.HttpBackend, 8), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(NZ_ICONS, 8));\n};\n\nNzIconService.ɵprov = ɵɵdefineInjectable({\n  factory: function NzIconService_Factory() {\n    return new NzIconService(ɵɵinject(RendererFactory2), ɵɵinject(DomSanitizer), ɵɵinject(NzConfigService), ɵɵinject(HttpBackend, 8), ɵɵinject(DOCUMENT, 8), ɵɵinject(NZ_ICONS, 8));\n  },\n  token: NzIconService,\n  providedIn: \"root\"\n});\n\nNzIconService.ctorParameters = function () {\n  return [{\n    type: RendererFactory2\n  }, {\n    type: DomSanitizer\n  }, {\n    type: NzConfigService\n  }, {\n    type: HttpBackend,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Array,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [NZ_ICONS]\n    }]\n  }];\n};\n\nvar NZ_ICONS_PATCH = new InjectionToken('nz_icons_patch');\n\nvar NzIconPatchService = /*#__PURE__*/function () {\n  function NzIconPatchService(extraIcons, rootIconService) {\n    _classCallCheck(this, NzIconPatchService);\n\n    this.extraIcons = extraIcons;\n    this.rootIconService = rootIconService;\n    this.patched = false;\n  }\n\n  _createClass(NzIconPatchService, [{\n    key: \"doPatch\",\n    value: function doPatch() {\n      var _this4 = this;\n\n      if (this.patched) {\n        return;\n      }\n\n      this.extraIcons.forEach(function (iconDefinition) {\n        return _this4.rootIconService.addIcon(iconDefinition);\n      });\n      this.patched = true;\n    }\n  }]);\n\n  return NzIconPatchService;\n}();\n\nNzIconPatchService.ɵfac = function NzIconPatchService_Factory(t) {\n  return new (t || NzIconPatchService)(ɵngcc0.ɵɵinject(NZ_ICONS_PATCH, 2), ɵngcc0.ɵɵinject(NzIconService));\n};\n\nNzIconPatchService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NzIconPatchService,\n  factory: NzIconPatchService.ɵfac\n});\n\nNzIconPatchService.ctorParameters = function () {\n  return [{\n    type: Array,\n    decorators: [{\n      type: Self\n    }, {\n      type: Inject,\n      args: [NZ_ICONS_PATCH]\n    }]\n  }, {\n    type: NzIconService\n  }];\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzIconDirective = /*#__PURE__*/function (_IconDirective) {\n  _inherits(NzIconDirective, _IconDirective);\n\n  var _super2 = _createSuper(NzIconDirective);\n\n  function NzIconDirective(elementRef, iconService, renderer, iconPatch) {\n    var _this5;\n\n    _classCallCheck(this, NzIconDirective);\n\n    _this5 = _super2.call(this, iconService, elementRef, renderer);\n    _this5.iconService = iconService;\n    _this5.renderer = renderer;\n    _this5.cacheClassName = null;\n    _this5.nzRotate = 0;\n    _this5.spin = false;\n\n    if (iconPatch) {\n      iconPatch.doPatch();\n    }\n\n    _this5.el = elementRef.nativeElement;\n    return _this5;\n  }\n\n  _createClass(NzIconDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzType = changes.nzType,\n          nzTwotoneColor = changes.nzTwotoneColor,\n          nzSpin = changes.nzSpin,\n          nzTheme = changes.nzTheme,\n          nzRotate = changes.nzRotate;\n\n      if (nzType || nzTwotoneColor || nzSpin || nzTheme) {\n        this.changeIcon2();\n      } else if (nzRotate) {\n        this.handleRotate(this.el.firstChild);\n      } else {\n        this._setSVGElement(this.iconService.createIconfontIcon(\"#\".concat(this.iconfont)));\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.renderer.setAttribute(this.el, 'class', \"anticon \".concat(this.el.className).trim());\n    }\n    /**\n     * If custom content is provided, try to normalize SVG elements.\n     */\n\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      if (!this.type) {\n        var children = this.el.children;\n        var length = children.length;\n\n        if (!this.type && children.length) {\n          while (length--) {\n            var child = children[length];\n\n            if (child.tagName.toLowerCase() === 'svg') {\n              this.iconService.normalizeSvgElement(child);\n            }\n          }\n        }\n      }\n    }\n    /**\n     * Replacement of `changeIcon` for more modifications.\n     */\n\n  }, {\n    key: \"changeIcon2\",\n    value: function changeIcon2() {\n      var _this6 = this;\n\n      this.setClassName();\n\n      this._changeIcon().then(function (svgOrRemove) {\n        if (svgOrRemove) {\n          _this6.setSVGData(svgOrRemove);\n\n          _this6.handleSpin(svgOrRemove);\n\n          _this6.handleRotate(svgOrRemove);\n        }\n      });\n    }\n  }, {\n    key: \"handleSpin\",\n    value: function handleSpin(svg) {\n      if (this.spin || this.type === 'loading') {\n        this.renderer.addClass(svg, 'anticon-spin');\n      } else {\n        this.renderer.removeClass(svg, 'anticon-spin');\n      }\n    }\n  }, {\n    key: \"handleRotate\",\n    value: function handleRotate(svg) {\n      if (this.nzRotate) {\n        this.renderer.setAttribute(svg, 'style', \"transform: rotate(\".concat(this.nzRotate, \"deg)\"));\n      } else {\n        this.renderer.removeAttribute(svg, 'style');\n      }\n    }\n  }, {\n    key: \"setClassName\",\n    value: function setClassName() {\n      if (this.cacheClassName) {\n        this.renderer.removeClass(this.el, this.cacheClassName);\n      }\n\n      this.cacheClassName = \"anticon-\".concat(this.type);\n      this.renderer.addClass(this.el, this.cacheClassName);\n    }\n  }, {\n    key: \"setSVGData\",\n    value: function setSVGData(svg) {\n      this.renderer.setAttribute(svg, 'data-icon', this.type);\n      this.renderer.setAttribute(svg, 'aria-hidden', 'true');\n    }\n  }, {\n    key: \"nzSpin\",\n    set: function set(value) {\n      this.spin = value;\n    }\n  }, {\n    key: \"nzType\",\n    set: function set(value) {\n      this.type = value;\n    }\n  }, {\n    key: \"nzTheme\",\n    set: function set(value) {\n      this.theme = value;\n    }\n  }, {\n    key: \"nzTwotoneColor\",\n    set: function set(value) {\n      this.twoToneColor = value;\n    }\n  }, {\n    key: \"nzIconfont\",\n    set: function set(value) {\n      this.iconfont = value;\n    }\n  }]);\n\n  return NzIconDirective;\n}(IconDirective);\n\nNzIconDirective.ɵfac = function NzIconDirective_Factory(t) {\n  return new (t || NzIconDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NzIconService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(NzIconPatchService, 8));\n};\n\nNzIconDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NzIconDirective,\n  selectors: [[\"\", \"nz-icon\", \"\"]],\n  hostVars: 2,\n  hostBindings: function NzIconDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"anticon\", true);\n    }\n  },\n  inputs: {\n    nzRotate: \"nzRotate\",\n    nzSpin: \"nzSpin\",\n    nzType: \"nzType\",\n    nzTheme: \"nzTheme\",\n    nzTwotoneColor: \"nzTwotoneColor\",\n    nzIconfont: \"nzIconfont\"\n  },\n  exportAs: [\"nzIcon\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nNzIconDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NzIconService\n  }, {\n    type: Renderer2\n  }, {\n    type: NzIconPatchService,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nNzIconDirective.propDecorators = {\n  nzSpin: [{\n    type: Input\n  }],\n  nzRotate: [{\n    type: Input\n  }],\n  nzType: [{\n    type: Input\n  }],\n  nzTheme: [{\n    type: Input\n  }],\n  nzTwotoneColor: [{\n    type: Input\n  }],\n  nzIconfont: [{\n    type: Input\n  }]\n};\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], NzIconDirective.prototype, \"nzSpin\", null);\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzIconService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.RendererFactory2\n    }, {\n      type: ɵngcc1.DomSanitizer\n    }, {\n      type: ɵngcc2.NzConfigService\n    }, {\n      type: ɵngcc3.HttpBackend,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: Array,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NZ_ICONS]\n      }]\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzIconPatchService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Array,\n      decorators: [{\n        type: Self\n      }, {\n        type: Inject,\n        args: [NZ_ICONS_PATCH]\n      }]\n    }, {\n      type: NzIconService\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzIconDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nz-icon]',\n      exportAs: 'nzIcon',\n      host: {\n        '[class.anticon]': 'true'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: NzIconService\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: NzIconPatchService,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    nzRotate: [{\n      type: Input\n    }],\n    nzSpin: [{\n      type: Input\n    }],\n    nzType: [{\n      type: Input\n    }],\n    nzTheme: [{\n      type: Input\n    }],\n    nzTwotoneColor: [{\n      type: Input\n    }],\n    nzIconfont: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzIconModule = /*#__PURE__*/function () {\n  function NzIconModule() {\n    _classCallCheck(this, NzIconModule);\n  }\n\n  _createClass(NzIconModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(icons) {\n      return {\n        ngModule: NzIconModule,\n        providers: [{\n          provide: NZ_ICONS,\n          useValue: icons\n        }]\n      };\n    }\n  }, {\n    key: \"forChild\",\n    value: function forChild(icons) {\n      return {\n        ngModule: NzIconModule,\n        providers: [NzIconPatchService, {\n          provide: NZ_ICONS_PATCH,\n          useValue: icons\n        }]\n      };\n    }\n  }]);\n\n  return NzIconModule;\n}();\n\nNzIconModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzIconModule\n});\nNzIconModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzIconModule_Factory(t) {\n    return new (t || NzIconModule)();\n  },\n  imports: [[PlatformModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzIconModule, {\n    declarations: function declarations() {\n      return [NzIconDirective];\n    },\n    imports: function imports() {\n      return [PlatformModule];\n    },\n    exports: function exports() {\n      return [NzIconDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzIconModule, [{\n    type: NgModule,\n    args: [{\n      exports: [NzIconDirective],\n      declarations: [NzIconDirective],\n      imports: [PlatformModule]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DEFAULT_TWOTONE_COLOR, NZ_ICONS, NZ_ICONS_PATCH, NZ_ICON_DEFAULT_TWOTONE_COLOR, NzIconDirective, NzIconModule, NzIconPatchService, NzIconService };","map":{"version":3,"sources":["../../components/icon/icons.ts","../../components/icon/icon.service.ts","../../components/icon/icon.directive.ts","../../components/icon/icon.module.ts","../../components/icon/public-api.ts","../../components/icon/ng-zorro-antd-icon.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { IconDefinition } from '@ant-design/icons-angular';\nimport {\n  BarsOutline,\n  CalendarOutline,\n  CaretDownFill,\n  CaretDownOutline,\n  CaretUpFill,\n  CaretUpOutline,\n  CheckCircleFill,\n  CheckCircleOutline,\n  CheckOutline,\n  ClockCircleOutline,\n  CloseCircleFill,\n  CloseCircleOutline,\n  CloseOutline,\n  CopyOutline,\n  DoubleLeftOutline,\n  DoubleRightOutline,\n  DownOutline,\n  EditOutline,\n  EllipsisOutline,\n  ExclamationCircleFill,\n  ExclamationCircleOutline,\n  EyeOutline,\n  FileFill,\n  FileOutline,\n  FilterFill,\n  InfoCircleFill,\n  InfoCircleOutline,\n  LeftOutline,\n  LoadingOutline,\n  PaperClipOutline,\n  QuestionCircleOutline,\n  RightOutline,\n  SearchOutline,\n  StarFill,\n  SwapRightOutline,\n  UploadOutline,\n  UpOutline,\n  VerticalAlignTopOutline\n} from '@ant-design/icons-angular/icons';\n\nexport const NZ_ICONS_USED_BY_ZORRO: IconDefinition[] = [\n  BarsOutline,\n  CalendarOutline,\n  CaretUpFill,\n  CaretUpOutline,\n  CaretDownFill,\n  CaretDownOutline,\n  CheckCircleFill,\n  CheckCircleOutline,\n  CheckOutline,\n  ClockCircleOutline,\n  CloseCircleOutline,\n  CloseCircleFill,\n  CloseOutline,\n  CopyOutline,\n  DoubleLeftOutline,\n  DoubleRightOutline,\n  DownOutline,\n  EditOutline,\n  EllipsisOutline,\n  ExclamationCircleFill,\n  ExclamationCircleOutline,\n  EyeOutline,\n  FileFill,\n  FileOutline,\n  FilterFill,\n  InfoCircleFill,\n  InfoCircleOutline,\n  LeftOutline,\n  LoadingOutline,\n  PaperClipOutline,\n  QuestionCircleOutline,\n  RightOutline,\n  StarFill,\n  SearchOutline,\n  StarFill,\n  UploadOutline,\n  VerticalAlignTopOutline,\n  UpOutline,\n  SwapRightOutline\n];\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { DOCUMENT } from '@angular/common';\nimport { HttpBackend } from '@angular/common/http';\nimport { Inject, Injectable, InjectionToken, Optional, RendererFactory2, Self } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { IconDefinition, IconService } from '@ant-design/icons-angular';\nimport { IconConfig, NzConfigService } from 'ng-zorro-antd/core/config';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { Subject } from 'rxjs';\nimport { NZ_ICONS_USED_BY_ZORRO } from './icons';\n\nexport interface NzIconfontOption {\n  scriptUrl: string;\n}\n\nexport const NZ_ICONS = new InjectionToken('nz_icons');\nexport const NZ_ICON_DEFAULT_TWOTONE_COLOR = new InjectionToken('nz_icon_default_twotone_color');\nexport const DEFAULT_TWOTONE_COLOR = '#1890ff';\n\n/**\n * It should be a global singleton, otherwise registered icons could not be found.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NzIconService extends IconService {\n  configUpdated$ = new Subject<void>();\n\n  private iconfontCache = new Set<string>();\n\n  normalizeSvgElement(svg: SVGElement): void {\n    if (!svg.getAttribute('viewBox')) {\n      this._renderer.setAttribute(svg, 'viewBox', '0 0 1024 1024');\n    }\n    if (!svg.getAttribute('width') || !svg.getAttribute('height')) {\n      this._renderer.setAttribute(svg, 'width', '1em');\n      this._renderer.setAttribute(svg, 'height', '1em');\n    }\n    if (!svg.getAttribute('fill')) {\n      this._renderer.setAttribute(svg, 'fill', 'currentColor');\n    }\n  }\n\n  fetchFromIconfont(opt: NzIconfontOption): void {\n    const { scriptUrl } = opt;\n    if (this._document && !this.iconfontCache.has(scriptUrl)) {\n      const script = this._renderer.createElement('script');\n      this._renderer.setAttribute(script, 'src', scriptUrl);\n      this._renderer.setAttribute(script, 'data-namespace', scriptUrl.replace(/^(https?|http):/g, ''));\n      this._renderer.appendChild(this._document.body, script);\n      this.iconfontCache.add(scriptUrl);\n    }\n  }\n\n  createIconfontIcon(type: string): SVGElement {\n    return this._createSVGElementFromString(`<svg><use xlink:href=\"${type}\"></svg>`);\n  }\n\n  constructor(\n    rendererFactory: RendererFactory2,\n    sanitizer: DomSanitizer,\n    protected nzConfigService: NzConfigService,\n    @Optional() handler: HttpBackend,\n    @Optional() @Inject(DOCUMENT) _document: NzSafeAny,\n    @Optional() @Inject(NZ_ICONS) icons?: IconDefinition[]\n  ) {\n    super(rendererFactory, handler, _document, sanitizer);\n\n    this.onConfigChange();\n    this.addIcon(...NZ_ICONS_USED_BY_ZORRO, ...(icons || []));\n    this.configDefaultTwotoneColor();\n    this.configDefaultTheme();\n  }\n\n  private onConfigChange(): void {\n    this.nzConfigService.getConfigChangeEventForComponent('icon').subscribe(() => {\n      this.configDefaultTwotoneColor();\n      this.configDefaultTheme();\n      this.configUpdated$.next();\n    });\n  }\n\n  private configDefaultTheme(): void {\n    const iconConfig = this.getConfig();\n    this.defaultTheme = iconConfig.nzTheme || 'outline';\n  }\n\n  private configDefaultTwotoneColor(): void {\n    const iconConfig = this.getConfig();\n    const defaultTwotoneColor = iconConfig.nzTwotoneColor || DEFAULT_TWOTONE_COLOR;\n\n    let primaryColor = DEFAULT_TWOTONE_COLOR;\n\n    if (defaultTwotoneColor) {\n      if (defaultTwotoneColor.startsWith('#')) {\n        primaryColor = defaultTwotoneColor;\n      } else {\n        warn('Twotone color must be a hex color!');\n      }\n    }\n\n    this.twoToneColor = { primaryColor };\n  }\n\n  private getConfig(): IconConfig {\n    return this.nzConfigService.getConfigForComponent('icon') || {};\n  }\n}\n\nexport const NZ_ICONS_PATCH = new InjectionToken('nz_icons_patch');\n\n@Injectable()\nexport class NzIconPatchService {\n  patched = false;\n\n  constructor(@Self() @Inject(NZ_ICONS_PATCH) private extraIcons: IconDefinition[], private rootIconService: NzIconService) {}\n\n  doPatch(): void {\n    if (this.patched) {\n      return;\n    }\n\n    this.extraIcons.forEach(iconDefinition => this.rootIconService.addIcon(iconDefinition));\n    this.patched = true;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { AfterContentChecked, Directive, ElementRef, Input, OnChanges, OnInit, Optional, Renderer2, SimpleChanges } from '@angular/core';\nimport { IconDirective, ThemeType } from '@ant-design/icons-angular';\nimport { BooleanInput } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\n\nimport { NzIconPatchService, NzIconService } from './icon.service';\n\n@Directive({\n  selector: '[nz-icon]',\n  exportAs: 'nzIcon',\n  host: {\n    '[class.anticon]': 'true'\n  }\n})\nexport class NzIconDirective extends IconDirective implements OnInit, OnChanges, AfterContentChecked {\n  static ngAcceptInputType_nzSpin: BooleanInput;\n\n  cacheClassName: string | null = null;\n  @Input()\n  @InputBoolean()\n  set nzSpin(value: boolean) {\n    this.spin = value;\n  }\n\n  @Input() nzRotate: number = 0;\n\n  @Input()\n  set nzType(value: string) {\n    this.type = value;\n  }\n\n  @Input()\n  set nzTheme(value: ThemeType) {\n    this.theme = value;\n  }\n\n  @Input()\n  set nzTwotoneColor(value: string) {\n    this.twoToneColor = value;\n  }\n\n  @Input()\n  set nzIconfont(value: string) {\n    this.iconfont = value;\n  }\n\n  hostClass?: string;\n\n  private readonly el: HTMLElement;\n  private iconfont?: string;\n  private spin: boolean = false;\n\n  constructor(\n    elementRef: ElementRef,\n    public iconService: NzIconService,\n    public renderer: Renderer2,\n    @Optional() iconPatch: NzIconPatchService\n  ) {\n    super(iconService, elementRef, renderer);\n\n    if (iconPatch) {\n      iconPatch.doPatch();\n    }\n\n    this.el = elementRef.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzType, nzTwotoneColor, nzSpin, nzTheme, nzRotate } = changes;\n\n    if (nzType || nzTwotoneColor || nzSpin || nzTheme) {\n      this.changeIcon2();\n    } else if (nzRotate) {\n      this.handleRotate(this.el.firstChild as SVGElement);\n    } else {\n      this._setSVGElement(this.iconService.createIconfontIcon(`#${this.iconfont}`));\n    }\n  }\n\n  ngOnInit(): void {\n    this.renderer.setAttribute(this.el, 'class', `anticon ${this.el.className}`.trim());\n  }\n\n  /**\n   * If custom content is provided, try to normalize SVG elements.\n   */\n  ngAfterContentChecked(): void {\n    if (!this.type) {\n      const children = this.el.children;\n      let length = children.length;\n      if (!this.type && children.length) {\n        while (length--) {\n          const child = children[length];\n          if (child.tagName.toLowerCase() === 'svg') {\n            this.iconService.normalizeSvgElement(child as SVGElement);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Replacement of `changeIcon` for more modifications.\n   */\n  private changeIcon2(): void {\n    this.setClassName();\n    this._changeIcon().then(svgOrRemove => {\n      if (svgOrRemove) {\n        this.setSVGData(svgOrRemove);\n        this.handleSpin(svgOrRemove);\n        this.handleRotate(svgOrRemove);\n      }\n    });\n  }\n\n  private handleSpin(svg: SVGElement): void {\n    if (this.spin || this.type === 'loading') {\n      this.renderer.addClass(svg, 'anticon-spin');\n    } else {\n      this.renderer.removeClass(svg, 'anticon-spin');\n    }\n  }\n\n  private handleRotate(svg: SVGElement): void {\n    if (this.nzRotate) {\n      this.renderer.setAttribute(svg, 'style', `transform: rotate(${this.nzRotate}deg)`);\n    } else {\n      this.renderer.removeAttribute(svg, 'style');\n    }\n  }\n\n  private setClassName(): void {\n    if (this.cacheClassName) {\n      this.renderer.removeClass(this.el, this.cacheClassName);\n    }\n    this.cacheClassName = `anticon-${this.type}`;\n    this.renderer.addClass(this.el, this.cacheClassName);\n  }\n\n  private setSVGData(svg: SVGElement): void {\n    this.renderer.setAttribute(svg, 'data-icon', this.type as string);\n    this.renderer.setAttribute(svg, 'aria-hidden', 'true');\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { IconDefinition } from '@ant-design/icons-angular';\n\nimport { NzIconDirective } from './icon.directive';\nimport { NzIconPatchService, NZ_ICONS, NZ_ICONS_PATCH } from './icon.service';\n\n@NgModule({\n  exports: [NzIconDirective],\n  declarations: [NzIconDirective],\n  imports: [PlatformModule]\n})\nexport class NzIconModule {\n  static forRoot(icons: IconDefinition[]): ModuleWithProviders<NzIconModule> {\n    return {\n      ngModule: NzIconModule,\n      providers: [\n        {\n          provide: NZ_ICONS,\n          useValue: icons\n        }\n      ]\n    };\n  }\n\n  static forChild(icons: IconDefinition[]): ModuleWithProviders<NzIconModule> {\n    return {\n      ngModule: NzIconModule,\n      providers: [\n        NzIconPatchService,\n        {\n          provide: NZ_ICONS_PATCH,\n          useValue: icons\n        }\n      ]\n    };\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport * from './icon.module';\nexport * from './icon.directive';\nexport * from './icon.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}