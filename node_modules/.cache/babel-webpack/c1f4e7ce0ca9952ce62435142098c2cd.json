{"ast":null,"code":"import _toConsumableArray from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CommonModule } from '@angular/common';\nimport { Pipe, NgModule } from '@angular/core';\nimport { sum, isNumberFinite, toDecimal, isNil } from 'ng-zorro-antd/core/util';\nimport { DomSanitizer } from '@angular/platform-browser';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\n\nvar NzAggregatePipe = /*#__PURE__*/function () {\n  function NzAggregatePipe() {\n    _classCallCheck(this, NzAggregatePipe);\n  }\n\n  _createClass(NzAggregatePipe, [{\n    key: \"transform\",\n    value: function transform(value, method) {\n      if (!Array.isArray(value)) {\n        return value;\n      }\n\n      if (value.length === 0) {\n        return undefined;\n      }\n\n      switch (method) {\n        case 'sum':\n          return sum(value);\n\n        case 'avg':\n          return sum(value) / value.length;\n\n        case 'max':\n          return Math.max.apply(Math, _toConsumableArray(value));\n\n        case 'min':\n          return Math.min.apply(Math, _toConsumableArray(value));\n\n        default:\n          throw Error(\"Invalid Pipe Arguments: Aggregate pipe doesn't support this type\");\n      }\n    }\n  }]);\n\n  return NzAggregatePipe;\n}();\n\nNzAggregatePipe.ɵfac = function NzAggregatePipe_Factory(t) {\n  return new (t || NzAggregatePipe)();\n};\n\nNzAggregatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"nzAggregate\",\n  type: NzAggregatePipe,\n  pure: true\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzAggregatePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzAggregate'\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzBytesPipe = /*#__PURE__*/function () {\n  function NzBytesPipe() {\n    _classCallCheck(this, NzBytesPipe);\n  }\n\n  _createClass(NzBytesPipe, [{\n    key: \"transform\",\n    value: function transform(input) {\n      var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'B';\n      var to = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (!(isNumberFinite(input) && isNumberFinite(decimal) && decimal % 1 === 0 && decimal >= 0)) {\n        return input;\n      }\n\n      var bytes = input;\n      var unit = from;\n\n      while (unit !== 'B') {\n        bytes *= 1024;\n        unit = NzBytesPipe.formats[unit].prev;\n      }\n\n      if (to) {\n        var format = NzBytesPipe.formats[to];\n        var result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n        return NzBytesPipe.formatResult(result, to);\n      }\n\n      for (var key in NzBytesPipe.formats) {\n        if (NzBytesPipe.formats.hasOwnProperty(key)) {\n          var _format = NzBytesPipe.formats[key];\n\n          if (bytes < _format.max) {\n            var _result = toDecimal(NzBytesPipe.calculateResult(_format, bytes), decimal);\n\n            return NzBytesPipe.formatResult(_result, key);\n          }\n        }\n      }\n    }\n  }], [{\n    key: \"formatResult\",\n    value: function formatResult(result, unit) {\n      return \"\".concat(result, \" \").concat(unit);\n    }\n  }, {\n    key: \"calculateResult\",\n    value: function calculateResult(format, bytes) {\n      var prev = format.prev ? NzBytesPipe.formats[format.prev] : undefined;\n      return prev ? bytes / prev.max : bytes;\n    }\n  }]);\n\n  return NzBytesPipe;\n}();\n\nNzBytesPipe.ɵfac = function NzBytesPipe_Factory(t) {\n  return new (t || NzBytesPipe)();\n};\n\nNzBytesPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"nzBytes\",\n  type: NzBytesPipe,\n  pure: true\n});\nNzBytesPipe.formats = {\n  B: {\n    max: 1024\n  },\n  kB: {\n    max: Math.pow(1024, 2),\n    prev: 'B'\n  },\n  KB: {\n    max: Math.pow(1024, 2),\n    prev: 'B'\n  },\n  MB: {\n    max: Math.pow(1024, 3),\n    prev: 'kB'\n  },\n  GB: {\n    max: Math.pow(1024, 4),\n    prev: 'MB'\n  },\n  TB: {\n    max: Number.MAX_SAFE_INTEGER,\n    prev: 'GB'\n  }\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzBytesPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzBytes'\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzToCssUnitPipe = /*#__PURE__*/function () {\n  function NzToCssUnitPipe() {\n    _classCallCheck(this, NzToCssUnitPipe);\n  }\n\n  _createClass(NzToCssUnitPipe, [{\n    key: \"transform\",\n    value: function transform(value) {\n      var defaultUnit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'px';\n      var absoluteLengthUnit = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px'];\n      var relativeLengthUnit = ['em', 'ex', 'ch', 'rem', '1h', 'vw', 'vh', 'vmin', 'vmax'];\n      var percentagesUnit = ['%'];\n      var listOfUnit = [].concat(absoluteLengthUnit, relativeLengthUnit, percentagesUnit);\n      var unit = 'px';\n\n      if (listOfUnit.some(function (u) {\n        return u === defaultUnit;\n      })) {\n        unit = defaultUnit;\n      }\n\n      return typeof value === 'number' ? \"\".concat(value).concat(unit) : \"\".concat(value);\n    }\n  }]);\n\n  return NzToCssUnitPipe;\n}();\n\nNzToCssUnitPipe.ɵfac = function NzToCssUnitPipe_Factory(t) {\n  return new (t || NzToCssUnitPipe)();\n};\n\nNzToCssUnitPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"nzToCssUnit\",\n  type: NzToCssUnitPipe,\n  pure: true\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzToCssUnitPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzToCssUnit'\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzEllipsisPipe = /*#__PURE__*/function () {\n  function NzEllipsisPipe() {\n    _classCallCheck(this, NzEllipsisPipe);\n  }\n\n  _createClass(NzEllipsisPipe, [{\n    key: \"transform\",\n    value: function transform(value, length) {\n      var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n      if (typeof value !== 'string') {\n        return value;\n      }\n\n      var len = typeof length === 'undefined' ? value.length : length;\n\n      if (value.length <= len) {\n        return value;\n      }\n\n      return value.substring(0, len) + suffix;\n    }\n  }]);\n\n  return NzEllipsisPipe;\n}();\n\nNzEllipsisPipe.ɵfac = function NzEllipsisPipe_Factory(t) {\n  return new (t || NzEllipsisPipe)();\n};\n\nNzEllipsisPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"nzEllipsis\",\n  type: NzEllipsisPipe,\n  pure: true\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzEllipsisPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzEllipsis'\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzSafeNullPipe = /*#__PURE__*/function () {\n  function NzSafeNullPipe() {\n    _classCallCheck(this, NzSafeNullPipe);\n  }\n\n  _createClass(NzSafeNullPipe, [{\n    key: \"transform\",\n    value: function transform(value) {\n      var replace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (isNil(value)) {\n        return replace;\n      }\n\n      return value;\n    }\n  }]);\n\n  return NzSafeNullPipe;\n}();\n\nNzSafeNullPipe.ɵfac = function NzSafeNullPipe_Factory(t) {\n  return new (t || NzSafeNullPipe)();\n};\n\nNzSafeNullPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"nzSafeNull\",\n  type: NzSafeNullPipe,\n  pure: true\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzSafeNullPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzSafeNull'\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzSanitizerPipe = /*#__PURE__*/function () {\n  function NzSanitizerPipe(sanitizer) {\n    _classCallCheck(this, NzSanitizerPipe);\n\n    this.sanitizer = sanitizer;\n  }\n\n  _createClass(NzSanitizerPipe, [{\n    key: \"transform\",\n    value: function transform(value) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'html';\n\n      switch (type) {\n        case 'html':\n          return this.sanitizer.bypassSecurityTrustHtml(value);\n\n        case 'style':\n          return this.sanitizer.bypassSecurityTrustStyle(value);\n\n        case 'url':\n          return this.sanitizer.bypassSecurityTrustUrl(value);\n\n        case 'resourceUrl':\n          return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n        default:\n          throw new Error(\"Invalid safe type specified\");\n      }\n    }\n  }]);\n\n  return NzSanitizerPipe;\n}();\n\nNzSanitizerPipe.ɵfac = function NzSanitizerPipe_Factory(t) {\n  return new (t || NzSanitizerPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer));\n};\n\nNzSanitizerPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"nzSanitizer\",\n  type: NzSanitizerPipe,\n  pure: true\n});\n\nNzSanitizerPipe.ctorParameters = function () {\n  return [{\n    type: DomSanitizer\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzSanitizerPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzSanitizer'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.DomSanitizer\n    }];\n  }, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTrimPipe = /*#__PURE__*/function () {\n  function NzTrimPipe() {\n    _classCallCheck(this, NzTrimPipe);\n  }\n\n  _createClass(NzTrimPipe, [{\n    key: \"transform\",\n    // TODO(chensimeng) trimEnd, trimStart\n    value: function transform(text) {\n      return text.trim();\n    }\n  }]);\n\n  return NzTrimPipe;\n}();\n\nNzTrimPipe.ɵfac = function NzTrimPipe_Factory(t) {\n  return new (t || NzTrimPipe)();\n};\n\nNzTrimPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"nzTrim\",\n  type: NzTrimPipe,\n  pure: true\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzTrimPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzTrim'\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar pipes = [NzToCssUnitPipe, NzSafeNullPipe, NzSanitizerPipe, NzTrimPipe, NzBytesPipe, NzAggregatePipe, NzEllipsisPipe];\n\nvar NzPipesModule = function NzPipesModule() {\n  _classCallCheck(this, NzPipesModule);\n};\n\nNzPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzPipesModule\n});\nNzPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzPipesModule_Factory(t) {\n    return new (t || NzPipesModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzPipesModule, {\n    declarations: function declarations() {\n      return [NzToCssUnitPipe, NzSafeNullPipe, NzSanitizerPipe, NzTrimPipe, NzBytesPipe, NzAggregatePipe, NzEllipsisPipe];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NzToCssUnitPipe, NzSafeNullPipe, NzSanitizerPipe, NzTrimPipe, NzBytesPipe, NzAggregatePipe, NzEllipsisPipe];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzPipesModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [pipes],\n      declarations: [pipes]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzAggregatePipe, NzBytesPipe, NzEllipsisPipe, NzPipesModule, NzSafeNullPipe, NzSanitizerPipe, NzToCssUnitPipe, NzTrimPipe };","map":{"version":3,"sources":["../../components/pipes/nz-aggregate.pipe.ts","../../components/pipes/nz-bytes.pipe.ts","../../components/pipes/nz-css-unit.pipe.ts","../../components/pipes/nz-ellipsis.pipe.ts","../../components/pipes/nz-safe-null.pipe.ts","../../components/pipes/nz-sanitizer.pipe.ts","../../components/pipes/nz-trim.pipe.ts","../../components/pipes/nz-pipes.module.ts","../../components/pipes/public-api.ts","../../components/pipes/ng-zorro-antd-pipes.ts"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;IAaa,e;;;;;;;8BACD,K,EAAiB,M,EAAuB;AAChD,UAAI,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAL,EAA2B;AACzB,eAAO,KAAP;AACD;;AAED,UAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB,eAAO,SAAP;AACD;;AAED,cAAQ,MAAR;AACE,aAAK,KAAL;AACE,iBAAO,GAAG,CAAC,KAAD,CAAV;;AACF,aAAK,KAAL;AACE,iBAAO,GAAG,CAAC,KAAD,CAAH,GAAa,KAAK,CAAC,MAA1B;;AACF,aAAK,KAAL;AACE,iBAAO,IAAI,CAAC,GAAL,OAAA,IAAI,qBAAQ,KAAR,EAAX;;AACF,aAAK,KAAL;AACE,iBAAO,IAAI,CAAC,GAAL,OAAA,IAAI,qBAAQ,KAAR,EAAX;;AACF;AACE,gBAAM,KAAK,oEAAX;AAVJ;AAYD;;;;;;gCAzBF,uB,CAAK,C,EAAA;AAAA,SAAA,KAAA,CACJ,IAAI,eADA,GAAA;AACe,C;;AACpB,eAAA,CAAA,KAAA,GAAA,MAAA,CAAA,YAAA,CAAA;AAAA,EAAA,IAAA,EAAA,aAAA;AAAA,EAAA,IAAA,EAAA,eAAA;AAAA,EAAA,IAAA,EAAA;AAAA,CAAA,CAAA;;;;;;;;;;AACI,C;ACbL;;;;;;IAca,W;;;;;;;8BAUD,K,EAA0E;AAAA,UAAxD,OAAwD,uEAAtC,CAAsC;AAAA,UAAnC,IAAmC,uEAAlB,GAAkB;AAAA,UAAb,EAAa;;AAClF,UAAI,EAAE,cAAc,CAAC,KAAD,CAAd,IAAyB,cAAc,CAAC,OAAD,CAAvC,IAAoD,OAAO,GAAG,CAAV,KAAgB,CAApE,IAAyE,OAAO,IAAI,CAAtF,CAAJ,EAA8F;AAC5F,eAAO,KAAP;AACD;;AAED,UAAI,KAAK,GAAG,KAAZ;AACA,UAAI,IAAI,GAAG,IAAX;;AACA,aAAO,IAAI,KAAK,GAAhB,EAAqB;AACnB,QAAA,KAAK,IAAI,IAAT;AACA,QAAA,IAAI,GAAG,WAAW,CAAC,OAAZ,CAAoB,IAApB,EAA0B,IAAjC;AACD;;AAED,UAAI,EAAJ,EAAQ;AACN,YAAM,MAAM,GAAG,WAAW,CAAC,OAAZ,CAAoB,EAApB,CAAf;AAEA,YAAM,MAAM,GAAG,SAAS,CAAC,WAAW,CAAC,eAAZ,CAA4B,MAA5B,EAAoC,KAApC,CAAD,EAA6C,OAA7C,CAAxB;AAEA,eAAO,WAAW,CAAC,YAAZ,CAAyB,MAAzB,EAAiC,EAAjC,CAAP;AACD;;AAED,WAAK,IAAM,GAAX,IAAkB,WAAW,CAAC,OAA9B,EAAuC;AACrC,YAAI,WAAW,CAAC,OAAZ,CAAoB,cAApB,CAAmC,GAAnC,CAAJ,EAA6C;AAC3C,cAAM,OAAM,GAAG,WAAW,CAAC,OAAZ,CAAoB,GAApB,CAAf;;AACA,cAAI,KAAK,GAAG,OAAM,CAAC,GAAnB,EAAwB;AACtB,gBAAM,OAAM,GAAG,SAAS,CAAC,WAAW,CAAC,eAAZ,CAA4B,OAA5B,EAAoC,KAApC,CAAD,EAA6C,OAA7C,CAAxB;;AAEA,mBAAO,WAAW,CAAC,YAAZ,CAAyB,OAAzB,EAAiC,GAAjC,CAAP;AACD;AACF;AACF;AACF;;;iCAEmB,M,EAAgB,I,EAAY;AAC9C,uBAAU,MAAV,cAAoB,IAApB;AACD;;;oCAEsB,M,EAA0C,K,EAAa;AAC5E,UAAM,IAAI,GAAG,MAAM,CAAC,IAAP,GAAc,WAAW,CAAC,OAAZ,CAAoB,MAAM,CAAC,IAA3B,CAAd,GAAiD,SAA9D;AACA,aAAO,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC,GAAhB,GAAsB,KAAjC;AACD;;;;;;;;;;;;;QACF;;AAjDQ,WAAA,CAAA,OAAA,GAA+D;AACpE,EAAA,CAAC,EAAE;AAAE,IAAA,GAAG,EAAE;AAAP,GADiE;AAEpE,EAAA,EAAE,EAAE;AAAE,IAAA,GAAG,EAAE,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,CAAf,CAAP;AAA0B,IAAA,IAAI,EAAE;AAAhC,GAFgE;AAGpE,EAAA,EAAE,EAAE;AAAE,IAAA,GAAG,EAAE,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,CAAf,CAAP;AAA0B,IAAA,IAAI,EAAE;AAAhC,GAHgE;AAIpE,EAAA,EAAE,EAAE;AAAE,IAAA,GAAG,EAAE,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,CAAf,CAAP;AAA0B,IAAA,IAAI,EAAE;AAAhC,GAJgE;AAKpE,EAAA,EAAE,EAAE;AAAE,IAAA,GAAG,EAAE,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,CAAf,CAAP;AAA0B,IAAA,IAAI,EAAE;AAAhC,GALgE;AAMpE,EAAA,EAAE,EAAE;AAAE,IAAA,GAAG,EAAE,MAAM,CAAC,gBAAd;AAAgC,IAAA,IAAI,EAAE;AAAtC;AANgE,CAA/D;;;;SAJR,iB,CAAK,W,EAAA,CAAA;AACE,IAAA,IAAA,EAAA,IADF;AAEL,IAAA,IAAA,EAAA,CAAA;;AAAA,KAAA;AAFK,GAAA,C;AAGD,C;ACdL;;;;;;IAUa,e;;;;;;;8BACD,K,EAAkD;AAAA,UAA1B,WAA0B,uEAAJ,IAAI;AAC1D,UAAM,kBAAkB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,GAAb,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,CAA3B;AACA,UAAM,kBAAkB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,IAAtC,EAA4C,MAA5C,EAAoD,MAApD,CAA3B;AACA,UAAM,eAAe,GAAG,CAAC,GAAD,CAAxB;AACA,UAAM,UAAU,aAAO,kBAAP,EAA8B,kBAA9B,EAAqD,eAArD,CAAhB;AACA,UAAI,IAAI,GAAG,IAAX;;AACA,UAAI,UAAU,CAAC,IAAX,CAAgB,UAAA,CAAC;AAAA,eAAI,CAAC,KAAK,WAAV;AAAA,OAAjB,CAAJ,EAA6C;AAC3C,QAAA,IAAI,GAAG,WAAP;AACD;;AACD,aAAO,OAAO,KAAP,KAAiB,QAAjB,aAA+B,KAA/B,SAAuC,IAAvC,cAAmD,KAAnD,CAAP;AACD;;;;;;gCAdF,uB,CAAK,C,EAAA;AAAA,SAAA,KAAA,CACJ,IAAI,eADA,GAAA;AACe,C;;AACpB,eAAA,CAAA,KAAA,GAAA,MAAA,CAAA,YAAA,CAAA;AAAA,EAAA,IAAA,EAAA,aAAA;AAAA,EAAA,IAAA,EAAA,eAAA;AAAA,EAAA,IAAA,EAAA;AAAA,CAAA,CAAA;;;;;;;;;;AACI,C;ACVL;;;;;;IAWa,c;;;;;;;8BACD,K,EAAkB,M,EAAoC;AAAA,UAAnB,MAAmB,uEAAF,EAAE;;AAC9D,UAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAO,KAAP;AACD;;AAED,UAAM,GAAG,GAAG,OAAO,MAAP,KAAkB,WAAlB,GAAgC,KAAK,CAAC,MAAtC,GAA+C,MAA3D;;AAEA,UAAI,KAAK,CAAC,MAAN,IAAgB,GAApB,EAAyB;AACvB,eAAO,KAAP;AACD;;AAED,aAAO,KAAK,CAAC,SAAN,CAAgB,CAAhB,EAAmB,GAAnB,IAA0B,MAAjC;AACD;;;;;;+BAhBF,sB,CAAI,C,EAAC;AAAA,SAAA,KAAA,CAAA,IACJ,cADI,GAAA;AACc,C;;AACnB,cAAA,CAAA,KAAA,GAAA,MAAA,CAAA,YAAA,CAAA;AAAA,EAAA,IAAA,EAAA,YAAA;AAAA,EAAA,IAAA,EAAA,cAAA;AAAA,EAAA,IAAA,EAAA;AAAA,CAAA,CAAA;;;;;;;;;;AACI,C;ACXL;;;;;;IAWa,c;;;;;;;8BACE,K,EAA8B;AAAA,UAApB,OAAoB,uEAAF,EAAE;;AACzC,UAAI,KAAK,CAAC,KAAD,CAAT,EAAkB;AAChB,eAAO,OAAP;AACD;;AACD,aAAO,KAAP;AACD;;;;;;+BATF,sB,CAAI,C,EAAC;AAAA,SAAA,KAAA,CAAA,IACJ,cADI,GAAA;AACc,C;;AACnB,cAAA,CAAA,KAAA,GAAA,MAAA,CAAA,YAAA,CAAA;AAAA,EAAA,IAAA,EAAA,YAAA;AAAA,EAAA,IAAA,EAAA,cAAA;AAAA,EAAA,IAAA,EAAA;AAAA,CAAA,CAAA;;;;;;;;;;AACI,C;ACXL;;;;;;IAca,e;AACX,2BAAsB,SAAtB,EAA6C;AAAA;;AAAvB,SAAA,SAAA,GAAA,SAAA;AAA2B;;;;8BAKvC,K,EAAiD;AAAA,UAA/B,IAA+B,uEAAN,MAAM;;AACzD,cAAQ,IAAR;AACE,aAAK,MAAL;AACE,iBAAO,KAAK,SAAL,CAAe,uBAAf,CAAuC,KAAvC,CAAP;;AACF,aAAK,OAAL;AACE,iBAAO,KAAK,SAAL,CAAe,wBAAf,CAAwC,KAAxC,CAAP;;AACF,aAAK,KAAL;AACE,iBAAO,KAAK,SAAL,CAAe,sBAAf,CAAsC,KAAtC,CAAP;;AACF,aAAK,aAAL;AACE,iBAAO,KAAK,SAAL,CAAe,8BAAf,CAA8C,KAA9C,CAAP;;AACF;AACE,gBAAM,IAAI,KAAJ,+BAAN;AAVJ;AAYD;;;;;;gCAtBF,uB,CAAK,C,EAAA;AAAA,SAAA,KAAA,CACJ,IAAI,eADA,EACe,MAAA,CAAA,iBAAA,CACpB,MAAA,CAAA,YADoB,CADf,CAAA;AAEL,C;;;;;QACI;;;AAAC,eAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAAyC;AAAA,IAAA,IAAA,EARtC;AAQsC,GAAzC,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;AARoB,C;ACN1B;;;;;;IAUa,U;;;;;;;AAAa;8BAEd,I,EAAY;AACpB,aAAO,IAAI,CAAC,IAAL,EAAP;AACD;;;;;;2BAPF,kB,CAAI,C,EAAA;AAAC,SAAA,KAAA,CAAA,IAAA,UAAA,GAAA;AACU,C;;WACf,K,GAAA,MAAA,CAAA,YAAA,CAAA;AAAA,EAAA,IAAA,EAAA,QAAA;AAAA,EAAA,IAAA,EAAA,UAAA;AAAA,EAAA,IAAA,EAAA;AAAA,CAAA,C;;;;;;;;;;AACI,C;ACVL;;;;;;AAgBA,IAAM,KAAK,GAAG,CAAC,eAAD,EAAkB,cAAlB,EAAkC,eAAlC,EAAmD,UAAnD,EAA+D,WAA/D,EAA4E,eAA5E,EAA6F,cAA7F,CAAd;;IAOa,a;;;;4BALZ,gB,CAAA;AAAA,EAAA,IAAQ,EAAA;AAAR,C;AACC,aAAO,CAAE,IAAT,GAAU,MAAY,CAAC,gBAAb,CAAa;AACvB,EAAA,OAAO,EAAG,SAAM,qBAAN,CACV,CADU,EACV;AAAY,WAAG,KAAM,CAAA,IAAA,aAAN,GAAH;AACb,GAHwB;AAGxB,EAAA,OAAA,EAAA,CAAA,CAAA,YAAA,CAAA;AAHwB,CAAb,CAAV;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIG,C;ACvBL;;;;;ACAA;;;;;AAIA,SAAA,eAAA,EAAA,WAAA,EAAA,cAAA,EAAA,aAAA,EAAA,cAAA,EAAA,eAAA,EAAA,eAAA,EAAA,UAAA","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { sum } from 'ng-zorro-antd/core/util';\n\nexport type AggregateMethod = 'sum' | 'max' | 'min' | 'avg';\n\n@Pipe({\n  name: 'nzAggregate'\n})\nexport class NzAggregatePipe implements PipeTransform {\n  transform(value: number[], method: AggregateMethod): undefined | number {\n    if (!Array.isArray(value)) {\n      return value;\n    }\n\n    if (value.length === 0) {\n      return undefined;\n    }\n\n    switch (method) {\n      case 'sum':\n        return sum(value);\n      case 'avg':\n        return sum(value) / value.length;\n      case 'max':\n        return Math.max(...value);\n      case 'min':\n        return Math.min(...value);\n      default:\n        throw Error(`Invalid Pipe Arguments: Aggregate pipe doesn't support this type`);\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { isNumberFinite, toDecimal } from 'ng-zorro-antd/core/util';\n\nexport type ByteUnit = 'B' | 'kB' | 'KB' | 'MB' | 'GB' | 'TB';\n\n@Pipe({\n  name: 'nzBytes'\n})\nexport class NzBytesPipe implements PipeTransform {\n  static formats: { [key: string]: { max: number; prev?: ByteUnit } } = {\n    B: { max: 1024 },\n    kB: { max: Math.pow(1024, 2), prev: 'B' },\n    KB: { max: Math.pow(1024, 2), prev: 'B' },\n    MB: { max: Math.pow(1024, 3), prev: 'kB' },\n    GB: { max: Math.pow(1024, 4), prev: 'MB' },\n    TB: { max: Number.MAX_SAFE_INTEGER, prev: 'GB' }\n  };\n\n  transform(input: NzSafeAny, decimal: number = 0, from: ByteUnit = 'B', to?: ByteUnit): NzSafeAny {\n    if (!(isNumberFinite(input) && isNumberFinite(decimal) && decimal % 1 === 0 && decimal >= 0)) {\n      return input;\n    }\n\n    let bytes = input;\n    let unit = from;\n    while (unit !== 'B') {\n      bytes *= 1024;\n      unit = NzBytesPipe.formats[unit].prev!;\n    }\n\n    if (to) {\n      const format = NzBytesPipe.formats[to];\n\n      const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n\n      return NzBytesPipe.formatResult(result, to);\n    }\n\n    for (const key in NzBytesPipe.formats) {\n      if (NzBytesPipe.formats.hasOwnProperty(key)) {\n        const format = NzBytesPipe.formats[key];\n        if (bytes < format.max) {\n          const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n\n          return NzBytesPipe.formatResult(result, key);\n        }\n      }\n    }\n  }\n\n  static formatResult(result: number, unit: string): string {\n    return `${result} ${unit}`;\n  }\n\n  static calculateResult(format: { max: number; prev?: ByteUnit }, bytes: number): number {\n    const prev = format.prev ? NzBytesPipe.formats[format.prev] : undefined;\n    return prev ? bytes / prev.max : bytes;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'nzToCssUnit'\n})\nexport class NzToCssUnitPipe implements PipeTransform {\n  transform(value: number | string, defaultUnit: string = 'px'): string {\n    const absoluteLengthUnit = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px'];\n    const relativeLengthUnit = ['em', 'ex', 'ch', 'rem', '1h', 'vw', 'vh', 'vmin', 'vmax'];\n    const percentagesUnit = ['%'];\n    const listOfUnit = [...absoluteLengthUnit, ...relativeLengthUnit, ...percentagesUnit];\n    let unit = 'px';\n    if (listOfUnit.some(u => u === defaultUnit)) {\n      unit = defaultUnit;\n    }\n    return typeof value === 'number' ? `${value}${unit}` : `${value}`;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\n@Pipe({\n  name: 'nzEllipsis'\n})\nexport class NzEllipsisPipe implements PipeTransform {\n  transform(value: NzSafeAny, length?: number, suffix: string = ''): NzSafeAny {\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    const len = typeof length === 'undefined' ? value.length : length;\n\n    if (value.length <= len) {\n      return value;\n    }\n\n    return value.substring(0, len) + suffix;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { isNil } from 'ng-zorro-antd/core/util';\n\n@Pipe({\n  name: 'nzSafeNull'\n})\nexport class NzSafeNullPipe implements PipeTransform {\n  transform<T>(value: T, replace: string = ''): T | string {\n    if (isNil(value)) {\n      return replace;\n    }\n    return value;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeStyle, SafeUrl } from '@angular/platform-browser';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\ntype DomSanitizerType = 'html' | 'style' | 'url' | 'resourceUrl';\n\n@Pipe({\n  name: 'nzSanitizer'\n})\nexport class NzSanitizerPipe implements PipeTransform {\n  constructor(protected sanitizer: DomSanitizer) {}\n  transform(value: NzSafeAny, type: 'html'): SafeHtml;\n  transform(value: NzSafeAny, type: 'style'): SafeStyle;\n  transform(value: NzSafeAny, type: 'url'): SafeUrl;\n  transform(value: NzSafeAny, type: 'resourceUrl'): SafeResourceUrl;\n  transform(value: NzSafeAny, type: DomSanitizerType = 'html'): SafeHtml | SafeStyle | SafeUrl | SafeResourceUrl {\n    switch (type) {\n      case 'html':\n        return this.sanitizer.bypassSecurityTrustHtml(value);\n      case 'style':\n        return this.sanitizer.bypassSecurityTrustStyle(value);\n      case 'url':\n        return this.sanitizer.bypassSecurityTrustUrl(value);\n      case 'resourceUrl':\n        return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n      default:\n        throw new Error(`Invalid safe type specified`);\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'nzTrim'\n})\nexport class NzTrimPipe implements PipeTransform {\n  // TODO(chensimeng) trimEnd, trimStart\n  transform(text: string): string {\n    return text.trim();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NzAggregatePipe } from './nz-aggregate.pipe';\nimport { NzBytesPipe } from './nz-bytes.pipe';\nimport { NzToCssUnitPipe } from './nz-css-unit.pipe';\nimport { NzEllipsisPipe } from './nz-ellipsis.pipe';\nimport { NzSafeNullPipe } from './nz-safe-null.pipe';\nimport { NzSanitizerPipe } from './nz-sanitizer.pipe';\nimport { NzTrimPipe } from './nz-trim.pipe';\n\nconst pipes = [NzToCssUnitPipe, NzSafeNullPipe, NzSanitizerPipe, NzTrimPipe, NzBytesPipe, NzAggregatePipe, NzEllipsisPipe];\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [pipes],\n  declarations: [pipes]\n})\nexport class NzPipesModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport * from './nz-pipes.module';\nexport * from './nz-css-unit.pipe';\nexport * from './nz-bytes.pipe';\nexport * from './nz-ellipsis.pipe';\nexport * from './nz-aggregate.pipe';\nexport * from './nz-safe-null.pipe';\nexport * from './nz-sanitizer.pipe';\nexport * from './nz-trim.pipe';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}