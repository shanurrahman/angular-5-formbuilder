{"ast":null,"code":"import _classCallCheck from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _slicedToArray from \"/home/shanur/Documents/personal/angular-5-formbuilder/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _addMonths from 'date-fns/addMonths';\nimport _addYears from 'date-fns/addYears';\nimport differenceInCalendarDays from 'date-fns/differenceInCalendarDays';\nimport differenceInCalendarMonths from 'date-fns/differenceInCalendarMonths';\nimport differenceInCalendarYears from 'date-fns/differenceInCalendarYears';\nimport differenceInHours from 'date-fns/differenceInHours';\nimport differenceInMinutes from 'date-fns/differenceInMinutes';\nimport differenceInSeconds from 'date-fns/differenceInSeconds';\nimport _isFirstDayOfMonth from 'date-fns/isFirstDayOfMonth';\nimport _isLastDayOfMonth from 'date-fns/isLastDayOfMonth';\nimport isSameDay from 'date-fns/isSameDay';\nimport isSameHour from 'date-fns/isSameHour';\nimport isSameMinute from 'date-fns/isSameMinute';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport isSameSecond from 'date-fns/isSameSecond';\nimport isSameYear from 'date-fns/isSameYear';\nimport _isToday from 'date-fns/isToday';\nimport _isValid from 'date-fns/isValid';\nimport _setDay from 'date-fns/setDay';\nimport _setMonth from 'date-fns/setMonth';\nimport _setYear from 'date-fns/setYear';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { getLocaleDayPeriods, FormStyle, TranslationWidth } from '@angular/common';\nimport { isNotNil } from 'ng-zorro-antd/core/util';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nfunction wrongSortOrder(rangeValue) {\n  var _rangeValue = _slicedToArray(rangeValue, 2),\n      start = _rangeValue[0],\n      end = _rangeValue[1];\n\n  return !!start && !!end && end.isBeforeDay(start);\n}\n\nfunction normalizeRangeValue(value, allowSameInTwoPanel) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'month';\n\n  var _value = _slicedToArray(value, 2),\n      start = _value[0],\n      end = _value[1];\n\n  var newStart = start || new CandyDate();\n  var newEnd = end || new CandyDate();\n\n  if (start && !end) {\n    newStart = start;\n    newEnd = start.add(1, type);\n  } else if (!start && end) {\n    newStart = end.add(-1, type);\n    newEnd = end;\n  }\n\n  if (newEnd.isSame(newStart, type) && !allowSameInTwoPanel) {\n    newEnd = newStart.add(1, type);\n  }\n\n  return [newStart, newEnd];\n}\n\nfunction cloneDate(value) {\n  if (Array.isArray(value)) {\n    return value.map(function (v) {\n      return v instanceof CandyDate ? v.clone() : null;\n    });\n  } else {\n    return value instanceof CandyDate ? value.clone() : null;\n  }\n}\n/**\n * Wrapping kind APIs for date operating and unify\n * NOTE: every new API return new CandyDate object without side effects to the former Date object\n * NOTE: most APIs are based on local time other than customized locale id (this needs tobe support in future)\n * TODO: support format() against to angular's core API\n */\n\n\nvar CandyDate = /*#__PURE__*/function () {\n  // locale: string; // Custom specified locale ID\n  function CandyDate(date) {\n    _classCallCheck(this, CandyDate);\n\n    if (date) {\n      if (date instanceof Date) {\n        this.nativeDate = date;\n      } else if (typeof date === 'string' || typeof date === 'number') {\n        warn('The string type is not recommended for date-picker, use \"Date\" type');\n        this.nativeDate = new Date(date);\n      } else {\n        throw new Error('The input date type is not supported (\"Date\" is now recommended)');\n      }\n    } else {\n      this.nativeDate = new Date();\n    }\n  }\n\n  _createClass(CandyDate, [{\n    key: \"calendarStart\",\n    value: function calendarStart(options) {\n      return new CandyDate(startOfWeek(startOfMonth(this.nativeDate), options));\n    } // ---------------------------------------------------------------------\n    // | Native shortcuts\n    // -----------------------------------------------------------------------------\\\n\n  }, {\n    key: \"getYear\",\n    value: function getYear() {\n      return this.nativeDate.getFullYear();\n    }\n  }, {\n    key: \"getMonth\",\n    value: function getMonth() {\n      return this.nativeDate.getMonth();\n    }\n  }, {\n    key: \"getDay\",\n    value: function getDay() {\n      return this.nativeDate.getDay();\n    }\n  }, {\n    key: \"getTime\",\n    value: function getTime() {\n      return this.nativeDate.getTime();\n    }\n  }, {\n    key: \"getDate\",\n    value: function getDate() {\n      return this.nativeDate.getDate();\n    }\n  }, {\n    key: \"getHours\",\n    value: function getHours() {\n      return this.nativeDate.getHours();\n    }\n  }, {\n    key: \"getMinutes\",\n    value: function getMinutes() {\n      return this.nativeDate.getMinutes();\n    }\n  }, {\n    key: \"getSeconds\",\n    value: function getSeconds() {\n      return this.nativeDate.getSeconds();\n    }\n  }, {\n    key: \"getMilliseconds\",\n    value: function getMilliseconds() {\n      return this.nativeDate.getMilliseconds();\n    } // ---------------------------------------------------------------------\n    // | New implementing APIs\n    // ---------------------------------------------------------------------\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new CandyDate(new Date(this.nativeDate));\n    }\n  }, {\n    key: \"setHms\",\n    value: function setHms(hour, minute, second) {\n      return new CandyDate(this.nativeDate.setHours(hour, minute, second));\n    }\n  }, {\n    key: \"setYear\",\n    value: function setYear(year) {\n      return new CandyDate(_setYear(this.nativeDate, year));\n    }\n  }, {\n    key: \"addYears\",\n    value: function addYears(amount) {\n      return new CandyDate(_addYears(this.nativeDate, amount));\n    } // NOTE: month starts from 0\n    // NOTE: Don't use the native API for month manipulation as it not restrict the date when it overflows, eg. (new Date('2018-7-31')).setMonth(1) will be date of 2018-3-03 instead of 2018-2-28\n\n  }, {\n    key: \"setMonth\",\n    value: function setMonth(month) {\n      return new CandyDate(_setMonth(this.nativeDate, month));\n    }\n  }, {\n    key: \"addMonths\",\n    value: function addMonths(amount) {\n      return new CandyDate(_addMonths(this.nativeDate, amount));\n    }\n  }, {\n    key: \"setDay\",\n    value: function setDay(day, options) {\n      return new CandyDate(_setDay(this.nativeDate, day, options));\n    }\n  }, {\n    key: \"setDate\",\n    value: function setDate(amount) {\n      var date = new Date(this.nativeDate);\n      date.setDate(amount);\n      return new CandyDate(date);\n    }\n  }, {\n    key: \"addDays\",\n    value: function addDays(amount) {\n      return this.setDate(this.getDate() + amount);\n    }\n  }, {\n    key: \"add\",\n    value: function add(amount, mode) {\n      switch (mode) {\n        case 'decade':\n          return this.addYears(amount * 10);\n          break;\n\n        case 'year':\n          return this.addYears(amount);\n          break;\n\n        case 'month':\n          return this.addMonths(amount);\n          break;\n\n        default:\n          return this.addMonths(amount);\n          break;\n      }\n    }\n  }, {\n    key: \"isSame\",\n    value: function isSame(date) {\n      var grain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'day';\n      var fn;\n\n      switch (grain) {\n        case 'decade':\n          fn = function fn(pre, next) {\n            return Math.abs(pre.getFullYear() - next.getFullYear()) < 11;\n          };\n\n          break;\n\n        case 'year':\n          fn = isSameYear;\n          break;\n\n        case 'month':\n          fn = isSameMonth;\n          break;\n\n        case 'day':\n          fn = isSameDay;\n          break;\n\n        case 'hour':\n          fn = isSameHour;\n          break;\n\n        case 'minute':\n          fn = isSameMinute;\n          break;\n\n        case 'second':\n          fn = isSameSecond;\n          break;\n\n        default:\n          fn = isSameDay;\n          break;\n      }\n\n      return fn(this.nativeDate, this.toNativeDate(date));\n    }\n  }, {\n    key: \"isSameYear\",\n    value: function isSameYear(date) {\n      return this.isSame(date, 'year');\n    }\n  }, {\n    key: \"isSameMonth\",\n    value: function isSameMonth(date) {\n      return this.isSame(date, 'month');\n    }\n  }, {\n    key: \"isSameDay\",\n    value: function isSameDay(date) {\n      return this.isSame(date, 'day');\n    }\n  }, {\n    key: \"isSameHour\",\n    value: function isSameHour(date) {\n      return this.isSame(date, 'hour');\n    }\n  }, {\n    key: \"isSameMinute\",\n    value: function isSameMinute(date) {\n      return this.isSame(date, 'minute');\n    }\n  }, {\n    key: \"isSameSecond\",\n    value: function isSameSecond(date) {\n      return this.isSame(date, 'second');\n    }\n  }, {\n    key: \"isBefore\",\n    value: function isBefore(date) {\n      var grain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'day';\n\n      if (date === null) {\n        return false;\n      }\n\n      var fn;\n\n      switch (grain) {\n        case 'year':\n          fn = differenceInCalendarYears;\n          break;\n\n        case 'month':\n          fn = differenceInCalendarMonths;\n          break;\n\n        case 'day':\n          fn = differenceInCalendarDays;\n          break;\n\n        case 'hour':\n          fn = differenceInHours;\n          break;\n\n        case 'minute':\n          fn = differenceInMinutes;\n          break;\n\n        case 'second':\n          fn = differenceInSeconds;\n          break;\n\n        default:\n          fn = differenceInCalendarDays;\n          break;\n      }\n\n      return fn(this.nativeDate, this.toNativeDate(date)) < 0;\n    }\n  }, {\n    key: \"isBeforeYear\",\n    value: function isBeforeYear(date) {\n      return this.isBefore(date, 'year');\n    }\n  }, {\n    key: \"isBeforeMonth\",\n    value: function isBeforeMonth(date) {\n      return this.isBefore(date, 'month');\n    }\n  }, {\n    key: \"isBeforeDay\",\n    value: function isBeforeDay(date) {\n      return this.isBefore(date, 'day');\n    } // Equal to today accurate to \"day\"\n\n  }, {\n    key: \"isToday\",\n    value: function isToday() {\n      return _isToday(this.nativeDate);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return _isValid(this.nativeDate);\n    }\n  }, {\n    key: \"isFirstDayOfMonth\",\n    value: function isFirstDayOfMonth() {\n      return _isFirstDayOfMonth(this.nativeDate);\n    }\n  }, {\n    key: \"isLastDayOfMonth\",\n    value: function isLastDayOfMonth() {\n      return _isLastDayOfMonth(this.nativeDate);\n    }\n  }, {\n    key: \"toNativeDate\",\n    value: function toNativeDate(date) {\n      return date instanceof CandyDate ? date.nativeDate : date;\n    }\n  }]);\n\n  return CandyDate;\n}();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], ['M', 1000 * 60 * 60 * 24 * 30], ['D', 1000 * 60 * 60 * 24], ['H', 1000 * 60 * 60], ['m', 1000 * 60], ['s', 1000], ['S', 1] // million seconds\n];\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar NgTimeParser = /*#__PURE__*/function () {\n  function NgTimeParser(format, localeId) {\n    _classCallCheck(this, NgTimeParser);\n\n    this.format = format;\n    this.localeId = localeId;\n    this.regex = null;\n    this.matchMap = {\n      hour: null,\n      minute: null,\n      second: null,\n      periodNarrow: null,\n      periodWide: null,\n      periodAbbreviated: null\n    };\n    this.genRegexp();\n  }\n\n  _createClass(NgTimeParser, [{\n    key: \"toDate\",\n    value: function toDate(str) {\n      var result = this.getTimeResult(str);\n      var time = new Date();\n\n      if (isNotNil(result === null || result === void 0 ? void 0 : result.hour)) {\n        time.setHours(result.hour);\n      }\n\n      if (isNotNil(result === null || result === void 0 ? void 0 : result.minute)) {\n        time.setMinutes(result.minute);\n      }\n\n      if (isNotNil(result === null || result === void 0 ? void 0 : result.second)) {\n        time.setSeconds(result.second);\n      }\n\n      if ((result === null || result === void 0 ? void 0 : result.period) === 1 && time.getHours() < 12) {\n        time.setHours(time.getHours() + 12);\n      }\n\n      return time;\n    }\n  }, {\n    key: \"getTimeResult\",\n    value: function getTimeResult(str) {\n      var match = this.regex.exec(str);\n      var period = null;\n\n      if (match) {\n        if (isNotNil(this.matchMap.periodNarrow)) {\n          period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Narrow).indexOf(match[this.matchMap.periodNarrow + 1]);\n        }\n\n        if (isNotNil(this.matchMap.periodWide)) {\n          period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Wide).indexOf(match[this.matchMap.periodWide + 1]);\n        }\n\n        if (isNotNil(this.matchMap.periodAbbreviated)) {\n          period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Abbreviated).indexOf(match[this.matchMap.periodAbbreviated + 1]);\n        }\n\n        return {\n          hour: isNotNil(this.matchMap.hour) ? Number.parseInt(match[this.matchMap.hour + 1], 10) : null,\n          minute: isNotNil(this.matchMap.minute) ? Number.parseInt(match[this.matchMap.minute + 1], 10) : null,\n          second: isNotNil(this.matchMap.second) ? Number.parseInt(match[this.matchMap.second + 1], 10) : null,\n          period: period\n        };\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"genRegexp\",\n    value: function genRegexp() {\n      var _this = this;\n\n      var regexStr = this.format.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$&');\n      var hourRegex = /h{1,2}/i;\n      var minuteRegex = /m{1,2}/;\n      var secondRegex = /s{1,2}/;\n      var periodNarrow = /aaaaa/;\n      var periodWide = /aaaa/;\n      var periodAbbreviated = /a{1,3}/;\n      var hourMatch = hourRegex.exec(this.format);\n      var minuteMatch = minuteRegex.exec(this.format);\n      var secondMatch = secondRegex.exec(this.format);\n      var periodNarrowMatch = periodNarrow.exec(this.format);\n      var periodWideMatch = null;\n      var periodAbbreviatedMatch = null;\n\n      if (!periodNarrowMatch) {\n        periodWideMatch = periodWide.exec(this.format);\n      }\n\n      if (!periodWideMatch && !periodNarrowMatch) {\n        periodAbbreviatedMatch = periodAbbreviated.exec(this.format);\n      }\n\n      var matchs = [hourMatch, minuteMatch, secondMatch, periodNarrowMatch, periodWideMatch, periodAbbreviatedMatch].filter(function (m) {\n        return !!m;\n      }).sort(function (a, b) {\n        return a.index - b.index;\n      });\n      matchs.forEach(function (match, index) {\n        switch (match) {\n          case hourMatch:\n            _this.matchMap.hour = index;\n            regexStr = regexStr.replace(hourRegex, '(\\\\d{1,2})');\n            break;\n\n          case minuteMatch:\n            _this.matchMap.minute = index;\n            regexStr = regexStr.replace(minuteRegex, '(\\\\d{1,2})');\n            break;\n\n          case secondMatch:\n            _this.matchMap.second = index;\n            regexStr = regexStr.replace(secondRegex, '(\\\\d{1,2})');\n            break;\n\n          case periodNarrowMatch:\n            _this.matchMap.periodNarrow = index;\n            var periodsNarrow = getLocaleDayPeriods(_this.localeId, FormStyle.Format, TranslationWidth.Narrow).join('|');\n            regexStr = regexStr.replace(periodNarrow, \"(\".concat(periodsNarrow, \")\"));\n            break;\n\n          case periodWideMatch:\n            _this.matchMap.periodWide = index;\n            var periodsWide = getLocaleDayPeriods(_this.localeId, FormStyle.Format, TranslationWidth.Wide).join('|');\n            regexStr = regexStr.replace(periodWide, \"(\".concat(periodsWide, \")\"));\n            break;\n\n          case periodAbbreviatedMatch:\n            _this.matchMap.periodAbbreviated = index;\n            var periodsAbbreviated = getLocaleDayPeriods(_this.localeId, FormStyle.Format, TranslationWidth.Abbreviated).join('|');\n            regexStr = regexStr.replace(periodAbbreviated, \"(\".concat(periodsAbbreviated, \")\"));\n            break;\n        }\n      });\n      this.regex = new RegExp(regexStr);\n    }\n  }]);\n\n  return NgTimeParser;\n}();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CandyDate, cloneDate, normalizeRangeValue, timeUnits, wrongSortOrder, NgTimeParser as ɵNgTimeParser };","map":{"version":3,"sources":["../../components/core/time/candy-date.ts","../../components/core/time/time.ts","../../components/core/time/time-parser.ts","../../components/core/time/public-api.ts","../../components/core/time/ng-zorro-antd-core-time.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport addMonths from 'date-fns/addMonths';\nimport addYears from 'date-fns/addYears';\nimport differenceInCalendarDays from 'date-fns/differenceInCalendarDays';\nimport differenceInCalendarMonths from 'date-fns/differenceInCalendarMonths';\nimport differenceInCalendarYears from 'date-fns/differenceInCalendarYears';\nimport differenceInHours from 'date-fns/differenceInHours';\nimport differenceInMinutes from 'date-fns/differenceInMinutes';\nimport differenceInSeconds from 'date-fns/differenceInSeconds';\nimport isFirstDayOfMonth from 'date-fns/isFirstDayOfMonth';\nimport isLastDayOfMonth from 'date-fns/isLastDayOfMonth';\nimport isSameDay from 'date-fns/isSameDay';\nimport isSameHour from 'date-fns/isSameHour';\nimport isSameMinute from 'date-fns/isSameMinute';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport isSameSecond from 'date-fns/isSameSecond';\nimport isSameYear from 'date-fns/isSameYear';\nimport isToday from 'date-fns/isToday';\nimport isValid from 'date-fns/isValid';\nimport setDay from 'date-fns/setDay';\nimport setMonth from 'date-fns/setMonth';\nimport setYear from 'date-fns/setYear';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { IndexableObject, NzSafeAny } from 'ng-zorro-antd/core/types';\n\nexport type CandyDateMode = 'decade' | 'year' | 'month' | 'day' | 'hour' | 'minute' | 'second';\nexport type NormalizedMode = 'decade' | 'year' | 'month';\nexport type WeekDayIndex = 0 | 1 | 2 | 3 | 4 | 5 | 6;\nexport type CandyDateType = CandyDate | Date | null;\nexport type SingleValue = CandyDate | null;\nexport type CompatibleValue = SingleValue | SingleValue[];\n\nexport function wrongSortOrder(rangeValue: SingleValue[]): boolean {\n  const [start, end] = rangeValue;\n  return !!start && !!end && end.isBeforeDay(start);\n}\n\nexport function normalizeRangeValue(value: SingleValue[], allowSameInTwoPanel: boolean, type: NormalizedMode = 'month'): CandyDate[] {\n  const [start, end] = value;\n  let newStart: CandyDate = start || new CandyDate();\n  let newEnd: CandyDate = end || new CandyDate();\n  if (start && !end) {\n    newStart = start;\n    newEnd = start.add(1, type);\n  } else if (!start && end) {\n    newStart = end.add(-1, type);\n    newEnd = end;\n  }\n  if (newEnd.isSame(newStart, type) && !allowSameInTwoPanel) {\n    newEnd = newStart.add(1, type);\n  }\n  return [newStart, newEnd];\n}\n\nexport function cloneDate(value: CompatibleValue): CompatibleValue {\n  if (Array.isArray(value)) {\n    return value.map(v => (v instanceof CandyDate ? v.clone() : null));\n  } else {\n    return value instanceof CandyDate ? value.clone() : null;\n  }\n}\n\n/**\n * Wrapping kind APIs for date operating and unify\n * NOTE: every new API return new CandyDate object without side effects to the former Date object\n * NOTE: most APIs are based on local time other than customized locale id (this needs tobe support in future)\n * TODO: support format() against to angular's core API\n */\nexport class CandyDate implements IndexableObject {\n  nativeDate: Date;\n  // locale: string; // Custom specified locale ID\n\n  constructor(date?: Date | string | number) {\n    if (date) {\n      if (date instanceof Date) {\n        this.nativeDate = date;\n      } else if (typeof date === 'string' || typeof date === 'number') {\n        warn('The string type is not recommended for date-picker, use \"Date\" type');\n        this.nativeDate = new Date(date);\n      } else {\n        throw new Error('The input date type is not supported (\"Date\" is now recommended)');\n      }\n    } else {\n      this.nativeDate = new Date();\n    }\n  }\n\n  calendarStart(options?: { weekStartsOn: WeekDayIndex | undefined }): CandyDate {\n    return new CandyDate(startOfWeek(startOfMonth(this.nativeDate), options));\n  }\n\n  // ---------------------------------------------------------------------\n  // | Native shortcuts\n  // -----------------------------------------------------------------------------\\\n\n  getYear(): number {\n    return this.nativeDate.getFullYear();\n  }\n\n  getMonth(): number {\n    return this.nativeDate.getMonth();\n  }\n\n  getDay(): number {\n    return this.nativeDate.getDay();\n  }\n\n  getTime(): number {\n    return this.nativeDate.getTime();\n  }\n\n  getDate(): number {\n    return this.nativeDate.getDate();\n  }\n\n  getHours(): number {\n    return this.nativeDate.getHours();\n  }\n\n  getMinutes(): number {\n    return this.nativeDate.getMinutes();\n  }\n\n  getSeconds(): number {\n    return this.nativeDate.getSeconds();\n  }\n\n  getMilliseconds(): number {\n    return this.nativeDate.getMilliseconds();\n  }\n\n  // ---------------------------------------------------------------------\n  // | New implementing APIs\n  // ---------------------------------------------------------------------\n\n  clone(): CandyDate {\n    return new CandyDate(new Date(this.nativeDate));\n  }\n\n  setHms(hour: number, minute: number, second: number): CandyDate {\n    return new CandyDate(this.nativeDate.setHours(hour, minute, second));\n  }\n\n  setYear(year: number): CandyDate {\n    return new CandyDate(setYear(this.nativeDate, year));\n  }\n\n  addYears(amount: number): CandyDate {\n    return new CandyDate(addYears(this.nativeDate, amount));\n  }\n\n  // NOTE: month starts from 0\n  // NOTE: Don't use the native API for month manipulation as it not restrict the date when it overflows, eg. (new Date('2018-7-31')).setMonth(1) will be date of 2018-3-03 instead of 2018-2-28\n  setMonth(month: number): CandyDate {\n    return new CandyDate(setMonth(this.nativeDate, month));\n  }\n\n  addMonths(amount: number): CandyDate {\n    return new CandyDate(addMonths(this.nativeDate, amount));\n  }\n\n  setDay(day: number, options?: { weekStartsOn: WeekDayIndex }): CandyDate {\n    return new CandyDate(setDay(this.nativeDate, day, options));\n  }\n\n  setDate(amount: number): CandyDate {\n    const date = new Date(this.nativeDate);\n    date.setDate(amount);\n    return new CandyDate(date);\n  }\n\n  addDays(amount: number): CandyDate {\n    return this.setDate(this.getDate() + amount);\n  }\n\n  add(amount: number, mode: NormalizedMode): CandyDate {\n    switch (mode) {\n      case 'decade':\n        return this.addYears(amount * 10);\n        break;\n      case 'year':\n        return this.addYears(amount);\n        break;\n      case 'month':\n        return this.addMonths(amount);\n        break;\n      default:\n        return this.addMonths(amount);\n        break;\n    }\n  }\n\n  isSame(date: CandyDateType, grain: CandyDateMode = 'day'): boolean {\n    let fn;\n    switch (grain) {\n      case 'decade':\n        fn = (pre: Date, next: Date) => Math.abs(pre.getFullYear() - next.getFullYear()) < 11;\n        break;\n      case 'year':\n        fn = isSameYear;\n        break;\n      case 'month':\n        fn = isSameMonth;\n        break;\n      case 'day':\n        fn = isSameDay;\n        break;\n      case 'hour':\n        fn = isSameHour;\n        break;\n      case 'minute':\n        fn = isSameMinute;\n        break;\n      case 'second':\n        fn = isSameSecond;\n        break;\n      default:\n        fn = isSameDay;\n        break;\n    }\n    return fn(this.nativeDate, this.toNativeDate(date));\n  }\n\n  isSameYear(date: CandyDateType): boolean {\n    return this.isSame(date, 'year');\n  }\n\n  isSameMonth(date: CandyDateType): boolean {\n    return this.isSame(date, 'month');\n  }\n\n  isSameDay(date: CandyDateType): boolean {\n    return this.isSame(date, 'day');\n  }\n\n  isSameHour(date: CandyDateType): boolean {\n    return this.isSame(date, 'hour');\n  }\n\n  isSameMinute(date: CandyDateType): boolean {\n    return this.isSame(date, 'minute');\n  }\n\n  isSameSecond(date: CandyDateType): boolean {\n    return this.isSame(date, 'second');\n  }\n\n  isBefore(date: CandyDateType, grain: CandyDateMode = 'day'): boolean {\n    if (date === null) {\n      return false;\n    }\n    let fn;\n    switch (grain) {\n      case 'year':\n        fn = differenceInCalendarYears;\n        break;\n      case 'month':\n        fn = differenceInCalendarMonths;\n        break;\n      case 'day':\n        fn = differenceInCalendarDays;\n        break;\n      case 'hour':\n        fn = differenceInHours;\n        break;\n      case 'minute':\n        fn = differenceInMinutes;\n        break;\n      case 'second':\n        fn = differenceInSeconds;\n        break;\n      default:\n        fn = differenceInCalendarDays;\n        break;\n    }\n    return fn(this.nativeDate, this.toNativeDate(date)) < 0;\n  }\n\n  isBeforeYear(date: CandyDateType): boolean {\n    return this.isBefore(date, 'year');\n  }\n\n  isBeforeMonth(date: CandyDateType): boolean {\n    return this.isBefore(date, 'month');\n  }\n\n  isBeforeDay(date: CandyDateType): boolean {\n    return this.isBefore(date, 'day');\n  }\n\n  // Equal to today accurate to \"day\"\n  isToday(): boolean {\n    return isToday(this.nativeDate);\n  }\n\n  isValid(): boolean {\n    return isValid(this.nativeDate);\n  }\n\n  isFirstDayOfMonth(): boolean {\n    return isFirstDayOfMonth(this.nativeDate);\n  }\n\n  isLastDayOfMonth(): boolean {\n    return isLastDayOfMonth(this.nativeDate);\n  }\n\n  private toNativeDate(date: NzSafeAny): Date {\n    return date instanceof CandyDate ? date.nativeDate : date;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport const timeUnits: Array<[string, number]> = [\n  ['Y', 1000 * 60 * 60 * 24 * 365], // years\n  ['M', 1000 * 60 * 60 * 24 * 30], // months\n  ['D', 1000 * 60 * 60 * 24], // days\n  ['H', 1000 * 60 * 60], // hours\n  ['m', 1000 * 60], // minutes\n  ['s', 1000], // seconds\n  ['S', 1] // million seconds\n];\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n// from https://github.com/hsuanxyz/ng-time-parser\nimport { FormStyle, getLocaleDayPeriods, TranslationWidth } from '@angular/common';\nimport { isNotNil } from 'ng-zorro-antd/core/util';\n\nexport interface TimeResult {\n  hour: number | null;\n  minute: number | null;\n  second: number | null;\n  period: number | null;\n}\n\nexport class NgTimeParser {\n  regex: RegExp = null!;\n  matchMap: { [key: string]: null | number } = {\n    hour: null,\n    minute: null,\n    second: null,\n    periodNarrow: null,\n    periodWide: null,\n    periodAbbreviated: null\n  };\n\n  constructor(private format: string, private localeId: string) {\n    this.genRegexp();\n  }\n\n  toDate(str: string): Date {\n    const result = this.getTimeResult(str);\n    const time = new Date();\n\n    if (isNotNil(result?.hour)) {\n      time.setHours(result!.hour);\n    }\n\n    if (isNotNil(result?.minute)) {\n      time.setMinutes(result!.minute);\n    }\n\n    if (isNotNil(result?.second)) {\n      time.setSeconds(result!.second);\n    }\n\n    if (result?.period === 1 && time.getHours() < 12) {\n      time.setHours(time.getHours() + 12);\n    }\n\n    return time;\n  }\n\n  getTimeResult(str: string): TimeResult | null {\n    const match = this.regex.exec(str);\n    let period = null;\n    if (match) {\n      if (isNotNil(this.matchMap.periodNarrow)) {\n        period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Narrow).indexOf(\n          match[this.matchMap.periodNarrow + 1]\n        );\n      }\n      if (isNotNil(this.matchMap.periodWide)) {\n        period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Wide).indexOf(match[this.matchMap.periodWide + 1]);\n      }\n      if (isNotNil(this.matchMap.periodAbbreviated)) {\n        period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Abbreviated).indexOf(\n          match[this.matchMap.periodAbbreviated + 1]\n        );\n      }\n      return {\n        hour: isNotNil(this.matchMap.hour) ? Number.parseInt(match[this.matchMap.hour + 1], 10) : null,\n        minute: isNotNil(this.matchMap.minute) ? Number.parseInt(match[this.matchMap.minute + 1], 10) : null,\n        second: isNotNil(this.matchMap.second) ? Number.parseInt(match[this.matchMap.second + 1], 10) : null,\n        period\n      };\n    } else {\n      return null;\n    }\n  }\n\n  genRegexp(): void {\n    let regexStr = this.format.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$&');\n    const hourRegex = /h{1,2}/i;\n    const minuteRegex = /m{1,2}/;\n    const secondRegex = /s{1,2}/;\n    const periodNarrow = /aaaaa/;\n    const periodWide = /aaaa/;\n    const periodAbbreviated = /a{1,3}/;\n\n    const hourMatch = hourRegex.exec(this.format);\n    const minuteMatch = minuteRegex.exec(this.format);\n    const secondMatch = secondRegex.exec(this.format);\n    const periodNarrowMatch = periodNarrow.exec(this.format);\n    let periodWideMatch: null | RegExpExecArray = null;\n    let periodAbbreviatedMatch: null | RegExpExecArray = null;\n    if (!periodNarrowMatch) {\n      periodWideMatch = periodWide.exec(this.format);\n    }\n    if (!periodWideMatch && !periodNarrowMatch) {\n      periodAbbreviatedMatch = periodAbbreviated.exec(this.format);\n    }\n\n    const matchs = [hourMatch, minuteMatch, secondMatch, periodNarrowMatch, periodWideMatch, periodAbbreviatedMatch]\n      .filter(m => !!m)\n      .sort((a, b) => a!.index - b!.index);\n\n    matchs.forEach((match, index) => {\n      switch (match) {\n        case hourMatch:\n          this.matchMap.hour = index;\n          regexStr = regexStr.replace(hourRegex, '(\\\\d{1,2})');\n          break;\n        case minuteMatch:\n          this.matchMap.minute = index;\n          regexStr = regexStr.replace(minuteRegex, '(\\\\d{1,2})');\n          break;\n        case secondMatch:\n          this.matchMap.second = index;\n          regexStr = regexStr.replace(secondRegex, '(\\\\d{1,2})');\n          break;\n        case periodNarrowMatch:\n          this.matchMap.periodNarrow = index;\n          const periodsNarrow = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Narrow).join('|');\n          regexStr = regexStr.replace(periodNarrow, `(${periodsNarrow})`);\n          break;\n        case periodWideMatch:\n          this.matchMap.periodWide = index;\n          const periodsWide = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Wide).join('|');\n          regexStr = regexStr.replace(periodWide, `(${periodsWide})`);\n          break;\n        case periodAbbreviatedMatch:\n          this.matchMap.periodAbbreviated = index;\n          const periodsAbbreviated = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Abbreviated).join('|');\n          regexStr = regexStr.replace(periodAbbreviated, `(${periodsAbbreviated})`);\n          break;\n      }\n    });\n\n    this.regex = new RegExp(regexStr);\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport * from './candy-date';\nexport * from './time';\nexport { NgTimeParser as ɵNgTimeParser, TimeResult as ɵTimeResult } from './time-parser';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}